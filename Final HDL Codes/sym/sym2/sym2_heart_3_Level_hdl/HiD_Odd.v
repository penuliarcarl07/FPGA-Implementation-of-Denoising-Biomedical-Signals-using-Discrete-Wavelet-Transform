// -------------------------------------------------------------
// 
// File Name: hdlsrc\final_heart_sym2_level3_fixed\HiD_Odd.v
// Created: 2024-04-17 00:25:34
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HiD_Odd
// Source Path: final_heart_sym2_level3_fixed/DWT_sym2_3_Level/1st_Level_Decomp/HiD_Odd
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HiD_Odd
          (clk,
           reset,
           enb,
           In_HiD_o,
           Out_HiD_o);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_HiD_o;  // ufix16_En23
  output  signed [15:0] Out_HiD_o;  // sfix16_En23


  wire [15:0] HiD_1_out1;  // ufix16_En16
  wire [31:0] Multiply_mul_temp;  // ufix32_En39
  wire [15:0] Multiply_out1;  // ufix16_En23
  wire signed [15:0] HiD_3_out1;  // sfix16_En17
  reg [15:0] Delay_out1;  // ufix16_En23
  wire signed [16:0] Multiply1_cast;  // sfix17_En23
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En40
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En40
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] Delay3_out1;  // sfix16_En15
  wire signed [15:0] Add_add_cast;  // sfix16_En22
  wire signed [15:0] Add_add_cast_1;  // sfix16_En22
  wire signed [15:0] Add_add_temp;  // sfix16_En22
  wire signed [15:0] Add_out1;  // sfix16_En23


  assign HiD_1_out1 = 16'b1101011000100110;


  assign Multiply_mul_temp = HiD_1_out1 * In_HiD_o;
  assign Multiply_out1 = Multiply_mul_temp[31:16];


  assign HiD_3_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In_HiD_o;
        end
      end
    end


  assign Multiply1_cast = {1'b0, Delay_out1};
  assign Multiply1_mul_temp = HiD_3_out1 * Multiply1_cast;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = {{9{Multiply1_cast_1[31]}}, Multiply1_cast_1[31:25]};


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Multiply1_out1;
        end
      end
    end


  assign Add_add_cast = {1'b0, Multiply_out1[15:1]};
  assign Add_add_cast_1 = {Delay3_out1[8:0], 7'b0000000};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = {Add_add_temp[14:0], 1'b0};


  assign Out_HiD_o = Add_out1;

endmodule  // HiD_Odd

