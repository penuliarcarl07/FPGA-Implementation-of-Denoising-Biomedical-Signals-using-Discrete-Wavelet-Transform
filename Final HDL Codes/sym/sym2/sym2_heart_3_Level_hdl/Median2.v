// -------------------------------------------------------------
// 
// File Name: hdlsrc\final_heart_sym2_level3_fixed\Median2.v
// Created: 2024-04-17 00:25:34
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Median2
// Source Path: final_heart_sym2_level3_fixed/DWT_sym2_3_Level/Threshold_Estimator/Median2
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Median2
          (clk,
           reset,
           enb,
           Signal_w3,
           Median);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal_w3;  // ufix16_En27
  output  [15:0] Median;  // ufix16_En27


  reg [15:0] Delay2_out1;  // ufix16_En27
  wire [15:0] Data_Sorter1_out1;  // ufix16_En27
  wire [15:0] Data_Sorter1_out2;  // ufix16_En27
  reg [15:0] Delay3_out1;  // ufix16_En27
  reg [15:0] Delay4_out1;  // ufix16_En27
  wire [15:0] Data_Sorter2_out1;  // ufix16_En27
  wire [15:0] Data_Sorter2_out2;  // ufix16_En27
  wire [15:0] Data_Sorter5_out1;  // ufix16_En27
  wire [15:0] Data_Sorter5_out2;  // ufix16_En27
  wire [15:0] Data_Sorter8_out1;  // ufix16_En27
  wire [15:0] Data_Sorter8_out2;  // ufix16_En27
  reg [15:0] Delay5_out1;  // ufix16_En27
  reg [15:0] Delay6_out1;  // ufix16_En27
  wire [15:0] Data_Sorter3_out1;  // ufix16_En27
  wire [15:0] Data_Sorter3_out2;  // ufix16_En27
  wire [15:0] Data_Sorter6_out1;  // ufix16_En27
  wire [15:0] Data_Sorter6_out2;  // ufix16_En27
  wire [15:0] Data_Sorter9_out1;  // ufix16_En27
  wire [15:0] Data_Sorter9_out2;  // ufix16_En27
  wire [15:0] Data_Sorter12_out1;  // ufix16_En27
  wire [15:0] Data_Sorter12_out2;  // ufix16_En27
  wire [15:0] Data_Sorter15_out1;  // ufix16_En27
  reg [15:0] Delay7_out1;  // ufix16_En27
  reg [15:0] Delay8_out1;  // ufix16_En27
  wire [15:0] Data_Sorter4_out1;  // ufix16_En27
  wire [15:0] Data_Sorter4_out2;  // ufix16_En27
  wire [15:0] Data_Sorter7_out1;  // ufix16_En27
  wire [15:0] Data_Sorter7_out2;  // ufix16_En27
  wire [15:0] Data_Sorter10_out1;  // ufix16_En27
  wire [15:0] Data_Sorter10_out2;  // ufix16_En27
  wire [15:0] Data_Sorter13_out1;  // ufix16_En27
  wire [15:0] Data_Sorter13_out2;  // ufix16_En27
  wire [15:0] Data_Sorter16_out1;  // ufix16_En27
  wire [15:0] Data_Sorter16_out2;  // ufix16_En27
  wire [15:0] Data_Sorter19_out1;  // ufix16_En27
  wire [15:0] Data_Sorter11_out1;  // ufix16_En27
  wire [15:0] Data_Sorter11_out2;  // ufix16_En27
  wire [15:0] Data_Sorter14_out1;  // ufix16_En27
  wire [15:0] Data_Sorter14_out2;  // ufix16_En27
  wire [15:0] Data_Sorter17_out1;  // ufix16_En27
  wire [15:0] Data_Sorter17_out2;  // ufix16_En27
  wire [15:0] Data_Sorter20_out1;  // ufix16_En27
  wire [15:0] Data_Sorter20_out2;  // ufix16_En27
  wire [15:0] Data_Sorter22_out1;  // ufix16_En27
  wire [15:0] Data_Sorter18_out1;  // ufix16_En27
  wire [15:0] Data_Sorter21_out1;  // ufix16_En27
  wire [15:0] Data_Sorter23_out1;  // ufix16_En27
  wire [15:0] Data_Sorter24_out1;  // ufix16_En27
  wire [15:0] Data_Sorter24_out2;  // ufix16_En27
  wire [15:0] Add_add_cast;  // ufix16_En26
  wire [15:0] Add_add_cast_1;  // ufix16_En26
  wire [15:0] Add_out1;  // ufix16_En26
  reg [15:0] Delay1_out1;  // ufix16_En26
  wire [31:0] Gain_cast;  // ufix32_En42
  wire [15:0] Gain_out1;  // ufix16_En27
  reg [15:0] Delay_out1;  // ufix16_En27


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Signal_w3;
        end
      end
    end


  Data_Sorter1 u_Data_Sorter1 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Signal_w3),  // ufix16_En27
                               .Signal2(Delay2_out1),  // ufix16_En27
                               .High_Data(Data_Sorter1_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter1_out2)  // ufix16_En27
                               );
  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Delay2_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay3_out1;
        end
      end
    end


  Data_Sorter2 u_Data_Sorter2 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Delay3_out1),  // ufix16_En27
                               .Signal2(Delay4_out1),  // ufix16_En27
                               .High_Data(Data_Sorter2_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter2_out2)  // ufix16_En27
                               );
  Data_Sorter5 u_Data_Sorter5 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter1_out2),  // ufix16_En27
                               .Signal2(Data_Sorter2_out1),  // ufix16_En27
                               .High_Data(Data_Sorter5_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter5_out2)  // ufix16_En27
                               );
  Data_Sorter8 u_Data_Sorter8 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter1_out1),  // ufix16_En27
                               .Signal2(Data_Sorter5_out1),  // ufix16_En27
                               .High_Data(Data_Sorter8_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter8_out2)  // ufix16_En27
                               );
  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Delay4_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Delay5_out1;
        end
      end
    end


  Data_Sorter3 u_Data_Sorter3 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Delay5_out1),  // ufix16_En27
                               .Signal2(Delay6_out1),  // ufix16_En27
                               .High_Data(Data_Sorter3_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter3_out2)  // ufix16_En27
                               );
  Data_Sorter6 u_Data_Sorter6 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter2_out2),  // ufix16_En27
                               .Signal2(Data_Sorter3_out1),  // ufix16_En27
                               .High_Data(Data_Sorter6_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter6_out2)  // ufix16_En27
                               );
  Data_Sorter9 u_Data_Sorter9 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter5_out2),  // ufix16_En27
                               .Signal2(Data_Sorter6_out1),  // ufix16_En27
                               .High_Data(Data_Sorter9_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter9_out2)  // ufix16_En27
                               );
  Data_Sorter12 u_Data_Sorter12 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter8_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter9_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter12_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter12_out2)  // ufix16_En27
                                 );
  Data_Sorter15 u_Data_Sorter15 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter8_out1),  // ufix16_En27
                                 .Signal2(Data_Sorter12_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter15_out1)  // ufix16_En27
                                 );
  always @(posedge clk)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Delay6_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Delay7_out1;
        end
      end
    end


  Data_Sorter4 u_Data_Sorter4 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Delay7_out1),  // ufix16_En27
                               .Signal2(Delay8_out1),  // ufix16_En27
                               .High_Data(Data_Sorter4_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter4_out2)  // ufix16_En27
                               );
  Data_Sorter7 u_Data_Sorter7 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter3_out2),  // ufix16_En27
                               .Signal2(Data_Sorter4_out1),  // ufix16_En27
                               .High_Data(Data_Sorter7_out1),  // ufix16_En27
                               .Low_Data(Data_Sorter7_out2)  // ufix16_En27
                               );
  Data_Sorter10 u_Data_Sorter10 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter6_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter7_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter10_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter10_out2)  // ufix16_En27
                                 );
  Data_Sorter13 u_Data_Sorter13 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter9_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter10_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter13_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter13_out2)  // ufix16_En27
                                 );
  Data_Sorter16 u_Data_Sorter16 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter12_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter13_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter16_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter16_out2)  // ufix16_En27
                                 );
  Data_Sorter19 u_Data_Sorter19 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter15_out1),  // ufix16_En27
                                 .Signal2(Data_Sorter16_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter19_out1)  // ufix16_En27
                                 );
  Data_Sorter11 u_Data_Sorter11 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter7_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter4_out2),  // ufix16_En27
                                 .High_Data(Data_Sorter11_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter11_out2)  // ufix16_En27
                                 );
  Data_Sorter14 u_Data_Sorter14 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter10_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter11_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter14_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter14_out2)  // ufix16_En27
                                 );
  Data_Sorter17 u_Data_Sorter17 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter13_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter14_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter17_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter17_out2)  // ufix16_En27
                                 );
  Data_Sorter20 u_Data_Sorter20 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter16_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter17_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter20_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter20_out2)  // ufix16_En27
                                 );
  Data_Sorter22 u_Data_Sorter22 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter19_out1),  // ufix16_En27
                                 .Signal2(Data_Sorter20_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter22_out1)  // ufix16_En27
                                 );
  Data_Sorter18 u_Data_Sorter18 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter14_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter11_out2),  // ufix16_En27
                                 .High_Data(Data_Sorter18_out1)  // ufix16_En27
                                 );
  Data_Sorter21 u_Data_Sorter21 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter17_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter18_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter21_out1)  // ufix16_En27
                                 );
  Data_Sorter23 u_Data_Sorter23 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter20_out2),  // ufix16_En27
                                 .Signal2(Data_Sorter21_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter23_out1)  // ufix16_En27
                                 );
  Data_Sorter24 u_Data_Sorter24 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter22_out1),  // ufix16_En27
                                 .Signal2(Data_Sorter23_out1),  // ufix16_En27
                                 .High_Data(Data_Sorter24_out1),  // ufix16_En27
                                 .Low_Data(Data_Sorter24_out2)  // ufix16_En27
                                 );
  assign Add_add_cast = {1'b0, Data_Sorter24_out1[15:1]};
  assign Add_add_cast_1 = {1'b0, Data_Sorter24_out2[15:1]};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Add_out1;
        end
      end
    end


  assign Gain_cast = {1'b0, {Delay1_out1, 15'b000000000000000}};
  assign Gain_out1 = Gain_cast[30:15];


  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Gain_out1;
        end
      end
    end


  assign Median = Delay_out1;

endmodule  // Median2

