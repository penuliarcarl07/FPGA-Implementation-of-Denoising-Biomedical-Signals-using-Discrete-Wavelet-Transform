// -------------------------------------------------------------
// 
// File Name: hdlsrc\final_heart_sym2_level3_fixed\Soft_Thresholding2.v
// Created: 2024-04-17 00:25:34
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Soft_Thresholding2
// Source Path: final_heart_sym2_level3_fixed/DWT_sym2_3_Level/Soft_Thresholding2
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Soft_Thresholding2
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold1,
           New_Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En24
  input   [15:0] Threshold1;  // ufix16_En25
  output  signed [15:0] New_Threshold;  // sfix16_En28


  wire signed [32:0] Relational_Operator2_1_cast;  // sfix33_En25
  wire signed [32:0] Relational_Operator2_1_cast_1;  // sfix33_En25
  wire Relational_Operator2_relop1;
  reg  Delay2_out1;
  wire signed [16:0] Gain1_cast;  // sfix17_En25
  wire signed [16:0] Gain1_cast_1;  // sfix17_En25
  wire signed [31:0] Gain1_cast_2;  // sfix32_En40
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  wire signed [24:0] Relational_Operator3_1_cast;  // sfix25_En24
  wire signed [24:0] Relational_Operator3_1_cast_1;  // sfix25_En24
  wire Relational_Operator3_relop1;
  reg  Delay3_out1;
  wire Relational_Operator4_relop1;
  wire switch_compare_1;
  wire signed [15:0] Add1_add_cast;  // sfix16_En24
  wire signed [15:0] Add1_out1;  // sfix16_En24
  reg signed [15:0] Delay4_out1;  // sfix16_En24
  wire signed [15:0] Subtract1_sub_cast;  // sfix16_En24
  wire signed [15:0] Subtract1_out1;  // sfix16_En24
  wire signed [16:0] Abs_y;  // sfix17_En24
  wire signed [16:0] Abs_cast;  // sfix17_En24
  wire [15:0] Abs_out1;  // ufix16_En25
  wire Relational_Operator1_relop1;
  reg  Delay5_out1;
  wire signed [32:0] Relational_Operator5_1_cast;  // sfix33_En25
  wire signed [32:0] Relational_Operator5_1_cast_1;  // sfix33_En25
  wire Relational_Operator5_relop1;
  reg  Delay6_out1;
  wire Relational_Operator6_relop1;
  wire switch_compare_1_1;
  wire signed [15:0] Constant_out1;  // sfix16_En4
  wire signed [32:0] Relational_Operator7_1_cast;  // sfix33_En25
  wire signed [32:0] Relational_Operator7_1_cast_1;  // sfix33_En25
  wire Relational_Operator7_relop1;
  wire switch_compare_1_2;
  reg signed [15:0] Delay1_out1;  // sfix16_En24
  wire signed [15:0] Threshold_Switch_out1;  // sfix16_En24
  wire signed [15:0] Threshold_Switch1_out1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1_dtc;  // sfix16_En24
  wire signed [15:0] Threshold_Switch2_out1;  // sfix16_En24
  wire signed [32:0] Gain_mul_temp;  // sfix33_En43
  wire signed [31:0] Gain_cast;  // sfix32_En43
  wire signed [15:0] Gain_out1;  // sfix16_En28
  reg signed [15:0] Delay7_out1;  // sfix16_En28


  assign Relational_Operator2_1_cast = {{16{Signal_w[15]}}, {Signal_w, 1'b0}};
  assign Relational_Operator2_1_cast_1 = {17'b0, Threshold1};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast > Relational_Operator2_1_cast_1;


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Relational_Operator2_relop1;
        end
      end
    end


  assign Gain1_cast = {1'b0, Threshold1};
  assign Gain1_cast_1 =  - (Gain1_cast);
  assign Gain1_cast_2 = {Gain1_cast_1, 15'b000000000000000};
  assign Gain1_out1 = {{9{Gain1_cast_2[31]}}, Gain1_cast_2[31:25]};


  assign Relational_Operator3_1_cast = {{9{Signal_w[15]}}, Signal_w};
  assign Relational_Operator3_1_cast_1 = {Gain1_out1, 9'b000000000};
  assign Relational_Operator3_relop1 = Relational_Operator3_1_cast < Relational_Operator3_1_cast_1;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator3_relop1;
        end
      end
    end


  assign Relational_Operator4_relop1 = Delay2_out1 > Delay3_out1;


  assign switch_compare_1 = Relational_Operator4_relop1 == 1'b1;



  assign Add1_add_cast = {1'b0, Threshold1[15:1]};
  assign Add1_out1 = Signal_w + Add1_add_cast;


  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add1_out1;
        end
      end
    end


  assign Subtract1_sub_cast = {1'b0, Threshold1[15:1]};
  assign Subtract1_out1 = Signal_w - Subtract1_sub_cast;


  assign Abs_cast = {Signal_w[15], Signal_w};
  assign Abs_y = (Signal_w < 16'sb0000000000000000 ?  - (Abs_cast) :
              {Signal_w[15], Signal_w});
  assign Abs_out1 = {Abs_y[14:0], 1'b0};


  assign Relational_Operator1_relop1 = Abs_out1 == Threshold1;


  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Relational_Operator1_relop1;
        end
      end
    end


  assign Relational_Operator5_1_cast = {{16{Signal_w[15]}}, {Signal_w, 1'b0}};
  assign Relational_Operator5_1_cast_1 = {17'b0, Threshold1};
  assign Relational_Operator5_relop1 = Relational_Operator5_1_cast < Relational_Operator5_1_cast_1;


  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Relational_Operator5_relop1;
        end
      end
    end


  assign Relational_Operator6_relop1 = Delay5_out1 > Delay6_out1;


  assign switch_compare_1_1 = Relational_Operator6_relop1 == 1'b1;



  assign Constant_out1 = 16'sb0000000000000000;


  assign Relational_Operator7_1_cast = {{16{Signal_w[15]}}, {Signal_w, 1'b0}};
  assign Relational_Operator7_1_cast_1 = {17'b0, Threshold1};
  assign Relational_Operator7_relop1 = Relational_Operator7_1_cast == Relational_Operator7_1_cast_1;


  assign switch_compare_1_2 = Relational_Operator7_relop1 == 1'b1;



  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Subtract1_out1;
        end
      end
    end


  assign Threshold_Switch_out1 = (switch_compare_1 == 1'b0 ? Delay4_out1 :
              Delay1_out1);


  assign Threshold_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant_out1 :
              Constant_out1);


  assign Threshold_Switch1_out1_dtc = 16'sb0000000000000000;



  assign Threshold_Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Threshold_Switch_out1 :
              Threshold_Switch1_out1_dtc);


  assign Gain_mul_temp = 17'sb01100111101101100 * Threshold_Switch2_out1;
  assign Gain_cast = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast[30:15];


  always @(posedge clk)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Gain_out1;
        end
      end
    end


  assign New_Threshold = Delay7_out1;

endmodule  // Soft_Thresholding2

