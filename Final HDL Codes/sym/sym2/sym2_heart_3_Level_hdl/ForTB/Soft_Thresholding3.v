// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\final_heart_sym2_level3_hdl\Soft_Thresholding3.v
// Created: 2024-04-18 14:55:22
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Soft_Thresholding3
// Source Path: final_heart_sym2_level3_hdl/DWT_Sym2_Level3/Soft_Thresholding3
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Soft_Thresholding3
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold1,
           New_Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En27
  input   [15:0] Threshold1;  // ufix16_En25
  output  signed [15:0] New_Threshold;  // sfix16_En27


  wire [15:0] kconst;  // ufix16_En19
  reg [15:0] kconst_1;  // ufix16_En19
  reg [15:0] Threshold1_1;  // ufix16_En25
  reg [15:0] reduced_reg [0:54];  // ufix16 [55]
  wire [15:0] reduced_reg_next [0:54];  // ufix16_En25 [55]
  wire [15:0] Threshold1_2;  // ufix16_En25
  wire signed [36:0] Relational_Operator2_1_cast;  // sfix37_En27
  wire signed [36:0] Relational_Operator2_1_cast_1;  // sfix37_En27
  wire Relational_Operator2_relop1;
  reg  Delay2_out1;
  wire signed [15:0] kconst_2;  // sfix16_En15
  reg signed [15:0] kconst_3;  // sfix16_En15
  wire signed [16:0] Gain1_cast;  // sfix17_En25
  wire signed [32:0] Gain1_mul_temp;  // sfix33_En40
  wire signed [31:0] Gain1_cast_1;  // sfix32_En40
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch5_reg [0:54];  // sfix16 [55]
  wire signed [15:0] delayMatch5_reg_next [0:54];  // sfix16_En15 [55]
  wire signed [15:0] Gain1_out1_1;  // sfix16_En15
  wire signed [27:0] Relational_Operator3_1_cast;  // sfix28_En27
  wire signed [27:0] Relational_Operator3_1_cast_1;  // sfix28_En27
  wire Relational_Operator3_relop1;
  reg  Delay3_out1;
  wire Relational_Operator4_relop1;
  wire switch_compare_1;
  wire signed [15:0] Add1_add_cast;  // sfix16_En24
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En24
  wire signed [15:0] Add1_out1;  // sfix16_En24
  reg signed [15:0] Delay4_out1;  // sfix16_En24
  wire signed [15:0] Subtract1_sub_cast;  // sfix16_En24
  wire signed [15:0] Subtract1_sub_cast_1;  // sfix16_En24
  wire signed [15:0] Subtract1_out1;  // sfix16_En24
  wire signed [16:0] Abs_y;  // sfix17_En27
  wire signed [16:0] Abs_cast;  // sfix17_En27
  wire [15:0] Abs_out1;  // ufix16_En28
  wire [36:0] Relational_Operator1_1_cast;  // ufix37_En28
  wire [36:0] Relational_Operator1_1_cast_1;  // ufix37_En28
  wire Relational_Operator1_relop1;
  reg  Delay5_out1;
  wire signed [36:0] Relational_Operator5_1_cast;  // sfix37_En27
  wire signed [36:0] Relational_Operator5_1_cast_1;  // sfix37_En27
  wire Relational_Operator5_relop1;
  reg  Delay6_out1;
  wire Relational_Operator6_relop1;
  wire switch_compare_1_1;
  wire signed [15:0] Constant_out1;  // sfix16_En4
  wire signed [36:0] Relational_Operator7_1_cast;  // sfix37_En27
  wire signed [36:0] Relational_Operator7_1_cast_1;  // sfix37_En27
  wire Relational_Operator7_relop1;
  wire switch_compare_1_2;
  reg signed [15:0] Delay1_out1;  // sfix16_En24
  wire signed [15:0] Threshold_Switch_out1;  // sfix16_En24
  wire signed [15:0] Threshold_Switch1_out1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1_dtc;  // sfix16_En24
  wire signed [15:0] Threshold_Switch2_out1;  // sfix16_En24
  reg signed [15:0] Threshold_Switch2_out1_1;  // sfix16_En24
  wire signed [16:0] Gain_cast;  // sfix17_En19
  wire signed [32:0] Gain_mul_temp;  // sfix33_En43
  wire signed [31:0] Gain_cast_1;  // sfix32_En43
  wire signed [15:0] Gain_out1;  // sfix16_En27
  reg signed [15:0] Gain_out1_1;  // sfix16_En27


  assign kconst = 16'b1100111101101100;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        Threshold1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold1_1 <= Threshold1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'b0000000000000000;
        reduced_reg[1] <= 16'b0000000000000000;
        reduced_reg[2] <= 16'b0000000000000000;
        reduced_reg[3] <= 16'b0000000000000000;
        reduced_reg[4] <= 16'b0000000000000000;
        reduced_reg[5] <= 16'b0000000000000000;
        reduced_reg[6] <= 16'b0000000000000000;
        reduced_reg[7] <= 16'b0000000000000000;
        reduced_reg[8] <= 16'b0000000000000000;
        reduced_reg[9] <= 16'b0000000000000000;
        reduced_reg[10] <= 16'b0000000000000000;
        reduced_reg[11] <= 16'b0000000000000000;
        reduced_reg[12] <= 16'b0000000000000000;
        reduced_reg[13] <= 16'b0000000000000000;
        reduced_reg[14] <= 16'b0000000000000000;
        reduced_reg[15] <= 16'b0000000000000000;
        reduced_reg[16] <= 16'b0000000000000000;
        reduced_reg[17] <= 16'b0000000000000000;
        reduced_reg[18] <= 16'b0000000000000000;
        reduced_reg[19] <= 16'b0000000000000000;
        reduced_reg[20] <= 16'b0000000000000000;
        reduced_reg[21] <= 16'b0000000000000000;
        reduced_reg[22] <= 16'b0000000000000000;
        reduced_reg[23] <= 16'b0000000000000000;
        reduced_reg[24] <= 16'b0000000000000000;
        reduced_reg[25] <= 16'b0000000000000000;
        reduced_reg[26] <= 16'b0000000000000000;
        reduced_reg[27] <= 16'b0000000000000000;
        reduced_reg[28] <= 16'b0000000000000000;
        reduced_reg[29] <= 16'b0000000000000000;
        reduced_reg[30] <= 16'b0000000000000000;
        reduced_reg[31] <= 16'b0000000000000000;
        reduced_reg[32] <= 16'b0000000000000000;
        reduced_reg[33] <= 16'b0000000000000000;
        reduced_reg[34] <= 16'b0000000000000000;
        reduced_reg[35] <= 16'b0000000000000000;
        reduced_reg[36] <= 16'b0000000000000000;
        reduced_reg[37] <= 16'b0000000000000000;
        reduced_reg[38] <= 16'b0000000000000000;
        reduced_reg[39] <= 16'b0000000000000000;
        reduced_reg[40] <= 16'b0000000000000000;
        reduced_reg[41] <= 16'b0000000000000000;
        reduced_reg[42] <= 16'b0000000000000000;
        reduced_reg[43] <= 16'b0000000000000000;
        reduced_reg[44] <= 16'b0000000000000000;
        reduced_reg[45] <= 16'b0000000000000000;
        reduced_reg[46] <= 16'b0000000000000000;
        reduced_reg[47] <= 16'b0000000000000000;
        reduced_reg[48] <= 16'b0000000000000000;
        reduced_reg[49] <= 16'b0000000000000000;
        reduced_reg[50] <= 16'b0000000000000000;
        reduced_reg[51] <= 16'b0000000000000000;
        reduced_reg[52] <= 16'b0000000000000000;
        reduced_reg[53] <= 16'b0000000000000000;
        reduced_reg[54] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
          reduced_reg[10] <= reduced_reg_next[10];
          reduced_reg[11] <= reduced_reg_next[11];
          reduced_reg[12] <= reduced_reg_next[12];
          reduced_reg[13] <= reduced_reg_next[13];
          reduced_reg[14] <= reduced_reg_next[14];
          reduced_reg[15] <= reduced_reg_next[15];
          reduced_reg[16] <= reduced_reg_next[16];
          reduced_reg[17] <= reduced_reg_next[17];
          reduced_reg[18] <= reduced_reg_next[18];
          reduced_reg[19] <= reduced_reg_next[19];
          reduced_reg[20] <= reduced_reg_next[20];
          reduced_reg[21] <= reduced_reg_next[21];
          reduced_reg[22] <= reduced_reg_next[22];
          reduced_reg[23] <= reduced_reg_next[23];
          reduced_reg[24] <= reduced_reg_next[24];
          reduced_reg[25] <= reduced_reg_next[25];
          reduced_reg[26] <= reduced_reg_next[26];
          reduced_reg[27] <= reduced_reg_next[27];
          reduced_reg[28] <= reduced_reg_next[28];
          reduced_reg[29] <= reduced_reg_next[29];
          reduced_reg[30] <= reduced_reg_next[30];
          reduced_reg[31] <= reduced_reg_next[31];
          reduced_reg[32] <= reduced_reg_next[32];
          reduced_reg[33] <= reduced_reg_next[33];
          reduced_reg[34] <= reduced_reg_next[34];
          reduced_reg[35] <= reduced_reg_next[35];
          reduced_reg[36] <= reduced_reg_next[36];
          reduced_reg[37] <= reduced_reg_next[37];
          reduced_reg[38] <= reduced_reg_next[38];
          reduced_reg[39] <= reduced_reg_next[39];
          reduced_reg[40] <= reduced_reg_next[40];
          reduced_reg[41] <= reduced_reg_next[41];
          reduced_reg[42] <= reduced_reg_next[42];
          reduced_reg[43] <= reduced_reg_next[43];
          reduced_reg[44] <= reduced_reg_next[44];
          reduced_reg[45] <= reduced_reg_next[45];
          reduced_reg[46] <= reduced_reg_next[46];
          reduced_reg[47] <= reduced_reg_next[47];
          reduced_reg[48] <= reduced_reg_next[48];
          reduced_reg[49] <= reduced_reg_next[49];
          reduced_reg[50] <= reduced_reg_next[50];
          reduced_reg[51] <= reduced_reg_next[51];
          reduced_reg[52] <= reduced_reg_next[52];
          reduced_reg[53] <= reduced_reg_next[53];
          reduced_reg[54] <= reduced_reg_next[54];
        end
      end
    end

  assign Threshold1_2 = reduced_reg[54];
  assign reduced_reg_next[0] = Threshold1_1;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];
  assign reduced_reg_next[10] = reduced_reg[9];
  assign reduced_reg_next[11] = reduced_reg[10];
  assign reduced_reg_next[12] = reduced_reg[11];
  assign reduced_reg_next[13] = reduced_reg[12];
  assign reduced_reg_next[14] = reduced_reg[13];
  assign reduced_reg_next[15] = reduced_reg[14];
  assign reduced_reg_next[16] = reduced_reg[15];
  assign reduced_reg_next[17] = reduced_reg[16];
  assign reduced_reg_next[18] = reduced_reg[17];
  assign reduced_reg_next[19] = reduced_reg[18];
  assign reduced_reg_next[20] = reduced_reg[19];
  assign reduced_reg_next[21] = reduced_reg[20];
  assign reduced_reg_next[22] = reduced_reg[21];
  assign reduced_reg_next[23] = reduced_reg[22];
  assign reduced_reg_next[24] = reduced_reg[23];
  assign reduced_reg_next[25] = reduced_reg[24];
  assign reduced_reg_next[26] = reduced_reg[25];
  assign reduced_reg_next[27] = reduced_reg[26];
  assign reduced_reg_next[28] = reduced_reg[27];
  assign reduced_reg_next[29] = reduced_reg[28];
  assign reduced_reg_next[30] = reduced_reg[29];
  assign reduced_reg_next[31] = reduced_reg[30];
  assign reduced_reg_next[32] = reduced_reg[31];
  assign reduced_reg_next[33] = reduced_reg[32];
  assign reduced_reg_next[34] = reduced_reg[33];
  assign reduced_reg_next[35] = reduced_reg[34];
  assign reduced_reg_next[36] = reduced_reg[35];
  assign reduced_reg_next[37] = reduced_reg[36];
  assign reduced_reg_next[38] = reduced_reg[37];
  assign reduced_reg_next[39] = reduced_reg[38];
  assign reduced_reg_next[40] = reduced_reg[39];
  assign reduced_reg_next[41] = reduced_reg[40];
  assign reduced_reg_next[42] = reduced_reg[41];
  assign reduced_reg_next[43] = reduced_reg[42];
  assign reduced_reg_next[44] = reduced_reg[43];
  assign reduced_reg_next[45] = reduced_reg[44];
  assign reduced_reg_next[46] = reduced_reg[45];
  assign reduced_reg_next[47] = reduced_reg[46];
  assign reduced_reg_next[48] = reduced_reg[47];
  assign reduced_reg_next[49] = reduced_reg[48];
  assign reduced_reg_next[50] = reduced_reg[49];
  assign reduced_reg_next[51] = reduced_reg[50];
  assign reduced_reg_next[52] = reduced_reg[51];
  assign reduced_reg_next[53] = reduced_reg[52];
  assign reduced_reg_next[54] = reduced_reg[53];



  assign Relational_Operator2_1_cast = {{21{Signal_w[15]}}, Signal_w};
  assign Relational_Operator2_1_cast_1 = {19'b0, {Threshold1_2, 2'b00}};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast > Relational_Operator2_1_cast_1;


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Relational_Operator2_relop1;
        end
      end
    end


  assign kconst_2 = 16'sb1000000000000000;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  assign Gain1_cast = {1'b0, Threshold1_1};
  assign Gain1_mul_temp = kconst_3 * Gain1_cast;
  assign Gain1_cast_1 = Gain1_mul_temp[31:0];
  assign Gain1_out1 = {{9{Gain1_cast_1[31]}}, Gain1_cast_1[31:25]};


  always @(posedge clk)
    begin : delayMatch5_process
      if (reset == 1'b1) begin
        delayMatch5_reg[0] <= 16'sb0000000000000000;
        delayMatch5_reg[1] <= 16'sb0000000000000000;
        delayMatch5_reg[2] <= 16'sb0000000000000000;
        delayMatch5_reg[3] <= 16'sb0000000000000000;
        delayMatch5_reg[4] <= 16'sb0000000000000000;
        delayMatch5_reg[5] <= 16'sb0000000000000000;
        delayMatch5_reg[6] <= 16'sb0000000000000000;
        delayMatch5_reg[7] <= 16'sb0000000000000000;
        delayMatch5_reg[8] <= 16'sb0000000000000000;
        delayMatch5_reg[9] <= 16'sb0000000000000000;
        delayMatch5_reg[10] <= 16'sb0000000000000000;
        delayMatch5_reg[11] <= 16'sb0000000000000000;
        delayMatch5_reg[12] <= 16'sb0000000000000000;
        delayMatch5_reg[13] <= 16'sb0000000000000000;
        delayMatch5_reg[14] <= 16'sb0000000000000000;
        delayMatch5_reg[15] <= 16'sb0000000000000000;
        delayMatch5_reg[16] <= 16'sb0000000000000000;
        delayMatch5_reg[17] <= 16'sb0000000000000000;
        delayMatch5_reg[18] <= 16'sb0000000000000000;
        delayMatch5_reg[19] <= 16'sb0000000000000000;
        delayMatch5_reg[20] <= 16'sb0000000000000000;
        delayMatch5_reg[21] <= 16'sb0000000000000000;
        delayMatch5_reg[22] <= 16'sb0000000000000000;
        delayMatch5_reg[23] <= 16'sb0000000000000000;
        delayMatch5_reg[24] <= 16'sb0000000000000000;
        delayMatch5_reg[25] <= 16'sb0000000000000000;
        delayMatch5_reg[26] <= 16'sb0000000000000000;
        delayMatch5_reg[27] <= 16'sb0000000000000000;
        delayMatch5_reg[28] <= 16'sb0000000000000000;
        delayMatch5_reg[29] <= 16'sb0000000000000000;
        delayMatch5_reg[30] <= 16'sb0000000000000000;
        delayMatch5_reg[31] <= 16'sb0000000000000000;
        delayMatch5_reg[32] <= 16'sb0000000000000000;
        delayMatch5_reg[33] <= 16'sb0000000000000000;
        delayMatch5_reg[34] <= 16'sb0000000000000000;
        delayMatch5_reg[35] <= 16'sb0000000000000000;
        delayMatch5_reg[36] <= 16'sb0000000000000000;
        delayMatch5_reg[37] <= 16'sb0000000000000000;
        delayMatch5_reg[38] <= 16'sb0000000000000000;
        delayMatch5_reg[39] <= 16'sb0000000000000000;
        delayMatch5_reg[40] <= 16'sb0000000000000000;
        delayMatch5_reg[41] <= 16'sb0000000000000000;
        delayMatch5_reg[42] <= 16'sb0000000000000000;
        delayMatch5_reg[43] <= 16'sb0000000000000000;
        delayMatch5_reg[44] <= 16'sb0000000000000000;
        delayMatch5_reg[45] <= 16'sb0000000000000000;
        delayMatch5_reg[46] <= 16'sb0000000000000000;
        delayMatch5_reg[47] <= 16'sb0000000000000000;
        delayMatch5_reg[48] <= 16'sb0000000000000000;
        delayMatch5_reg[49] <= 16'sb0000000000000000;
        delayMatch5_reg[50] <= 16'sb0000000000000000;
        delayMatch5_reg[51] <= 16'sb0000000000000000;
        delayMatch5_reg[52] <= 16'sb0000000000000000;
        delayMatch5_reg[53] <= 16'sb0000000000000000;
        delayMatch5_reg[54] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch5_reg[0] <= delayMatch5_reg_next[0];
          delayMatch5_reg[1] <= delayMatch5_reg_next[1];
          delayMatch5_reg[2] <= delayMatch5_reg_next[2];
          delayMatch5_reg[3] <= delayMatch5_reg_next[3];
          delayMatch5_reg[4] <= delayMatch5_reg_next[4];
          delayMatch5_reg[5] <= delayMatch5_reg_next[5];
          delayMatch5_reg[6] <= delayMatch5_reg_next[6];
          delayMatch5_reg[7] <= delayMatch5_reg_next[7];
          delayMatch5_reg[8] <= delayMatch5_reg_next[8];
          delayMatch5_reg[9] <= delayMatch5_reg_next[9];
          delayMatch5_reg[10] <= delayMatch5_reg_next[10];
          delayMatch5_reg[11] <= delayMatch5_reg_next[11];
          delayMatch5_reg[12] <= delayMatch5_reg_next[12];
          delayMatch5_reg[13] <= delayMatch5_reg_next[13];
          delayMatch5_reg[14] <= delayMatch5_reg_next[14];
          delayMatch5_reg[15] <= delayMatch5_reg_next[15];
          delayMatch5_reg[16] <= delayMatch5_reg_next[16];
          delayMatch5_reg[17] <= delayMatch5_reg_next[17];
          delayMatch5_reg[18] <= delayMatch5_reg_next[18];
          delayMatch5_reg[19] <= delayMatch5_reg_next[19];
          delayMatch5_reg[20] <= delayMatch5_reg_next[20];
          delayMatch5_reg[21] <= delayMatch5_reg_next[21];
          delayMatch5_reg[22] <= delayMatch5_reg_next[22];
          delayMatch5_reg[23] <= delayMatch5_reg_next[23];
          delayMatch5_reg[24] <= delayMatch5_reg_next[24];
          delayMatch5_reg[25] <= delayMatch5_reg_next[25];
          delayMatch5_reg[26] <= delayMatch5_reg_next[26];
          delayMatch5_reg[27] <= delayMatch5_reg_next[27];
          delayMatch5_reg[28] <= delayMatch5_reg_next[28];
          delayMatch5_reg[29] <= delayMatch5_reg_next[29];
          delayMatch5_reg[30] <= delayMatch5_reg_next[30];
          delayMatch5_reg[31] <= delayMatch5_reg_next[31];
          delayMatch5_reg[32] <= delayMatch5_reg_next[32];
          delayMatch5_reg[33] <= delayMatch5_reg_next[33];
          delayMatch5_reg[34] <= delayMatch5_reg_next[34];
          delayMatch5_reg[35] <= delayMatch5_reg_next[35];
          delayMatch5_reg[36] <= delayMatch5_reg_next[36];
          delayMatch5_reg[37] <= delayMatch5_reg_next[37];
          delayMatch5_reg[38] <= delayMatch5_reg_next[38];
          delayMatch5_reg[39] <= delayMatch5_reg_next[39];
          delayMatch5_reg[40] <= delayMatch5_reg_next[40];
          delayMatch5_reg[41] <= delayMatch5_reg_next[41];
          delayMatch5_reg[42] <= delayMatch5_reg_next[42];
          delayMatch5_reg[43] <= delayMatch5_reg_next[43];
          delayMatch5_reg[44] <= delayMatch5_reg_next[44];
          delayMatch5_reg[45] <= delayMatch5_reg_next[45];
          delayMatch5_reg[46] <= delayMatch5_reg_next[46];
          delayMatch5_reg[47] <= delayMatch5_reg_next[47];
          delayMatch5_reg[48] <= delayMatch5_reg_next[48];
          delayMatch5_reg[49] <= delayMatch5_reg_next[49];
          delayMatch5_reg[50] <= delayMatch5_reg_next[50];
          delayMatch5_reg[51] <= delayMatch5_reg_next[51];
          delayMatch5_reg[52] <= delayMatch5_reg_next[52];
          delayMatch5_reg[53] <= delayMatch5_reg_next[53];
          delayMatch5_reg[54] <= delayMatch5_reg_next[54];
        end
      end
    end

  assign Gain1_out1_1 = delayMatch5_reg[54];
  assign delayMatch5_reg_next[0] = Gain1_out1;
  assign delayMatch5_reg_next[1] = delayMatch5_reg[0];
  assign delayMatch5_reg_next[2] = delayMatch5_reg[1];
  assign delayMatch5_reg_next[3] = delayMatch5_reg[2];
  assign delayMatch5_reg_next[4] = delayMatch5_reg[3];
  assign delayMatch5_reg_next[5] = delayMatch5_reg[4];
  assign delayMatch5_reg_next[6] = delayMatch5_reg[5];
  assign delayMatch5_reg_next[7] = delayMatch5_reg[6];
  assign delayMatch5_reg_next[8] = delayMatch5_reg[7];
  assign delayMatch5_reg_next[9] = delayMatch5_reg[8];
  assign delayMatch5_reg_next[10] = delayMatch5_reg[9];
  assign delayMatch5_reg_next[11] = delayMatch5_reg[10];
  assign delayMatch5_reg_next[12] = delayMatch5_reg[11];
  assign delayMatch5_reg_next[13] = delayMatch5_reg[12];
  assign delayMatch5_reg_next[14] = delayMatch5_reg[13];
  assign delayMatch5_reg_next[15] = delayMatch5_reg[14];
  assign delayMatch5_reg_next[16] = delayMatch5_reg[15];
  assign delayMatch5_reg_next[17] = delayMatch5_reg[16];
  assign delayMatch5_reg_next[18] = delayMatch5_reg[17];
  assign delayMatch5_reg_next[19] = delayMatch5_reg[18];
  assign delayMatch5_reg_next[20] = delayMatch5_reg[19];
  assign delayMatch5_reg_next[21] = delayMatch5_reg[20];
  assign delayMatch5_reg_next[22] = delayMatch5_reg[21];
  assign delayMatch5_reg_next[23] = delayMatch5_reg[22];
  assign delayMatch5_reg_next[24] = delayMatch5_reg[23];
  assign delayMatch5_reg_next[25] = delayMatch5_reg[24];
  assign delayMatch5_reg_next[26] = delayMatch5_reg[25];
  assign delayMatch5_reg_next[27] = delayMatch5_reg[26];
  assign delayMatch5_reg_next[28] = delayMatch5_reg[27];
  assign delayMatch5_reg_next[29] = delayMatch5_reg[28];
  assign delayMatch5_reg_next[30] = delayMatch5_reg[29];
  assign delayMatch5_reg_next[31] = delayMatch5_reg[30];
  assign delayMatch5_reg_next[32] = delayMatch5_reg[31];
  assign delayMatch5_reg_next[33] = delayMatch5_reg[32];
  assign delayMatch5_reg_next[34] = delayMatch5_reg[33];
  assign delayMatch5_reg_next[35] = delayMatch5_reg[34];
  assign delayMatch5_reg_next[36] = delayMatch5_reg[35];
  assign delayMatch5_reg_next[37] = delayMatch5_reg[36];
  assign delayMatch5_reg_next[38] = delayMatch5_reg[37];
  assign delayMatch5_reg_next[39] = delayMatch5_reg[38];
  assign delayMatch5_reg_next[40] = delayMatch5_reg[39];
  assign delayMatch5_reg_next[41] = delayMatch5_reg[40];
  assign delayMatch5_reg_next[42] = delayMatch5_reg[41];
  assign delayMatch5_reg_next[43] = delayMatch5_reg[42];
  assign delayMatch5_reg_next[44] = delayMatch5_reg[43];
  assign delayMatch5_reg_next[45] = delayMatch5_reg[44];
  assign delayMatch5_reg_next[46] = delayMatch5_reg[45];
  assign delayMatch5_reg_next[47] = delayMatch5_reg[46];
  assign delayMatch5_reg_next[48] = delayMatch5_reg[47];
  assign delayMatch5_reg_next[49] = delayMatch5_reg[48];
  assign delayMatch5_reg_next[50] = delayMatch5_reg[49];
  assign delayMatch5_reg_next[51] = delayMatch5_reg[50];
  assign delayMatch5_reg_next[52] = delayMatch5_reg[51];
  assign delayMatch5_reg_next[53] = delayMatch5_reg[52];
  assign delayMatch5_reg_next[54] = delayMatch5_reg[53];



  assign Relational_Operator3_1_cast = {{12{Signal_w[15]}}, Signal_w};
  assign Relational_Operator3_1_cast_1 = {Gain1_out1_1, 12'b000000000000};
  assign Relational_Operator3_relop1 = Relational_Operator3_1_cast < Relational_Operator3_1_cast_1;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator3_relop1;
        end
      end
    end


  assign Relational_Operator4_relop1 = Delay2_out1 > Delay3_out1;


  assign switch_compare_1 = Relational_Operator4_relop1 == 1'b1;



  assign Add1_add_cast = {{3{Signal_w[15]}}, Signal_w[15:3]};
  assign Add1_add_cast_1 = {1'b0, Threshold1_2[15:1]};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;


  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add1_out1;
        end
      end
    end


  assign Subtract1_sub_cast = {{3{Signal_w[15]}}, Signal_w[15:3]};
  assign Subtract1_sub_cast_1 = {1'b0, Threshold1_2[15:1]};
  assign Subtract1_out1 = Subtract1_sub_cast - Subtract1_sub_cast_1;


  assign Abs_cast = {Signal_w[15], Signal_w};
  assign Abs_y = (Signal_w < 16'sb0000000000000000 ?  - (Abs_cast) :
              {Signal_w[15], Signal_w});
  assign Abs_out1 = {Abs_y[14:0], 1'b0};


  assign Relational_Operator1_1_cast = {21'b0, Abs_out1};
  assign Relational_Operator1_1_cast_1 = {18'b0, {Threshold1_2, 3'b000}};
  assign Relational_Operator1_relop1 = Relational_Operator1_1_cast == Relational_Operator1_1_cast_1;


  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Relational_Operator1_relop1;
        end
      end
    end


  assign Relational_Operator5_1_cast = {{21{Signal_w[15]}}, Signal_w};
  assign Relational_Operator5_1_cast_1 = {19'b0, {Threshold1_2, 2'b00}};
  assign Relational_Operator5_relop1 = Relational_Operator5_1_cast < Relational_Operator5_1_cast_1;


  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Relational_Operator5_relop1;
        end
      end
    end


  assign Relational_Operator6_relop1 = Delay5_out1 > Delay6_out1;


  assign switch_compare_1_1 = Relational_Operator6_relop1 == 1'b1;



  assign Constant_out1 = 16'sb0000000000000000;


  assign Relational_Operator7_1_cast = {{21{Signal_w[15]}}, Signal_w};
  assign Relational_Operator7_1_cast_1 = {19'b0, {Threshold1_2, 2'b00}};
  assign Relational_Operator7_relop1 = Relational_Operator7_1_cast == Relational_Operator7_1_cast_1;


  assign switch_compare_1_2 = Relational_Operator7_relop1 == 1'b1;



  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Subtract1_out1;
        end
      end
    end


  assign Threshold_Switch_out1 = (switch_compare_1 == 1'b0 ? Delay4_out1 :
              Delay1_out1);


  assign Threshold_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant_out1 :
              Constant_out1);


  assign Threshold_Switch1_out1_dtc = 16'sb0000000000000000;



  assign Threshold_Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Threshold_Switch_out1 :
              Threshold_Switch1_out1_dtc);


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Threshold_Switch2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold_Switch2_out1_1 <= Threshold_Switch2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Threshold_Switch2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign New_Threshold = Gain_out1_1;

endmodule  // Soft_Thresholding3

