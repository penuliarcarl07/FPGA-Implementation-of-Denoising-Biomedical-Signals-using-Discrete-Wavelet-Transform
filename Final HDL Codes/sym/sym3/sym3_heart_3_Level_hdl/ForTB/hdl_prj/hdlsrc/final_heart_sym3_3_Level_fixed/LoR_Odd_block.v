// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\final_heart_sym3_3_Level_fixed\LoR_Odd_block.v
// Created: 2024-04-18 15:47:41
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: LoR_Odd_block
// Source Path: final_heart_sym3_3_Level_fixed/DWT_sym3_3_Level/1st_Level_Recon1/LoR_Odd
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module LoR_Odd_block
          (clk,
           reset,
           enb,
           In_LoR_o,
           Out_LoR_o);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_LoR_o;  // sfix16_En24
  output  signed [15:0] Out_LoR_o;  // sfix16_En24


  wire [15:0] LoR_1_out1;  // ufix16_En16
  reg [15:0] LoR_1_out1_1;  // ufix16_En16
  reg signed [15:0] In_LoR_o_1;  // sfix16_En24
  wire signed [16:0] Multiply_cast;  // sfix17_En16
  wire signed [32:0] Multiply_mul_temp;  // sfix33_En40
  wire signed [31:0] Multiply_cast_1;  // sfix32_En40
  wire signed [15:0] Multiply_out1;  // sfix16_En24
  reg signed [15:0] Multiply_out1_1;  // sfix16_En24
  wire signed [15:0] LoR_3_out1;  // sfix16_En17
  reg signed [15:0] LoR_3_out1_1;  // sfix16_En17
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En24
  wire signed [31:0] Multiply1_mul_temp;  // sfix32_En41
  wire signed [15:0] Multiply1_out1;  // sfix16_En26
  reg signed [15:0] Multiply1_out1_1;  // sfix16_En26
  wire [15:0] LoR_5_out1;  // ufix16_En20
  reg [15:0] LoR_5_out1_1;  // ufix16_En20
  reg signed [15:0] Rate_Transition1_out1;  // sfix16_En24
  wire signed [16:0] Multiply2_cast;  // sfix17_En20
  wire signed [32:0] Multiply2_mul_temp;  // sfix33_En44
  wire signed [31:0] Multiply2_cast_1;  // sfix32_En44
  wire signed [15:0] Multiply2_out1;  // sfix16_En28
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En28 [2]
  wire signed [15:0] Multiply2_out1_1;  // sfix16_En28
  wire signed [15:0] Add1_add_cast;  // sfix16_En26
  wire signed [15:0] Add1_add_temp;  // sfix16_En26
  wire signed [15:0] Add1_out1;  // sfix16_En27
  reg signed [15:0] Delay3_out1;  // sfix16_En27
  wire signed [15:0] Add_add_cast;  // sfix16_En24
  wire signed [15:0] Add_out1;  // sfix16_En24


@[tracestart]
  // '<S31>/LoR_1'
  assign LoR_1_out1 = 16'b1100111010010000;


@[traceend]
  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        LoR_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoR_1_out1_1 <= LoR_1_out1;
        end
      end
    end



@[tracestart]
  // '<S31>/Delay'
  // 
  // '<S31>/Rate Transition'
  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoR_o_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoR_o_1 <= In_LoR_o;
        end
      end
    end


@[traceend]
@[tracestart]
  // '<S31>/Multiply'
  assign Multiply_cast = {1'b0, LoR_1_out1_1};
  assign Multiply_mul_temp = Multiply_cast * In_LoR_o_1;
  assign Multiply_cast_1 = Multiply_mul_temp[31:0];
  assign Multiply_out1 = Multiply_cast_1[31:16];


@[traceend]
  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



@[tracestart]
  // '<S31>/LoR_3'
  assign LoR_3_out1 = 16'sb1011101011100000;


@[traceend]
  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        LoR_3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          LoR_3_out1_1 <= LoR_3_out1;
        end
      end
    end



@[tracestart]
  // '<S31>/Delay1'
  // 
  // '<S31>/Rate Transition1'
  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoR_o_1;
        end
      end
    end


@[traceend]
@[tracestart]
  // '<S31>/Multiply1'
  assign Multiply1_mul_temp = LoR_3_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[30:15];


@[traceend]
  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Multiply1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply1_out1_1 <= Multiply1_out1;
        end
      end
    end



@[tracestart]
  // '<S31>/LoR_5'
  assign LoR_5_out1 = 16'b1001000001001001;


@[traceend]
  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        LoR_5_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoR_5_out1_1 <= LoR_5_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister5_process
      if (reset == 1'b1) begin
        Rate_Transition1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition1_out1 <= Rate_Transition_out1;
        end
      end
    end



@[tracestart]
  // '<S31>/Multiply2'
  // 
  // '<S31>/Delay2'
  assign Multiply2_cast = {1'b0, LoR_5_out1_1};
  assign Multiply2_mul_temp = Multiply2_cast * Rate_Transition1_out1;
  assign Multiply2_cast_1 = Multiply2_mul_temp[31:0];
  assign Multiply2_out1 = Multiply2_cast_1[31:16];


@[traceend]
  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply2_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply2_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



@[tracestart]
  // '<S31>/Add1'
  assign Add1_add_cast = {{2{Multiply2_out1_1[15]}}, Multiply2_out1_1[15:2]};
  assign Add1_add_temp = Multiply1_out1_1 + Add1_add_cast;
  assign Add1_out1 = {Add1_add_temp[14:0], 1'b0};


@[traceend]
@[tracestart]
  // '<S31>/Delay3'
  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add1_out1;
        end
      end
    end


@[traceend]
@[tracestart]
  // '<S31>/Add'
  assign Add_add_cast = {{3{Delay3_out1[15]}}, Delay3_out1[15:3]};
  assign Add_out1 = Multiply_out1_1 + Add_add_cast;


@[traceend]
  assign Out_LoR_o = Add_out1;

endmodule  // LoR_Odd_block

