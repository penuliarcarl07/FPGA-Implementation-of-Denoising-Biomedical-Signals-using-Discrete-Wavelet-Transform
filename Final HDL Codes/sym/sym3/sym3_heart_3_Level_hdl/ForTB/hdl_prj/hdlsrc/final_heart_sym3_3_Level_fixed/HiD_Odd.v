// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\final_heart_sym3_3_Level_fixed\HiD_Odd.v
// Created: 2024-04-18 15:47:41
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HiD_Odd
// Source Path: final_heart_sym3_3_Level_fixed/DWT_sym3_3_Level/1st_Level_Decomp/HiD_Odd
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HiD_Odd
          (clk,
           reset,
           enb,
           In_HiD_o,
           Out_HiD_o);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_HiD_o;  // ufix16_En24
  output  signed [15:0] Out_HiD_o;  // sfix16_En23


  wire [15:0] HiD_1_out1;  // ufix16_En16
  reg [15:0] HiD_1_out1_1;  // ufix16_En16
  reg [15:0] In_HiD_o_1;  // ufix16_En24
  wire [31:0] Multiply5_mul_temp;  // ufix32_En40
  wire [15:0] Multiply5_out1;  // ufix16_En24
  reg [15:0] Multiply5_out1_1;  // ufix16_En24
  wire signed [15:0] HiD_3_out1;  // sfix16_En17
  reg signed [15:0] HiD_3_out1_1;  // sfix16_En17
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire signed [16:0] Multiply3_cast;  // sfix17_En24
  wire signed [32:0] Multiply3_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply3_cast_1;  // sfix32_En41
  wire signed [15:0] Multiply3_out1;  // sfix16_En15
  reg signed [15:0] Multiply3_out1_1;  // sfix16_En15
  wire [15:0] HiD_5_out1;  // ufix16_En20
  reg [15:0] HiD_5_out1_1;  // ufix16_En20
  reg [15:0] Rate_Transition1_out1;  // ufix16_En24
  wire [31:0] Multiply4_mul_temp;  // ufix32_En44
  wire [15:0] Multiply4_out1;  // ufix16_En29
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En29 [2]
  wire [15:0] Multiply4_out1_1;  // ufix16_En29
  wire signed [15:0] Add3_add_cast;  // sfix16_En26
  wire signed [15:0] Add3_add_cast_1;  // sfix16_En26
  wire signed [15:0] Add3_out1;  // sfix16_En26
  reg signed [15:0] Delay7_out1;  // sfix16_En26
  wire signed [15:0] Add2_add_cast;  // sfix16_En23
  wire signed [15:0] Add2_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add2_out1;  // sfix16_En23


@[tracestart]
  // '<S13>/HiD_1'
  assign HiD_1_out1 = 16'b1100111010010000;


@[traceend]
  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        HiD_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_1_out1_1 <= HiD_1_out1;
        end
      end
    end



@[tracestart]
  // '<S13>/Delay4'
  // 
  // '<S13>/Rate Transition'
  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiD_o_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiD_o_1 <= In_HiD_o;
        end
      end
    end


@[traceend]
@[tracestart]
  // '<S13>/Multiply5'
  assign Multiply5_mul_temp = HiD_1_out1_1 * In_HiD_o_1;
  assign Multiply5_out1 = Multiply5_mul_temp[31:16];


@[traceend]
  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Multiply5_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply5_out1_1 <= Multiply5_out1;
        end
      end
    end



@[tracestart]
  // '<S13>/HiD_3'
  assign HiD_3_out1 = 16'sb1011101011100000;


@[traceend]
  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiD_3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_3_out1_1 <= HiD_3_out1;
        end
      end
    end



@[tracestart]
  // '<S13>/Delay5'
  // 
  // '<S13>/Rate Transition1'
  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiD_o_1;
        end
      end
    end


@[traceend]
@[tracestart]
  // '<S13>/Multiply3'
  assign Multiply3_cast = {1'b0, Rate_Transition_out1};
  assign Multiply3_mul_temp = HiD_3_out1_1 * Multiply3_cast;
  assign Multiply3_cast_1 = Multiply3_mul_temp[31:0];
  assign Multiply3_out1 = {{10{Multiply3_cast_1[31]}}, Multiply3_cast_1[31:26]};


@[traceend]
  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply3_out1_1 <= Multiply3_out1;
        end
      end
    end



@[tracestart]
  // '<S13>/HiD_5'
  assign HiD_5_out1 = 16'b1001000001001001;


@[traceend]
  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiD_5_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_5_out1_1 <= HiD_5_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition1_out1 <= Rate_Transition_out1;
        end
      end
    end



@[tracestart]
  // '<S13>/Multiply4'
  // 
  // '<S13>/Delay6'
  assign Multiply4_mul_temp = HiD_5_out1_1 * Rate_Transition1_out1;
  assign Multiply4_out1 = Multiply4_mul_temp[30:15];


@[traceend]
  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply4_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply4_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



@[tracestart]
  // '<S13>/Add3'
  assign Add3_add_cast = {Multiply3_out1_1[4:0], 11'b00000000000};
  assign Add3_add_cast_1 = {3'b0, Multiply4_out1_1[15:3]};
  assign Add3_out1 = Add3_add_cast + Add3_add_cast_1;


@[traceend]
@[tracestart]
  // '<S13>/Delay7'
  always @(posedge clk)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Add3_out1;
        end
      end
    end


@[traceend]
@[tracestart]
  // '<S13>/Add2'
  assign Add2_add_cast = {1'b0, Multiply5_out1_1[15:1]};
  assign Add2_add_cast_1 = {{3{Delay7_out1[15]}}, Delay7_out1[15:3]};
  assign Add2_out1 = Add2_add_cast + Add2_add_cast_1;


@[traceend]
  assign Out_HiD_o = Add2_out1;

endmodule  // HiD_Odd

