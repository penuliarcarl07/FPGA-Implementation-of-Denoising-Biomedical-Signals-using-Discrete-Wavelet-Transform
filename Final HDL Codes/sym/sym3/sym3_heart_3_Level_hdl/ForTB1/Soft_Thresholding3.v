// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\final_heart_sym3_3_Level_fixed\Soft_Thresholding3.v
// Created: 2024-04-18 17:46:00
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Soft_Thresholding3
// Source Path: final_heart_sym3_3_Level_fixed/DWT_sym3_3_Level/Soft_Thresholding3
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Soft_Thresholding3
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold1,
           New_Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En25
  input   [15:0] Threshold1;  // ufix16_En26
  output  signed [15:0] New_Threshold;  // sfix16_En28


  wire [15:0] kconst;  // ufix16_En19
  reg [15:0] kconst_1;  // ufix16_En19
  reg signed [15:0] reduced_reg [0:63];  // sfix16 [64]
  wire signed [15:0] reduced_reg_next [0:63];  // sfix16_En25 [64]
  wire signed [15:0] Signal_w_1;  // sfix16_En25
  wire signed [34:0] Relational_Operator7_1_cast;  // sfix35_En26
  wire signed [34:0] Relational_Operator7_1_cast_1;  // sfix35_En26
  wire Relational_Operator7_relop1;
  wire signed [34:0] Relational_Operator2_1_cast;  // sfix35_En26
  wire signed [34:0] Relational_Operator2_1_cast_1;  // sfix35_En26
  wire Relational_Operator2_relop1;
  reg  [0:2] delayMatch6_reg;  // ufix1 [3]
  wire [0:2] delayMatch6_reg_next;  // ufix1 [3]
  wire Delay2_out1;
  reg signed [15:0] reduced_reg_1 [0:1];  // sfix16 [2]
  wire signed [15:0] reduced_reg_next_1 [0:1];  // sfix16_En25 [2]
  wire signed [15:0] Signal_w_2;  // sfix16_En25
  wire signed [15:0] kconst_2;  // sfix16_En15
  reg signed [15:0] kconst_3;  // sfix16_En15
  reg [15:0] Threshold1_1;  // ufix16_En26
  wire signed [16:0] Gain1_cast;  // sfix17_En26
  wire signed [32:0] Gain1_mul_temp;  // sfix33_En41
  wire signed [31:0] Gain1_cast_1;  // sfix32_En41
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  reg signed [15:0] Gain1_out1_1;  // sfix16_En15
  wire signed [25:0] Relational_Operator3_1_cast;  // sfix26_En25
  wire signed [25:0] Relational_Operator3_1_cast_1;  // sfix26_En25
  wire Relational_Operator3_relop1;
  reg  Delay3_out1;
  wire Relational_Operator4_relop1;
  wire switch_compare_1;
  wire signed [15:0] Add1_add_cast;  // sfix16_En25
  wire signed [15:0] Add1_out1;  // sfix16_En25
  reg signed [15:0] delayMatch9_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch9_reg_next [0:2];  // sfix16_En25 [3]
  wire signed [15:0] Delay4_out1;  // sfix16_En25
  wire signed [15:0] Subtract1_sub_cast;  // sfix16_En25
  wire signed [15:0] Subtract1_out1;  // sfix16_En25
  wire signed [16:0] Abs_y;  // sfix17_En25
  wire signed [16:0] Abs_cast;  // sfix17_En25
  wire [15:0] Abs_out1;  // ufix16_En26
  reg [15:0] delayMatch_reg [0:63];  // ufix16 [64]
  wire [15:0] delayMatch_reg_next [0:63];  // ufix16_En26 [64]
  wire [15:0] Abs_out1_1;  // ufix16_En26
  wire Relational_Operator1_relop1;
  reg  Delay5_out1;
  wire signed [34:0] Relational_Operator5_1_cast;  // sfix35_En26
  wire signed [34:0] Relational_Operator5_1_cast_1;  // sfix35_En26
  wire Relational_Operator5_relop1;
  reg  Delay6_out1;
  wire Relational_Operator6_relop1;
  wire switch_compare_1_1;
  wire signed [15:0] Constant_out1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1;  // sfix16_En4
  reg  [0:1] delayMatch11_reg;  // ufix1 [2]
  wire [0:1] delayMatch11_reg_next;  // ufix1 [2]
  wire Relational_Operator7_out1;
  wire switch_compare_1_2;
  reg signed [15:0] delayMatch8_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch8_reg_next [0:2];  // sfix16_En25 [3]
  wire signed [15:0] Delay1_out1;  // sfix16_En25
  wire signed [15:0] Threshold_Switch_out1;  // sfix16_En25
  reg signed [15:0] delayMatch10_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch10_reg_next [0:1];  // sfix16_En4 [2]
  wire signed [15:0] Threshold_Switch1_out1_1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1_dtc;  // sfix16_En25
  wire signed [15:0] Threshold_Switch2_out1;  // sfix16_En25
  reg signed [15:0] Threshold_Switch2_out1_1;  // sfix16_En25
  wire signed [16:0] Gain_cast;  // sfix17_En19
  wire signed [32:0] Gain_mul_temp;  // sfix33_En44
  wire signed [31:0] Gain_cast_1;  // sfix32_En44
  wire signed [15:0] Gain_out1;  // sfix16_En28
  reg signed [15:0] Gain_out1_1;  // sfix16_En28


  assign kconst = 16'b1100111101101100;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'sb0000000000000000;
        reduced_reg[1] <= 16'sb0000000000000000;
        reduced_reg[2] <= 16'sb0000000000000000;
        reduced_reg[3] <= 16'sb0000000000000000;
        reduced_reg[4] <= 16'sb0000000000000000;
        reduced_reg[5] <= 16'sb0000000000000000;
        reduced_reg[6] <= 16'sb0000000000000000;
        reduced_reg[7] <= 16'sb0000000000000000;
        reduced_reg[8] <= 16'sb0000000000000000;
        reduced_reg[9] <= 16'sb0000000000000000;
        reduced_reg[10] <= 16'sb0000000000000000;
        reduced_reg[11] <= 16'sb0000000000000000;
        reduced_reg[12] <= 16'sb0000000000000000;
        reduced_reg[13] <= 16'sb0000000000000000;
        reduced_reg[14] <= 16'sb0000000000000000;
        reduced_reg[15] <= 16'sb0000000000000000;
        reduced_reg[16] <= 16'sb0000000000000000;
        reduced_reg[17] <= 16'sb0000000000000000;
        reduced_reg[18] <= 16'sb0000000000000000;
        reduced_reg[19] <= 16'sb0000000000000000;
        reduced_reg[20] <= 16'sb0000000000000000;
        reduced_reg[21] <= 16'sb0000000000000000;
        reduced_reg[22] <= 16'sb0000000000000000;
        reduced_reg[23] <= 16'sb0000000000000000;
        reduced_reg[24] <= 16'sb0000000000000000;
        reduced_reg[25] <= 16'sb0000000000000000;
        reduced_reg[26] <= 16'sb0000000000000000;
        reduced_reg[27] <= 16'sb0000000000000000;
        reduced_reg[28] <= 16'sb0000000000000000;
        reduced_reg[29] <= 16'sb0000000000000000;
        reduced_reg[30] <= 16'sb0000000000000000;
        reduced_reg[31] <= 16'sb0000000000000000;
        reduced_reg[32] <= 16'sb0000000000000000;
        reduced_reg[33] <= 16'sb0000000000000000;
        reduced_reg[34] <= 16'sb0000000000000000;
        reduced_reg[35] <= 16'sb0000000000000000;
        reduced_reg[36] <= 16'sb0000000000000000;
        reduced_reg[37] <= 16'sb0000000000000000;
        reduced_reg[38] <= 16'sb0000000000000000;
        reduced_reg[39] <= 16'sb0000000000000000;
        reduced_reg[40] <= 16'sb0000000000000000;
        reduced_reg[41] <= 16'sb0000000000000000;
        reduced_reg[42] <= 16'sb0000000000000000;
        reduced_reg[43] <= 16'sb0000000000000000;
        reduced_reg[44] <= 16'sb0000000000000000;
        reduced_reg[45] <= 16'sb0000000000000000;
        reduced_reg[46] <= 16'sb0000000000000000;
        reduced_reg[47] <= 16'sb0000000000000000;
        reduced_reg[48] <= 16'sb0000000000000000;
        reduced_reg[49] <= 16'sb0000000000000000;
        reduced_reg[50] <= 16'sb0000000000000000;
        reduced_reg[51] <= 16'sb0000000000000000;
        reduced_reg[52] <= 16'sb0000000000000000;
        reduced_reg[53] <= 16'sb0000000000000000;
        reduced_reg[54] <= 16'sb0000000000000000;
        reduced_reg[55] <= 16'sb0000000000000000;
        reduced_reg[56] <= 16'sb0000000000000000;
        reduced_reg[57] <= 16'sb0000000000000000;
        reduced_reg[58] <= 16'sb0000000000000000;
        reduced_reg[59] <= 16'sb0000000000000000;
        reduced_reg[60] <= 16'sb0000000000000000;
        reduced_reg[61] <= 16'sb0000000000000000;
        reduced_reg[62] <= 16'sb0000000000000000;
        reduced_reg[63] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
          reduced_reg[10] <= reduced_reg_next[10];
          reduced_reg[11] <= reduced_reg_next[11];
          reduced_reg[12] <= reduced_reg_next[12];
          reduced_reg[13] <= reduced_reg_next[13];
          reduced_reg[14] <= reduced_reg_next[14];
          reduced_reg[15] <= reduced_reg_next[15];
          reduced_reg[16] <= reduced_reg_next[16];
          reduced_reg[17] <= reduced_reg_next[17];
          reduced_reg[18] <= reduced_reg_next[18];
          reduced_reg[19] <= reduced_reg_next[19];
          reduced_reg[20] <= reduced_reg_next[20];
          reduced_reg[21] <= reduced_reg_next[21];
          reduced_reg[22] <= reduced_reg_next[22];
          reduced_reg[23] <= reduced_reg_next[23];
          reduced_reg[24] <= reduced_reg_next[24];
          reduced_reg[25] <= reduced_reg_next[25];
          reduced_reg[26] <= reduced_reg_next[26];
          reduced_reg[27] <= reduced_reg_next[27];
          reduced_reg[28] <= reduced_reg_next[28];
          reduced_reg[29] <= reduced_reg_next[29];
          reduced_reg[30] <= reduced_reg_next[30];
          reduced_reg[31] <= reduced_reg_next[31];
          reduced_reg[32] <= reduced_reg_next[32];
          reduced_reg[33] <= reduced_reg_next[33];
          reduced_reg[34] <= reduced_reg_next[34];
          reduced_reg[35] <= reduced_reg_next[35];
          reduced_reg[36] <= reduced_reg_next[36];
          reduced_reg[37] <= reduced_reg_next[37];
          reduced_reg[38] <= reduced_reg_next[38];
          reduced_reg[39] <= reduced_reg_next[39];
          reduced_reg[40] <= reduced_reg_next[40];
          reduced_reg[41] <= reduced_reg_next[41];
          reduced_reg[42] <= reduced_reg_next[42];
          reduced_reg[43] <= reduced_reg_next[43];
          reduced_reg[44] <= reduced_reg_next[44];
          reduced_reg[45] <= reduced_reg_next[45];
          reduced_reg[46] <= reduced_reg_next[46];
          reduced_reg[47] <= reduced_reg_next[47];
          reduced_reg[48] <= reduced_reg_next[48];
          reduced_reg[49] <= reduced_reg_next[49];
          reduced_reg[50] <= reduced_reg_next[50];
          reduced_reg[51] <= reduced_reg_next[51];
          reduced_reg[52] <= reduced_reg_next[52];
          reduced_reg[53] <= reduced_reg_next[53];
          reduced_reg[54] <= reduced_reg_next[54];
          reduced_reg[55] <= reduced_reg_next[55];
          reduced_reg[56] <= reduced_reg_next[56];
          reduced_reg[57] <= reduced_reg_next[57];
          reduced_reg[58] <= reduced_reg_next[58];
          reduced_reg[59] <= reduced_reg_next[59];
          reduced_reg[60] <= reduced_reg_next[60];
          reduced_reg[61] <= reduced_reg_next[61];
          reduced_reg[62] <= reduced_reg_next[62];
          reduced_reg[63] <= reduced_reg_next[63];
        end
      end
    end

  assign Signal_w_1 = reduced_reg[63];
  assign reduced_reg_next[0] = Signal_w;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];
  assign reduced_reg_next[10] = reduced_reg[9];
  assign reduced_reg_next[11] = reduced_reg[10];
  assign reduced_reg_next[12] = reduced_reg[11];
  assign reduced_reg_next[13] = reduced_reg[12];
  assign reduced_reg_next[14] = reduced_reg[13];
  assign reduced_reg_next[15] = reduced_reg[14];
  assign reduced_reg_next[16] = reduced_reg[15];
  assign reduced_reg_next[17] = reduced_reg[16];
  assign reduced_reg_next[18] = reduced_reg[17];
  assign reduced_reg_next[19] = reduced_reg[18];
  assign reduced_reg_next[20] = reduced_reg[19];
  assign reduced_reg_next[21] = reduced_reg[20];
  assign reduced_reg_next[22] = reduced_reg[21];
  assign reduced_reg_next[23] = reduced_reg[22];
  assign reduced_reg_next[24] = reduced_reg[23];
  assign reduced_reg_next[25] = reduced_reg[24];
  assign reduced_reg_next[26] = reduced_reg[25];
  assign reduced_reg_next[27] = reduced_reg[26];
  assign reduced_reg_next[28] = reduced_reg[27];
  assign reduced_reg_next[29] = reduced_reg[28];
  assign reduced_reg_next[30] = reduced_reg[29];
  assign reduced_reg_next[31] = reduced_reg[30];
  assign reduced_reg_next[32] = reduced_reg[31];
  assign reduced_reg_next[33] = reduced_reg[32];
  assign reduced_reg_next[34] = reduced_reg[33];
  assign reduced_reg_next[35] = reduced_reg[34];
  assign reduced_reg_next[36] = reduced_reg[35];
  assign reduced_reg_next[37] = reduced_reg[36];
  assign reduced_reg_next[38] = reduced_reg[37];
  assign reduced_reg_next[39] = reduced_reg[38];
  assign reduced_reg_next[40] = reduced_reg[39];
  assign reduced_reg_next[41] = reduced_reg[40];
  assign reduced_reg_next[42] = reduced_reg[41];
  assign reduced_reg_next[43] = reduced_reg[42];
  assign reduced_reg_next[44] = reduced_reg[43];
  assign reduced_reg_next[45] = reduced_reg[44];
  assign reduced_reg_next[46] = reduced_reg[45];
  assign reduced_reg_next[47] = reduced_reg[46];
  assign reduced_reg_next[48] = reduced_reg[47];
  assign reduced_reg_next[49] = reduced_reg[48];
  assign reduced_reg_next[50] = reduced_reg[49];
  assign reduced_reg_next[51] = reduced_reg[50];
  assign reduced_reg_next[52] = reduced_reg[51];
  assign reduced_reg_next[53] = reduced_reg[52];
  assign reduced_reg_next[54] = reduced_reg[53];
  assign reduced_reg_next[55] = reduced_reg[54];
  assign reduced_reg_next[56] = reduced_reg[55];
  assign reduced_reg_next[57] = reduced_reg[56];
  assign reduced_reg_next[58] = reduced_reg[57];
  assign reduced_reg_next[59] = reduced_reg[58];
  assign reduced_reg_next[60] = reduced_reg[59];
  assign reduced_reg_next[61] = reduced_reg[60];
  assign reduced_reg_next[62] = reduced_reg[61];
  assign reduced_reg_next[63] = reduced_reg[62];



  assign Relational_Operator7_1_cast = {{18{Signal_w_1[15]}}, {Signal_w_1, 1'b0}};
  assign Relational_Operator7_1_cast_1 = {19'b0, Threshold1};
  assign Relational_Operator7_relop1 = Relational_Operator7_1_cast == Relational_Operator7_1_cast_1;


  assign Relational_Operator2_1_cast = {{18{Signal_w_1[15]}}, {Signal_w_1, 1'b0}};
  assign Relational_Operator2_1_cast_1 = {19'b0, Threshold1};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast > Relational_Operator2_1_cast_1;


  always @(posedge clk)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        delayMatch6_reg[0] <= 1'b0;
        delayMatch6_reg[1] <= 1'b0;
        delayMatch6_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
          delayMatch6_reg[2] <= delayMatch6_reg_next[2];
        end
      end
    end

  assign Delay2_out1 = delayMatch6_reg[2];
  assign delayMatch6_reg_next[0] = Relational_Operator2_relop1;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];
  assign delayMatch6_reg_next[2] = delayMatch6_reg[1];


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 16'sb0000000000000000;
        reduced_reg_1[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
        end
      end
    end

  assign Signal_w_2 = reduced_reg_1[1];
  assign reduced_reg_next_1[0] = Signal_w_1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];



  assign kconst_2 = 16'sb1000000000000000;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Threshold1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold1_1 <= Threshold1;
        end
      end
    end



  assign Gain1_cast = {1'b0, Threshold1_1};
  assign Gain1_mul_temp = kconst_3 * Gain1_cast;
  assign Gain1_cast_1 = Gain1_mul_temp[31:0];
  assign Gain1_out1 = {{10{Gain1_cast_1[31]}}, Gain1_cast_1[31:26]};


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Relational_Operator3_1_cast = {{10{Signal_w_2[15]}}, Signal_w_2};
  assign Relational_Operator3_1_cast_1 = {Gain1_out1_1, 10'b0000000000};
  assign Relational_Operator3_relop1 = Relational_Operator3_1_cast < Relational_Operator3_1_cast_1;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator3_relop1;
        end
      end
    end


  assign Relational_Operator4_relop1 = Delay2_out1 > Delay3_out1;


  assign switch_compare_1 = Relational_Operator4_relop1 == 1'b1;



  assign Add1_add_cast = {1'b0, Threshold1[15:1]};
  assign Add1_out1 = Signal_w_1 + Add1_add_cast;


  always @(posedge clk)
    begin : delayMatch9_process
      if (reset == 1'b1) begin
        delayMatch9_reg[0] <= 16'sb0000000000000000;
        delayMatch9_reg[1] <= 16'sb0000000000000000;
        delayMatch9_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch9_reg[0] <= delayMatch9_reg_next[0];
          delayMatch9_reg[1] <= delayMatch9_reg_next[1];
          delayMatch9_reg[2] <= delayMatch9_reg_next[2];
        end
      end
    end

  assign Delay4_out1 = delayMatch9_reg[2];
  assign delayMatch9_reg_next[0] = Add1_out1;
  assign delayMatch9_reg_next[1] = delayMatch9_reg[0];
  assign delayMatch9_reg_next[2] = delayMatch9_reg[1];


  assign Subtract1_sub_cast = {1'b0, Threshold1[15:1]};
  assign Subtract1_out1 = Signal_w_1 - Subtract1_sub_cast;


  assign Abs_cast = {Signal_w[15], Signal_w};
  assign Abs_y = (Signal_w < 16'sb0000000000000000 ?  - (Abs_cast) :
              {Signal_w[15], Signal_w});
  assign Abs_out1 = {Abs_y[14:0], 1'b0};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
        delayMatch_reg[2] <= 16'b0000000000000000;
        delayMatch_reg[3] <= 16'b0000000000000000;
        delayMatch_reg[4] <= 16'b0000000000000000;
        delayMatch_reg[5] <= 16'b0000000000000000;
        delayMatch_reg[6] <= 16'b0000000000000000;
        delayMatch_reg[7] <= 16'b0000000000000000;
        delayMatch_reg[8] <= 16'b0000000000000000;
        delayMatch_reg[9] <= 16'b0000000000000000;
        delayMatch_reg[10] <= 16'b0000000000000000;
        delayMatch_reg[11] <= 16'b0000000000000000;
        delayMatch_reg[12] <= 16'b0000000000000000;
        delayMatch_reg[13] <= 16'b0000000000000000;
        delayMatch_reg[14] <= 16'b0000000000000000;
        delayMatch_reg[15] <= 16'b0000000000000000;
        delayMatch_reg[16] <= 16'b0000000000000000;
        delayMatch_reg[17] <= 16'b0000000000000000;
        delayMatch_reg[18] <= 16'b0000000000000000;
        delayMatch_reg[19] <= 16'b0000000000000000;
        delayMatch_reg[20] <= 16'b0000000000000000;
        delayMatch_reg[21] <= 16'b0000000000000000;
        delayMatch_reg[22] <= 16'b0000000000000000;
        delayMatch_reg[23] <= 16'b0000000000000000;
        delayMatch_reg[24] <= 16'b0000000000000000;
        delayMatch_reg[25] <= 16'b0000000000000000;
        delayMatch_reg[26] <= 16'b0000000000000000;
        delayMatch_reg[27] <= 16'b0000000000000000;
        delayMatch_reg[28] <= 16'b0000000000000000;
        delayMatch_reg[29] <= 16'b0000000000000000;
        delayMatch_reg[30] <= 16'b0000000000000000;
        delayMatch_reg[31] <= 16'b0000000000000000;
        delayMatch_reg[32] <= 16'b0000000000000000;
        delayMatch_reg[33] <= 16'b0000000000000000;
        delayMatch_reg[34] <= 16'b0000000000000000;
        delayMatch_reg[35] <= 16'b0000000000000000;
        delayMatch_reg[36] <= 16'b0000000000000000;
        delayMatch_reg[37] <= 16'b0000000000000000;
        delayMatch_reg[38] <= 16'b0000000000000000;
        delayMatch_reg[39] <= 16'b0000000000000000;
        delayMatch_reg[40] <= 16'b0000000000000000;
        delayMatch_reg[41] <= 16'b0000000000000000;
        delayMatch_reg[42] <= 16'b0000000000000000;
        delayMatch_reg[43] <= 16'b0000000000000000;
        delayMatch_reg[44] <= 16'b0000000000000000;
        delayMatch_reg[45] <= 16'b0000000000000000;
        delayMatch_reg[46] <= 16'b0000000000000000;
        delayMatch_reg[47] <= 16'b0000000000000000;
        delayMatch_reg[48] <= 16'b0000000000000000;
        delayMatch_reg[49] <= 16'b0000000000000000;
        delayMatch_reg[50] <= 16'b0000000000000000;
        delayMatch_reg[51] <= 16'b0000000000000000;
        delayMatch_reg[52] <= 16'b0000000000000000;
        delayMatch_reg[53] <= 16'b0000000000000000;
        delayMatch_reg[54] <= 16'b0000000000000000;
        delayMatch_reg[55] <= 16'b0000000000000000;
        delayMatch_reg[56] <= 16'b0000000000000000;
        delayMatch_reg[57] <= 16'b0000000000000000;
        delayMatch_reg[58] <= 16'b0000000000000000;
        delayMatch_reg[59] <= 16'b0000000000000000;
        delayMatch_reg[60] <= 16'b0000000000000000;
        delayMatch_reg[61] <= 16'b0000000000000000;
        delayMatch_reg[62] <= 16'b0000000000000000;
        delayMatch_reg[63] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
          delayMatch_reg[8] <= delayMatch_reg_next[8];
          delayMatch_reg[9] <= delayMatch_reg_next[9];
          delayMatch_reg[10] <= delayMatch_reg_next[10];
          delayMatch_reg[11] <= delayMatch_reg_next[11];
          delayMatch_reg[12] <= delayMatch_reg_next[12];
          delayMatch_reg[13] <= delayMatch_reg_next[13];
          delayMatch_reg[14] <= delayMatch_reg_next[14];
          delayMatch_reg[15] <= delayMatch_reg_next[15];
          delayMatch_reg[16] <= delayMatch_reg_next[16];
          delayMatch_reg[17] <= delayMatch_reg_next[17];
          delayMatch_reg[18] <= delayMatch_reg_next[18];
          delayMatch_reg[19] <= delayMatch_reg_next[19];
          delayMatch_reg[20] <= delayMatch_reg_next[20];
          delayMatch_reg[21] <= delayMatch_reg_next[21];
          delayMatch_reg[22] <= delayMatch_reg_next[22];
          delayMatch_reg[23] <= delayMatch_reg_next[23];
          delayMatch_reg[24] <= delayMatch_reg_next[24];
          delayMatch_reg[25] <= delayMatch_reg_next[25];
          delayMatch_reg[26] <= delayMatch_reg_next[26];
          delayMatch_reg[27] <= delayMatch_reg_next[27];
          delayMatch_reg[28] <= delayMatch_reg_next[28];
          delayMatch_reg[29] <= delayMatch_reg_next[29];
          delayMatch_reg[30] <= delayMatch_reg_next[30];
          delayMatch_reg[31] <= delayMatch_reg_next[31];
          delayMatch_reg[32] <= delayMatch_reg_next[32];
          delayMatch_reg[33] <= delayMatch_reg_next[33];
          delayMatch_reg[34] <= delayMatch_reg_next[34];
          delayMatch_reg[35] <= delayMatch_reg_next[35];
          delayMatch_reg[36] <= delayMatch_reg_next[36];
          delayMatch_reg[37] <= delayMatch_reg_next[37];
          delayMatch_reg[38] <= delayMatch_reg_next[38];
          delayMatch_reg[39] <= delayMatch_reg_next[39];
          delayMatch_reg[40] <= delayMatch_reg_next[40];
          delayMatch_reg[41] <= delayMatch_reg_next[41];
          delayMatch_reg[42] <= delayMatch_reg_next[42];
          delayMatch_reg[43] <= delayMatch_reg_next[43];
          delayMatch_reg[44] <= delayMatch_reg_next[44];
          delayMatch_reg[45] <= delayMatch_reg_next[45];
          delayMatch_reg[46] <= delayMatch_reg_next[46];
          delayMatch_reg[47] <= delayMatch_reg_next[47];
          delayMatch_reg[48] <= delayMatch_reg_next[48];
          delayMatch_reg[49] <= delayMatch_reg_next[49];
          delayMatch_reg[50] <= delayMatch_reg_next[50];
          delayMatch_reg[51] <= delayMatch_reg_next[51];
          delayMatch_reg[52] <= delayMatch_reg_next[52];
          delayMatch_reg[53] <= delayMatch_reg_next[53];
          delayMatch_reg[54] <= delayMatch_reg_next[54];
          delayMatch_reg[55] <= delayMatch_reg_next[55];
          delayMatch_reg[56] <= delayMatch_reg_next[56];
          delayMatch_reg[57] <= delayMatch_reg_next[57];
          delayMatch_reg[58] <= delayMatch_reg_next[58];
          delayMatch_reg[59] <= delayMatch_reg_next[59];
          delayMatch_reg[60] <= delayMatch_reg_next[60];
          delayMatch_reg[61] <= delayMatch_reg_next[61];
          delayMatch_reg[62] <= delayMatch_reg_next[62];
          delayMatch_reg[63] <= delayMatch_reg_next[63];
        end
      end
    end

  assign Abs_out1_1 = delayMatch_reg[63];
  assign delayMatch_reg_next[0] = Abs_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];
  assign delayMatch_reg_next[8] = delayMatch_reg[7];
  assign delayMatch_reg_next[9] = delayMatch_reg[8];
  assign delayMatch_reg_next[10] = delayMatch_reg[9];
  assign delayMatch_reg_next[11] = delayMatch_reg[10];
  assign delayMatch_reg_next[12] = delayMatch_reg[11];
  assign delayMatch_reg_next[13] = delayMatch_reg[12];
  assign delayMatch_reg_next[14] = delayMatch_reg[13];
  assign delayMatch_reg_next[15] = delayMatch_reg[14];
  assign delayMatch_reg_next[16] = delayMatch_reg[15];
  assign delayMatch_reg_next[17] = delayMatch_reg[16];
  assign delayMatch_reg_next[18] = delayMatch_reg[17];
  assign delayMatch_reg_next[19] = delayMatch_reg[18];
  assign delayMatch_reg_next[20] = delayMatch_reg[19];
  assign delayMatch_reg_next[21] = delayMatch_reg[20];
  assign delayMatch_reg_next[22] = delayMatch_reg[21];
  assign delayMatch_reg_next[23] = delayMatch_reg[22];
  assign delayMatch_reg_next[24] = delayMatch_reg[23];
  assign delayMatch_reg_next[25] = delayMatch_reg[24];
  assign delayMatch_reg_next[26] = delayMatch_reg[25];
  assign delayMatch_reg_next[27] = delayMatch_reg[26];
  assign delayMatch_reg_next[28] = delayMatch_reg[27];
  assign delayMatch_reg_next[29] = delayMatch_reg[28];
  assign delayMatch_reg_next[30] = delayMatch_reg[29];
  assign delayMatch_reg_next[31] = delayMatch_reg[30];
  assign delayMatch_reg_next[32] = delayMatch_reg[31];
  assign delayMatch_reg_next[33] = delayMatch_reg[32];
  assign delayMatch_reg_next[34] = delayMatch_reg[33];
  assign delayMatch_reg_next[35] = delayMatch_reg[34];
  assign delayMatch_reg_next[36] = delayMatch_reg[35];
  assign delayMatch_reg_next[37] = delayMatch_reg[36];
  assign delayMatch_reg_next[38] = delayMatch_reg[37];
  assign delayMatch_reg_next[39] = delayMatch_reg[38];
  assign delayMatch_reg_next[40] = delayMatch_reg[39];
  assign delayMatch_reg_next[41] = delayMatch_reg[40];
  assign delayMatch_reg_next[42] = delayMatch_reg[41];
  assign delayMatch_reg_next[43] = delayMatch_reg[42];
  assign delayMatch_reg_next[44] = delayMatch_reg[43];
  assign delayMatch_reg_next[45] = delayMatch_reg[44];
  assign delayMatch_reg_next[46] = delayMatch_reg[45];
  assign delayMatch_reg_next[47] = delayMatch_reg[46];
  assign delayMatch_reg_next[48] = delayMatch_reg[47];
  assign delayMatch_reg_next[49] = delayMatch_reg[48];
  assign delayMatch_reg_next[50] = delayMatch_reg[49];
  assign delayMatch_reg_next[51] = delayMatch_reg[50];
  assign delayMatch_reg_next[52] = delayMatch_reg[51];
  assign delayMatch_reg_next[53] = delayMatch_reg[52];
  assign delayMatch_reg_next[54] = delayMatch_reg[53];
  assign delayMatch_reg_next[55] = delayMatch_reg[54];
  assign delayMatch_reg_next[56] = delayMatch_reg[55];
  assign delayMatch_reg_next[57] = delayMatch_reg[56];
  assign delayMatch_reg_next[58] = delayMatch_reg[57];
  assign delayMatch_reg_next[59] = delayMatch_reg[58];
  assign delayMatch_reg_next[60] = delayMatch_reg[59];
  assign delayMatch_reg_next[61] = delayMatch_reg[60];
  assign delayMatch_reg_next[62] = delayMatch_reg[61];
  assign delayMatch_reg_next[63] = delayMatch_reg[62];



  assign Relational_Operator1_relop1 = Abs_out1_1 == Threshold1;


  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Relational_Operator1_relop1;
        end
      end
    end


  assign Relational_Operator5_1_cast = {{18{Signal_w_1[15]}}, {Signal_w_1, 1'b0}};
  assign Relational_Operator5_1_cast_1 = {19'b0, Threshold1};
  assign Relational_Operator5_relop1 = Relational_Operator5_1_cast < Relational_Operator5_1_cast_1;


  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Relational_Operator5_relop1;
        end
      end
    end


  assign Relational_Operator6_relop1 = Delay5_out1 > Delay6_out1;


  assign switch_compare_1_1 = Relational_Operator6_relop1 == 1'b1;



  assign Constant_out1 = 16'sb0000000000000000;


  assign Threshold_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant_out1 :
              Constant_out1);


  always @(posedge clk)
    begin : delayMatch11_process
      if (reset == 1'b1) begin
        delayMatch11_reg[0] <= 1'b0;
        delayMatch11_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch11_reg[0] <= delayMatch11_reg_next[0];
          delayMatch11_reg[1] <= delayMatch11_reg_next[1];
        end
      end
    end

  assign Relational_Operator7_out1 = delayMatch11_reg[1];
  assign delayMatch11_reg_next[0] = Relational_Operator7_relop1;
  assign delayMatch11_reg_next[1] = delayMatch11_reg[0];



  assign switch_compare_1_2 = Relational_Operator7_out1 == 1'b1;



  always @(posedge clk)
    begin : delayMatch8_process
      if (reset == 1'b1) begin
        delayMatch8_reg[0] <= 16'sb0000000000000000;
        delayMatch8_reg[1] <= 16'sb0000000000000000;
        delayMatch8_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch8_reg[0] <= delayMatch8_reg_next[0];
          delayMatch8_reg[1] <= delayMatch8_reg_next[1];
          delayMatch8_reg[2] <= delayMatch8_reg_next[2];
        end
      end
    end

  assign Delay1_out1 = delayMatch8_reg[2];
  assign delayMatch8_reg_next[0] = Subtract1_out1;
  assign delayMatch8_reg_next[1] = delayMatch8_reg[0];
  assign delayMatch8_reg_next[2] = delayMatch8_reg[1];


  assign Threshold_Switch_out1 = (switch_compare_1 == 1'b0 ? Delay4_out1 :
              Delay1_out1);


  always @(posedge clk)
    begin : delayMatch10_process
      if (reset == 1'b1) begin
        delayMatch10_reg[0] <= 16'sb0000000000000000;
        delayMatch10_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch10_reg[0] <= delayMatch10_reg_next[0];
          delayMatch10_reg[1] <= delayMatch10_reg_next[1];
        end
      end
    end

  assign Threshold_Switch1_out1_1 = delayMatch10_reg[1];
  assign delayMatch10_reg_next[0] = Threshold_Switch1_out1;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];



  assign Threshold_Switch1_out1_dtc = 16'sb0000000000000000;



  assign Threshold_Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Threshold_Switch_out1 :
              Threshold_Switch1_out1_dtc);


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Threshold_Switch2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold_Switch2_out1_1 <= Threshold_Switch2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Threshold_Switch2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign New_Threshold = Gain_out1_1;

endmodule  // Soft_Thresholding3

