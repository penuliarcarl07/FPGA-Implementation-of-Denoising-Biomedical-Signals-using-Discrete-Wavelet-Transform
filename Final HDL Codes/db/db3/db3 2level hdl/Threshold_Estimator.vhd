-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\db3_2_Level_fixdt\Threshold_Estimator.vhd
-- Created: 2024-04-17 21:48:34
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Threshold_Estimator
-- Source Path: db3_2_Level_fixdt/DWT_db3_2_Level/Threshold_Estimator
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Threshold_Estimator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Signal_w                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
        Threshold                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En25
        );
END Threshold_Estimator;


ARCHITECTURE rtl OF Threshold_Estimator IS

  -- Component Declarations
  COMPONENT Absolute_Value1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_w4                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          Out_Abs                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En27
          );
  END COMPONENT;

  COMPONENT Median2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_w3                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En27
          Median                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En27
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Absolute_Value1
    USE ENTITY work.Absolute_Value1(rtl);

  FOR ALL : Median2
    USE ENTITY work.Median2(rtl);

  -- Signals
  SIGNAL Absolute_Value1_out1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Median2_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Median2_out1_unsigned            : unsigned(15 DOWNTO 0);  -- ufix16_En27
  SIGNAL Median2_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En27
  SIGNAL Length_out1                      : unsigned(15 DOWNTO 0);  -- ufix16_En13
  SIGNAL Length_out1_1                    : unsigned(15 DOWNTO 0);  -- ufix16_En13
  SIGNAL Multiply_mul_temp                : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL Multiply_out1                    : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL Multiply_out1_1                  : unsigned(15 DOWNTO 0);  -- ufix16_En25

  ATTRIBUTE multstyle : string;

BEGIN
  u_Absolute_Value1 : Absolute_Value1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_w4 => Signal_w,  -- sfix16_En26
              Out_Abs => Absolute_Value1_out1  -- ufix16_En27
              );

  u_Median2 : Median2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_w3 => Absolute_Value1_out1,  -- ufix16_En27
              Median => Median2_out1  -- ufix16_En27
              );

  Median2_out1_unsigned <= unsigned(Median2_out1);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Median2_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Median2_out1_1 <= Median2_out1_unsigned;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Length_out1 <= to_unsigned(16#9DFA#, 16);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Length_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Length_out1_1 <= Length_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Multiply_mul_temp <= Median2_out1_1 * Length_out1_1;
  Multiply_out1 <= Multiply_mul_temp(30 DOWNTO 15);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Multiply_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Multiply_out1_1 <= Multiply_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Threshold <= std_logic_vector(Multiply_out1_1);

END rtl;

