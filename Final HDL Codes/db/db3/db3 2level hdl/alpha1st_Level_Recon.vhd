-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\db3_2_Level_fixdt\alpha1st_Level_Recon.vhd
-- Created: 2024-04-17 21:48:34
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: alpha1st_Level_Recon
-- Source Path: db3_2_Level_fixdt/DWT_db3_2_Level/1st_Level_Recon
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DWT_db3_2_Level_pkg.ALL;

ENTITY alpha1st_Level_Recon IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In_HiD                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
        In_LoD                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
        Out_rsvd                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
        );
END alpha1st_Level_Recon;


ARCHITECTURE rtl OF alpha1st_Level_Recon IS

  -- Component Declarations
  COMPONENT HiR_Even
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_HiR_e                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          Out_HiR_e                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En27
          );
  END COMPONENT;

  COMPONENT LoR_Even
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_LoR_e                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
          Out_LoR_e                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
          );
  END COMPONENT;

  COMPONENT HiR_Odd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_HiR_o                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          Out_HiR_o                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En28
          );
  END COMPONENT;

  COMPONENT LoR_Odd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_LoR_o                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
          Out_LoR_o                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HiR_Even
    USE ENTITY work.HiR_Even(rtl);

  FOR ALL : LoR_Even
    USE ENTITY work.LoR_Even(rtl);

  FOR ALL : HiR_Odd
    USE ENTITY work.HiR_Odd(rtl);

  FOR ALL : LoR_Odd
    USE ENTITY work.LoR_Odd(rtl);

  -- Signals
  SIGNAL kconst                           : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL kconst_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL HiR_Even_out1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL HiR_Even_out1_signed             : signed(15 DOWNTO 0);  -- sfix16_En27
  SIGNAL LoR_Even_out1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL LoR_Even_out1_signed             : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL delayMatch_reg                   : vector_of_signed16(0 TO 6);  -- sfix16 [7]
  SIGNAL LoR_Even_out1_1                  : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add_add_cast                     : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL HiR_Odd_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL HiR_Odd_out1_signed              : signed(15 DOWNTO 0);  -- sfix16_En28
  SIGNAL LoR_Odd_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL LoR_Odd_out1_signed              : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL delayMatch1_reg                  : vector_of_signed16(0 TO 6);  -- sfix16 [7]
  SIGNAL LoR_Odd_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add1_add_cast                    : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add2_add_cast                    : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL Add2_add_cast_1                  : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL Add2_out1                        : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL Add2_out1_1                      : signed(15 DOWNTO 0);  -- sfix16_En22
  SIGNAL HiR_cast                         : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL HiR_mul_temp                     : signed(32 DOWNTO 0);  -- sfix33_En38
  SIGNAL HiR_cast_1                       : signed(31 DOWNTO 0);  -- sfix32_En38
  SIGNAL HiR_out1                         : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL HiR_out1_1                       : signed(15 DOWNTO 0);  -- sfix16_En23

  ATTRIBUTE multstyle : string;

BEGIN
  u_HiR_Even : HiR_Even
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_HiR_e => In_HiD,  -- sfix16_En26
              Out_HiR_e => HiR_Even_out1  -- sfix16_En27
              );

  u_LoR_Even : LoR_Even
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_LoR_e => In_LoD,  -- sfix16_En23
              Out_LoR_e => LoR_Even_out1  -- sfix16_En23
              );

  u_HiR_Odd : HiR_Odd
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_HiR_o => In_HiD,  -- sfix16_En26
              Out_HiR_o => HiR_Odd_out1  -- sfix16_En28
              );

  u_LoR_Odd : LoR_Odd
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_LoR_o => In_LoD,  -- sfix16_En23
              Out_LoR_o => LoR_Odd_out1  -- sfix16_En23
              );

  kconst <= to_unsigned(16#ED75#, 16);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        kconst_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  HiR_Even_out1_signed <= signed(HiR_Even_out1);

  LoR_Even_out1_signed <= signed(LoR_Even_out1);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= LoR_Even_out1_signed;
        delayMatch_reg(1 TO 6) <= delayMatch_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  LoR_Even_out1_1 <= delayMatch_reg(6);

  Add_add_cast <= resize(HiR_Even_out1_signed(15 DOWNTO 4), 16);
  Add_out1 <= Add_add_cast + LoR_Even_out1_1;

  HiR_Odd_out1_signed <= signed(HiR_Odd_out1);

  LoR_Odd_out1_signed <= signed(LoR_Odd_out1);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch1_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= LoR_Odd_out1_signed;
        delayMatch1_reg(1 TO 6) <= delayMatch1_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  LoR_Odd_out1_1 <= delayMatch1_reg(6);

  Add1_add_cast <= resize(HiR_Odd_out1_signed(15 DOWNTO 5), 16);
  Add1_out1 <= Add1_add_cast + LoR_Odd_out1_1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Add2_add_cast <= resize(Add_out1(15 DOWNTO 1), 16);
  Add2_add_cast_1 <= resize(Delay2_out1(15 DOWNTO 1), 16);
  Add2_out1 <= Add2_add_cast + Add2_add_cast_1;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Add2_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Add2_out1_1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  HiR_cast <= signed(resize(kconst_1, 17));
  HiR_mul_temp <= HiR_cast * Add2_out1_1;
  HiR_cast_1 <= HiR_mul_temp(31 DOWNTO 0);
  HiR_out1 <= HiR_cast_1(30 DOWNTO 15);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HiR_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        HiR_out1_1 <= HiR_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Out_rsvd <= std_logic_vector(HiR_out1_1);

END rtl;

