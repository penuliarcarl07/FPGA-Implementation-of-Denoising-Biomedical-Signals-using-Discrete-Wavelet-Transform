-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\db3_2_Level_fixdt\DWT_db3_2_Level.vhd
-- Created: 2024-04-17 21:48:34
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.26757e-05
-- Target subsystem base rate: 2.26757e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.26757e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        2.26757e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DWT_db3_2_Level
-- Source Path: db3_2_Level_fixdt/DWT_db3_2_Level
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DWT_db3_2_Level_pkg.ALL;

ENTITY DWT_db3_2_Level IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En23
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En22
        );
END DWT_db3_2_Level;


ARCHITECTURE rtl OF DWT_db3_2_Level IS

  -- Component Declarations
  COMPONENT DWT_db3_2_Level_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_30_0                      :   OUT   std_logic;
          enb_1_30_1                      :   OUT   std_logic;
          enb_1_30_4                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT alpha1st_Level_Decomp
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_E                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En23
          In_O                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En23
          Out_HiD                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En24
          Out_LoD                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
          );
  END COMPONENT;

  COMPONENT alpha2nd_Level_Decomp
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_E                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
          In_O                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
          Out_HiD                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          Out_LoD                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
          );
  END COMPONENT;

  COMPONENT Threshold_Estimator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_w                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          Threshold                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En25
          );
  END COMPONENT;

  COMPONENT Soft_Thresholding
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_w                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En24
          Threshold1                      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En25
          New_Threshold                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En26
          );
  END COMPONENT;

  COMPONENT Soft_Thresholding1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Signal_w                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          Threshold1                      :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En25
          New_Threshold                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En26
          );
  END COMPONENT;

  COMPONENT alpha1st_Level_Recon
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_HiD                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          In_LoD                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
          Out_rsvd                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
          );
  END COMPONENT;

  COMPONENT alpha2nd_Level_Recon
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_HiD                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En26
          In_LoD                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En23
          Out_rsvd                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En22
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DWT_db3_2_Level_tc
    USE ENTITY work.DWT_db3_2_Level_tc(rtl);

  FOR ALL : alpha1st_Level_Decomp
    USE ENTITY work.alpha1st_Level_Decomp(rtl);

  FOR ALL : alpha2nd_Level_Decomp
    USE ENTITY work.alpha2nd_Level_Decomp(rtl);

  FOR ALL : Threshold_Estimator
    USE ENTITY work.Threshold_Estimator(rtl);

  FOR ALL : Soft_Thresholding
    USE ENTITY work.Soft_Thresholding(rtl);

  FOR ALL : Soft_Thresholding1
    USE ENTITY work.Soft_Thresholding1(rtl);

  FOR ALL : alpha1st_Level_Recon
    USE ENTITY work.alpha1st_Level_Recon(rtl);

  FOR ALL : alpha2nd_Level_Recon
    USE ENTITY work.alpha2nd_Level_Recon(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_30_1                       : std_logic;
  SIGNAL enb_1_30_0                       : std_logic;
  SIGNAL enb_1_30_4                       : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL In1_unsigned                     : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Downsample1_out1                 : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Downsample1_out1_1               : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Delay_out1                       : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Downsample2_out1                 : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Downsample2_out1_1               : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Rate_Transition_out1             : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Rate_Transition1_out1            : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL alpha1st_Level_Decomp_out1       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha1st_Level_Decomp_out2       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha1st_Level_Decomp_out2_signed : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL alpha1st_Level_Decomp_out2_1     : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 25);  -- sfix16 [26]
  SIGNAL alpha1st_Level_Decomp_out2_2     : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Downsample3_out1                 : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Downsample3_out1_1               : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Downsample4_ds_out               : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Downsample4_out1                 : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Downsample4_out1_1               : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Rate_Transition2_out1            : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Rate_Transition3_out1            : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL alpha2nd_Level_Decomp_out1       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha2nd_Level_Decomp_out2       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Threshold_Estimator_out1         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Soft_Thresholding_out1           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Soft_Thresholding1_out1          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha1st_Level_Recon_out1        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha2nd_Level_Recon_out1        : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_DWT_db3_2_Level_tc : DWT_db3_2_Level_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_30_0 => enb_1_30_0,
              enb_1_30_1 => enb_1_30_1,
              enb_1_30_4 => enb_1_30_4
              );

  u_1st_Level_Decomp : alpha1st_Level_Decomp
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_E => std_logic_vector(Rate_Transition_out1),  -- ufix16_En23
              In_O => std_logic_vector(Rate_Transition1_out1),  -- ufix16_En23
              Out_HiD => alpha1st_Level_Decomp_out1,  -- sfix16_En24
              Out_LoD => alpha1st_Level_Decomp_out2  -- sfix16_En23
              );

  u_2nd_Level_Decomp : alpha2nd_Level_Decomp
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_E => std_logic_vector(Rate_Transition2_out1),  -- sfix16_En23
              In_O => std_logic_vector(Rate_Transition3_out1),  -- sfix16_En23
              Out_HiD => alpha2nd_Level_Decomp_out1,  -- sfix16_En26
              Out_LoD => alpha2nd_Level_Decomp_out2  -- sfix16_En23
              );

  u_Threshold_Estimator : Threshold_Estimator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_w => alpha2nd_Level_Decomp_out1,  -- sfix16_En26
              Threshold => Threshold_Estimator_out1  -- ufix16_En25
              );

  u_Soft_Thresholding : Soft_Thresholding
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_w => alpha1st_Level_Decomp_out1,  -- sfix16_En24
              Threshold1 => Threshold_Estimator_out1,  -- ufix16_En25
              New_Threshold => Soft_Thresholding_out1  -- sfix16_En26
              );

  u_Soft_Thresholding1 : Soft_Thresholding1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Signal_w => alpha2nd_Level_Decomp_out1,  -- sfix16_En26
              Threshold1 => Threshold_Estimator_out1,  -- ufix16_En25
              New_Threshold => Soft_Thresholding1_out1  -- sfix16_En26
              );

  u_1st_Level_Recon : alpha1st_Level_Recon
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_HiD => Soft_Thresholding1_out1,  -- sfix16_En26
              In_LoD => alpha2nd_Level_Decomp_out2,  -- sfix16_En23
              Out_rsvd => alpha1st_Level_Recon_out1  -- sfix16_En23
              );

  u_2nd_Level_Recon : alpha2nd_Level_Recon
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_HiD => Soft_Thresholding_out1,  -- sfix16_En26
              In_LoD => alpha1st_Level_Recon_out1,  -- sfix16_En23
              Out_rsvd => alpha2nd_Level_Recon_out1  -- sfix16_En22
              );

  In1_unsigned <= unsigned(In1);

  -- Downsample by 30 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample1_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_30_1 = '1' THEN
        Downsample1_out1 <= In1_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample1_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Downsample1_out1_1 <= Downsample1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay_out1 <= In1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay_process;


  -- Downsample by 30 register (Sample offset 0)
  Downsample2_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample2_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_30_1 = '1' THEN
        Downsample2_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Downsample2_output_process;


  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample2_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Downsample2_out1_1 <= Downsample2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Rate_Transition_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Rate_Transition_out1 <= Downsample1_out1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_process;


  Rate_Transition1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition1_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Rate_Transition1_out1 <= Downsample2_out1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_process;


  alpha1st_Level_Decomp_out2_signed <= signed(alpha1st_Level_Decomp_out2);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha1st_Level_Decomp_out2_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        alpha1st_Level_Decomp_out2_1 <= alpha1st_Level_Decomp_out2_signed;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= alpha1st_Level_Decomp_out2_1;
        reduced_reg(1 TO 25) <= reduced_reg(0 TO 24);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  alpha1st_Level_Decomp_out2_2 <= reduced_reg(25);

  -- Downsample by 30 register (Sample offset 0)
  Downsample3_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_1 = '1' THEN
        Downsample3_out1 <= alpha1st_Level_Decomp_out2_2;
      END IF;
    END IF;
  END PROCESS Downsample3_output_process;


  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample3_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Downsample3_out1_1 <= Downsample3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  -- Downsample register
  Downsample4_ds_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample4_ds_out <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_4 = '1' THEN
        Downsample4_ds_out <= alpha1st_Level_Decomp_out2_1;
      END IF;
    END IF;
  END PROCESS Downsample4_ds_process;


  -- Downsample output register
  Downsample4_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Downsample4_out1 <= Downsample4_ds_out;
      END IF;
    END IF;
  END PROCESS Downsample4_output_process;


  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Downsample4_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Downsample4_out1_1 <= Downsample4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Rate_Transition2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Rate_Transition2_out1 <= Downsample3_out1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_process;


  Rate_Transition3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_30_0 = '1' THEN
        Rate_Transition3_out1 <= Downsample4_out1_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_process;


  ce_out <= enb_1_1_1;

  Out1 <= alpha2nd_Level_Recon_out1;

END rtl;

