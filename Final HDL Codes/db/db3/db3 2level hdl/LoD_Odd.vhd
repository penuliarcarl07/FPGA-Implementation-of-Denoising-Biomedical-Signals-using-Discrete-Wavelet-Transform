-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\db3_2_Level_fixdt\LoD_Odd.vhd
-- Created: 2024-04-17 21:48:34
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: LoD_Odd
-- Source Path: db3_2_Level_fixdt/DWT_db3_2_Level/1st_Level_Decomp/LoD_Odd
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DWT_db3_2_Level_pkg.ALL;

ENTITY LoD_Odd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In_LoD_o                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En23
        Out_LoD_o                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En23
        );
END LoD_Odd;


ARCHITECTURE rtl OF LoD_Odd IS

  -- Signals
  SIGNAL LoD_1_out1                       : signed(15 DOWNTO 0);  -- sfix16_En18
  SIGNAL LoD_1_out1_1                     : signed(15 DOWNTO 0);  -- sfix16_En18
  SIGNAL In_LoD_o_unsigned                : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL In_LoD_o_1                       : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Multiply_cast                    : signed(16 DOWNTO 0);  -- sfix17_En23
  SIGNAL Multiply_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En41
  SIGNAL Multiply_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En41
  SIGNAL Multiply_out1                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Multiply_out1_1                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL LoD_3_out1                       : unsigned(15 DOWNTO 0);  -- ufix16_En17
  SIGNAL LoD_3_out1_1                     : unsigned(15 DOWNTO 0);  -- ufix16_En17
  SIGNAL Rate_Transition2_out1            : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Multiply1_mul_temp               : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL Multiply1_out1                   : unsigned(15 DOWNTO 0);  -- ufix16_En24
  SIGNAL Multiply1_out1_1                 : unsigned(15 DOWNTO 0);  -- ufix16_En24
  SIGNAL LoD_5_out1                       : unsigned(15 DOWNTO 0);  -- ufix16_En17
  SIGNAL LoD_5_out1_1                     : unsigned(15 DOWNTO 0);  -- ufix16_En17
  SIGNAL Rate_Transition1_out1            : unsigned(15 DOWNTO 0);  -- ufix16_En23
  SIGNAL Multiply2_mul_temp               : unsigned(31 DOWNTO 0);  -- ufix32_En40
  SIGNAL Multiply2_out1                   : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL delayMatch_reg                   : vector_of_unsigned16(0 TO 1);  -- ufix16 [2]
  SIGNAL Multiply2_out1_1                 : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL Add1_add_cast                    : unsigned(15 DOWNTO 0);  -- ufix16_En24
  SIGNAL Add1_out1                        : unsigned(15 DOWNTO 0);  -- ufix16_En24
  SIGNAL Delay3_out1                      : unsigned(15 DOWNTO 0);  -- ufix16_En24
  SIGNAL Add_add_cast                     : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add_add_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En23
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En23

  ATTRIBUTE multstyle : string;

BEGIN
  LoD_1_out1 <= to_signed(-16#577E#, 16);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        LoD_1_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        LoD_1_out1_1 <= LoD_1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  In_LoD_o_unsigned <= unsigned(In_LoD_o);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        In_LoD_o_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        In_LoD_o_1 <= In_LoD_o_unsigned;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Multiply_cast <= signed(resize(In_LoD_o_1, 17));
  Multiply_mul_temp <= LoD_1_out1_1 * Multiply_cast;
  Multiply_cast_1 <= Multiply_mul_temp(31 DOWNTO 0);
  Multiply_out1 <= resize(Multiply_cast_1(31 DOWNTO 26), 16);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Multiply_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Multiply_out1_1 <= Multiply_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  LoD_3_out1 <= to_unsigned(16#EB75#, 16);

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        LoD_3_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        LoD_3_out1_1 <= LoD_3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition2_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Rate_Transition2_out1 <= In_LoD_o_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Multiply1_mul_temp <= LoD_3_out1_1 * Rate_Transition2_out1;
  Multiply1_out1 <= Multiply1_mul_temp(31 DOWNTO 16);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Multiply1_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Multiply1_out1_1 <= Multiply1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  LoD_5_out1 <= to_unsigned(16#AA54#, 16);

  HwModeRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        LoD_5_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        LoD_5_out1_1 <= LoD_5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  HwModeRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Rate_Transition1_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Rate_Transition1_out1 <= Rate_Transition2_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;


  Multiply2_mul_temp <= LoD_5_out1_1 * Rate_Transition1_out1;
  Multiply2_out1 <= Multiply2_mul_temp(30 DOWNTO 15);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_unsigned(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= Multiply2_out1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Multiply2_out1_1 <= delayMatch_reg(1);

  Add1_add_cast <= resize(Multiply2_out1_1(15 DOWNTO 1), 16);
  Add1_out1 <= Multiply1_out1_1 + Add1_add_cast;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= Multiply_out1_1(7 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Add_add_cast_1 <= signed(resize(Delay3_out1(15 DOWNTO 1), 16));
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  Out_LoD_o <= std_logic_vector(Add_out1);

END rtl;

