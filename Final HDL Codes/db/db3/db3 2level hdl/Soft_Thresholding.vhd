-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\db3_2_Level_fixdt\Soft_Thresholding.vhd
-- Created: 2024-04-17 21:48:34
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Soft_Thresholding
-- Source Path: db3_2_Level_fixdt/DWT_db3_2_Level/Soft_Thresholding
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.DWT_db3_2_Level_pkg.ALL;

ENTITY Soft_Thresholding IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Signal_w                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En24
        Threshold1                        :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En25
        New_Threshold                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En26
        );
END Soft_Thresholding;


ARCHITECTURE rtl OF Soft_Thresholding IS

  -- Signals
  SIGNAL kconst                           : signed(15 DOWNTO 0);  -- sfix16_En17
  SIGNAL kconst_1                         : signed(15 DOWNTO 0);  -- sfix16_En17
  SIGNAL Signal_w_signed                  : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 63);  -- sfix16 [64]
  SIGNAL Signal_w_1                       : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Threshold1_unsigned              : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL Relational_Operator7_1_cast      : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Relational_Operator7_1_cast_1    : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Relational_Operator7_relop1      : std_logic;
  SIGNAL Relational_Operator2_1_cast      : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Relational_Operator2_1_cast_1    : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL reduced_reg_1                    : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Signal_w_2                       : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL kconst_2                         : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL kconst_3                         : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Threshold1_1                     : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL Gain1_cast                       : signed(16 DOWNTO 0);  -- sfix17_En25
  SIGNAL Gain1_mul_temp                   : signed(32 DOWNTO 0);  -- sfix33_En40
  SIGNAL Gain1_cast_1                     : signed(31 DOWNTO 0);  -- sfix32_En40
  SIGNAL Gain1_out1                       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Gain1_out1_1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Relational_Operator3_1_cast      : signed(24 DOWNTO 0);  -- sfix25_En24
  SIGNAL Relational_Operator3_1_cast_1    : signed(24 DOWNTO 0);  -- sfix25_En24
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Add1_add_cast                    : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL delayMatch9_reg                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Subtract1_sub_cast               : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Subtract1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Abs_y                            : signed(16 DOWNTO 0);  -- sfix17_En24
  SIGNAL Abs_cast                         : signed(16 DOWNTO 0);  -- sfix17_En24
  SIGNAL Abs_out1                         : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL delayMatch_reg                   : vector_of_unsigned16(0 TO 63);  -- ufix16 [64]
  SIGNAL Abs_out1_1                       : unsigned(15 DOWNTO 0);  -- ufix16_En25
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Relational_Operator5_1_cast      : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Relational_Operator5_1_cast_1    : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Relational_Operator6_relop1      : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En4
  SIGNAL Threshold_Switch1_out1           : signed(15 DOWNTO 0);  -- sfix16_En4
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Relational_Operator7_out1        : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL delayMatch8_reg                  : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Threshold_Switch_out1            : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL delayMatch10_reg                 : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Threshold_Switch1_out1_1         : signed(15 DOWNTO 0);  -- sfix16_En4
  SIGNAL Threshold_Switch1_out1_dtc       : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Threshold_Switch2_out1           : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Threshold_Switch2_out1_1         : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Gain_mul_temp                    : signed(31 DOWNTO 0);  -- sfix32_En41
  SIGNAL Gain_out1                        : signed(15 DOWNTO 0);  -- sfix16_En26
  SIGNAL Gain_out1_1                      : signed(15 DOWNTO 0);  -- sfix16_En26

  ATTRIBUTE multstyle : string;

BEGIN
  kconst <= to_signed(16#33DB#, 16);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        kconst_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Signal_w_signed <= signed(Signal_w);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Signal_w_signed;
        reduced_reg(1 TO 63) <= reduced_reg(0 TO 62);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Signal_w_1 <= reduced_reg(63);

  Threshold1_unsigned <= unsigned(Threshold1);

  Relational_Operator7_1_cast <= resize(Signal_w_1 & '0', 33);
  Relational_Operator7_1_cast_1 <= signed(resize(Threshold1_unsigned, 33));
  
  Relational_Operator7_relop1 <= '1' WHEN Relational_Operator7_1_cast = Relational_Operator7_1_cast_1 ELSE
      '0';

  Relational_Operator2_1_cast <= resize(Signal_w_1 & '0', 33);
  Relational_Operator2_1_cast_1 <= signed(resize(Threshold1_unsigned, 33));
  
  Relational_Operator2_relop1 <= '1' WHEN Relational_Operator2_1_cast > Relational_Operator2_1_cast_1 ELSE
      '0';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= Relational_Operator2_relop1;
        delayMatch6_reg(1 TO 2) <= delayMatch6_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Delay2_out1 <= delayMatch6_reg(2);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= Signal_w_1;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Signal_w_2 <= reduced_reg_1(1);

  kconst_2 <= to_signed(-16#8000#, 16);

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        kconst_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        kconst_3 <= kconst_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Threshold1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Threshold1_1 <= Threshold1_unsigned;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Gain1_cast <= signed(resize(Threshold1_1, 17));
  Gain1_mul_temp <= kconst_3 * Gain1_cast;
  Gain1_cast_1 <= Gain1_mul_temp(31 DOWNTO 0);
  Gain1_out1 <= resize(Gain1_cast_1(31 DOWNTO 25), 16);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain1_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Relational_Operator3_1_cast <= resize(Signal_w_2, 25);
  Relational_Operator3_1_cast_1 <= Gain1_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  
  Relational_Operator3_relop1 <= '1' WHEN Relational_Operator3_1_cast < Relational_Operator3_1_cast_1 ELSE
      '0';

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Relational_Operator3_relop1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Relational_Operator4_relop1 <= '1' WHEN Delay2_out1 > Delay3_out1 ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Relational_Operator4_relop1 = '1' ELSE
      '0';

  Add1_add_cast <= signed(resize(Threshold1_unsigned(15 DOWNTO 1), 16));
  Add1_out1 <= Signal_w_1 + Add1_add_cast;

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch9_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch9_reg(0) <= Add1_out1;
        delayMatch9_reg(1 TO 2) <= delayMatch9_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Delay4_out1 <= delayMatch9_reg(2);

  Subtract1_sub_cast <= signed(resize(Threshold1_unsigned(15 DOWNTO 1), 16));
  Subtract1_out1 <= Signal_w_1 - Subtract1_sub_cast;

  Abs_cast <= resize(Signal_w_signed, 17);
  
  Abs_y <=  - (Abs_cast) WHEN Signal_w_signed < to_signed(16#0000#, 16) ELSE
      resize(Signal_w_signed, 17);
  Abs_out1 <= unsigned(Abs_y(14 DOWNTO 0) & '0');

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch_reg <= (OTHERS => to_unsigned(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= Abs_out1;
        delayMatch_reg(1 TO 63) <= delayMatch_reg(0 TO 62);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Abs_out1_1 <= delayMatch_reg(63);

  
  Relational_Operator1_relop1 <= '1' WHEN Abs_out1_1 = Threshold1_unsigned ELSE
      '0';

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= Relational_Operator1_relop1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Relational_Operator5_1_cast <= resize(Signal_w_1 & '0', 33);
  Relational_Operator5_1_cast_1 <= signed(resize(Threshold1_unsigned, 33));
  
  Relational_Operator5_relop1 <= '1' WHEN Relational_Operator5_1_cast < Relational_Operator5_1_cast_1 ELSE
      '0';

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= Relational_Operator5_relop1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Relational_Operator6_relop1 <= '1' WHEN Delay5_out1 > Delay6_out1 ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Relational_Operator6_relop1 = '1' ELSE
      '0';

  Constant_out1 <= to_signed(16#0000#, 16);

  
  Threshold_Switch1_out1 <= Constant_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant_out1;

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch11_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= Relational_Operator7_relop1;
        delayMatch11_reg(1) <= delayMatch11_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Relational_Operator7_out1 <= delayMatch11_reg(1);

  
  switch_compare_1_2 <= '1' WHEN Relational_Operator7_out1 = '1' ELSE
      '0';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch8_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= Subtract1_out1;
        delayMatch8_reg(1 TO 2) <= delayMatch8_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Delay1_out1 <= delayMatch8_reg(2);

  
  Threshold_Switch_out1 <= Delay4_out1 WHEN switch_compare_1 = '0' ELSE
      Delay1_out1;

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        delayMatch10_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch10_reg(0) <= Threshold_Switch1_out1;
        delayMatch10_reg(1) <= delayMatch10_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Threshold_Switch1_out1_1 <= delayMatch10_reg(1);

  Threshold_Switch1_out1_dtc <= to_signed(16#0000#, 16);

  
  Threshold_Switch2_out1 <= Threshold_Switch_out1 WHEN switch_compare_1_2 = '0' ELSE
      Threshold_Switch1_out1_dtc;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Threshold_Switch2_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Threshold_Switch2_out1_1 <= Threshold_Switch2_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Gain_mul_temp <= kconst_1 * Threshold_Switch2_out1_1;
  Gain_out1 <= Gain_mul_temp(30 DOWNTO 15);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Gain_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  New_Threshold <= std_logic_vector(Gain_out1_1);

END rtl;

