// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\db5_2level_final_hdl\HiD_Odd.v
// Created: 2024-04-17 05:55:27
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HiD_Odd
// Source Path: db5_2level_final_hdl/DWT_db5_2level/1st_Level_Decomp5/HiD_Odd
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HiD_Odd
          (clk,
           reset,
           enb,
           In_HiD_e,
           Out_HiD_e);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_HiD_e;  // ufix16_En23
  output  signed [15:0] Out_HiD_e;  // sfix16_En23


  wire [15:0] HiD_1_out1;  // ufix16_En16
  reg [15:0] HiD_1_out1_1;  // ufix16_En16
  reg [15:0] In_HiD_e_1;  // ufix16_En23
  wire [31:0] Multiply_mul_temp;  // ufix32_En39
  wire [15:0] Multiply_out1;  // ufix16_En24
  reg [15:0] Multiply_out1_1;  // ufix16_En24
  wire [15:0] HiD_3_out1;  // ufix16_En18
  reg [15:0] HiD_3_out1_1;  // ufix16_En18
  reg [15:0] Rate_Transition_out1;  // ufix16_En23
  wire [31:0] Multiply1_mul_temp;  // ufix32_En41
  wire [15:0] Multiply1_out1;  // ufix16_En26
  reg [15:0] Multiply1_out1_1;  // ufix16_En26
  wire signed [15:0] HiD_5_out1;  // sfix16_En19
  reg signed [15:0] HiD_5_out1_1;  // sfix16_En19
  reg [15:0] Rate_Transition1_out1;  // ufix16_En23
  wire signed [16:0] Multiply2_cast;  // sfix17_En23
  wire signed [32:0] Multiply2_mul_temp;  // sfix33_En42
  wire signed [31:0] Multiply2_cast_1;  // sfix32_En42
  wire signed [15:0] Multiply2_out1;  // sfix16_En15
  reg signed [15:0] Multiply2_out1_1;  // sfix16_En15
  wire signed [15:0] HiD_7_out1;  // sfix16_En22
  reg signed [15:0] HiD_7_out1_1;  // sfix16_En22
  reg [15:0] Rate_Transition2_out1;  // ufix16_En23
  wire signed [16:0] Multiply3_cast;  // sfix17_En23
  wire signed [32:0] Multiply3_mul_temp;  // sfix33_En45
  wire signed [31:0] Multiply3_cast_1;  // sfix32_En45
  wire signed [15:0] Multiply3_out1;  // sfix16_En15
  reg signed [15:0] Multiply3_out1_1;  // sfix16_En15
  wire [15:0] HiD_9_out1;  // ufix16_En24
  reg [15:0] HiD_9_out1_1;  // ufix16_En24
  reg [15:0] Rate_Transition3_out1;  // ufix16_En23
  wire [31:0] Multiply4_mul_temp;  // ufix32_En47
  wire [15:0] Multiply4_out1;  // ufix16_En31
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En31 [2]
  wire [15:0] Multiply4_out1_1;  // ufix16_En31
  wire signed [15:0] Add3_add_cast;  // sfix16_En30
  wire signed [15:0] Add3_add_cast_1;  // sfix16_En30
  wire signed [15:0] Add3_out1;  // sfix16_En30
  reg signed [15:0] Delay4_out1;  // sfix16_En30
  wire signed [15:0] Add2_add_cast;  // sfix16_En27
  wire signed [15:0] Add2_add_cast_1;  // sfix16_En27
  wire signed [15:0] Add2_out1;  // sfix16_En27
  reg signed [15:0] Delay2_out1;  // sfix16_En27
  wire signed [15:0] Add1_add_cast;  // sfix16_En25
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En25
  wire signed [15:0] Add1_out1;  // sfix16_En25
  reg signed [15:0] Delay3_out1;  // sfix16_En25
  wire signed [15:0] Add_add_cast;  // sfix16_En23
  wire signed [15:0] Add_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add_out1;  // sfix16_En23


  assign HiD_1_out1 = 16'b1001101010010101;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiD_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_1_out1_1 <= HiD_1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiD_e_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiD_e_1 <= In_HiD_e;
        end
      end
    end


  assign Multiply_mul_temp = HiD_1_out1_1 * In_HiD_e_1;
  assign Multiply_out1 = Multiply_mul_temp[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign HiD_3_out1 = 16'b1000110111000000;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiD_3_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_3_out1_1 <= HiD_3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiD_e_1;
        end
      end
    end


  assign Multiply1_mul_temp = HiD_3_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[30:15];


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Multiply1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply1_out1_1 <= Multiply1_out1;
        end
      end
    end



  assign HiD_5_out1 = 16'sb1011110111110110;


  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        HiD_5_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_5_out1_1 <= HiD_5_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        Rate_Transition1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition1_out1 <= Rate_Transition_out1;
        end
      end
    end


  assign Multiply2_cast = {1'b0, Rate_Transition1_out1};
  assign Multiply2_mul_temp = HiD_5_out1_1 * Multiply2_cast;
  assign Multiply2_cast_1 = Multiply2_mul_temp[31:0];
  assign Multiply2_out1 = {{11{Multiply2_cast_1[31]}}, Multiply2_cast_1[31:27]};


  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Multiply2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply2_out1_1 <= Multiply2_out1;
        end
      end
    end



  assign HiD_7_out1 = 16'sb1001100110111101;


  always @(posedge clk)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        HiD_7_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_7_out1_1 <= HiD_7_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        Rate_Transition2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition2_out1 <= Rate_Transition1_out1;
        end
      end
    end


  assign Multiply3_cast = {1'b0, Rate_Transition2_out1};
  assign Multiply3_mul_temp = HiD_7_out1_1 * Multiply3_cast;
  assign Multiply3_cast_1 = Multiply3_mul_temp[31:0];
  assign Multiply3_out1 = {{14{Multiply3_cast_1[31]}}, Multiply3_cast_1[31:30]};


  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Multiply3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply3_out1_1 <= Multiply3_out1;
        end
      end
    end



  assign HiD_9_out1 = 16'b1101101010011100;


  always @(posedge clk)
    begin : HwModeRegister8_process
      if (reset == 1'b1) begin
        HiD_9_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_9_out1_1 <= HiD_9_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister9_process
      if (reset == 1'b1) begin
        Rate_Transition3_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition3_out1 <= Rate_Transition2_out1;
        end
      end
    end



  assign Multiply4_mul_temp = HiD_9_out1_1 * Rate_Transition3_out1;
  assign Multiply4_out1 = Multiply4_mul_temp[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply4_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply4_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add3_add_cast = {Multiply3_out1_1[0], 15'b000000000000000};
  assign Add3_add_cast_1 = {1'b0, Multiply4_out1_1[15:1]};
  assign Add3_out1 = Add3_add_cast + Add3_add_cast_1;


  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Add3_out1;
        end
      end
    end


  assign Add2_add_cast = {Multiply2_out1_1[3:0], 12'b000000000000};
  assign Add2_add_cast_1 = {{3{Delay4_out1[15]}}, Delay4_out1[15:3]};
  assign Add2_out1 = Add2_add_cast + Add2_add_cast_1;


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Add2_out1;
        end
      end
    end


  assign Add1_add_cast = {1'b0, Multiply1_out1_1[15:1]};
  assign Add1_add_cast_1 = {{2{Delay2_out1[15]}}, Delay2_out1[15:2]};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add1_out1;
        end
      end
    end


  assign Add_add_cast = {1'b0, Multiply_out1_1[15:1]};
  assign Add_add_cast_1 = {{2{Delay3_out1[15]}}, Delay3_out1[15:2]};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  assign Out_HiD_e = Add_out1;

endmodule  // HiD_Odd

