// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\db5_2level_final_hdl\alpha1st_Level_Recon.v
// Created: 2024-04-17 05:55:27
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: alpha1st_Level_Recon
// Source Path: db5_2level_final_hdl/DWT_db5_2level/1st_Level_Recon
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module alpha1st_Level_Recon
          (clk,
           reset,
           enb,
           In_HiD,
           In_LoD,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiD;  // sfix16_En27
  input   signed [15:0] In_LoD;  // sfix16_En23
  output  signed [15:0] Out;  // sfix16_En23


  wire [15:0] kconst;  // ufix16_En15
  reg [15:0] kconst_1;  // ufix16_En15
  wire signed [15:0] HiR_Even_out1;  // sfix16_En27
  wire signed [15:0] LoR_Even_out1;  // sfix16_En24
  reg signed [15:0] delayMatch_reg [0:6];  // sfix16 [7]
  wire signed [15:0] delayMatch_reg_next [0:6];  // sfix16_En24 [7]
  wire signed [15:0] LoR_Even_out1_1;  // sfix16_En24
  wire signed [15:0] Add_add_cast;  // sfix16_En24
  wire signed [15:0] Add_out1;  // sfix16_En24
  wire signed [15:0] HiR_Odd_out1;  // sfix16_En27
  wire signed [15:0] LoR_Odd_out1;  // sfix16_En24
  reg signed [15:0] delayMatch1_reg [0:6];  // sfix16 [7]
  wire signed [15:0] delayMatch1_reg_next [0:6];  // sfix16_En24 [7]
  wire signed [15:0] LoR_Odd_out1_1;  // sfix16_En24
  wire signed [15:0] Add1_add_cast;  // sfix16_En24
  wire signed [15:0] Add1_out1;  // sfix16_En24
  reg signed [15:0] Delay2_out1;  // sfix16_En24
  wire signed [15:0] Add2_add_cast;  // sfix16_En23
  wire signed [15:0] Add2_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add2_out1;  // sfix16_En23
  reg signed [15:0] Add2_out1_1;  // sfix16_En23
  wire signed [16:0] Gain_cast;  // sfix17_En15
  wire signed [32:0] Gain_mul_temp;  // sfix33_En38
  wire signed [31:0] Gain_cast_1;  // sfix32_En38
  wire signed [15:0] Gain_out1;  // sfix16_En23
  reg signed [15:0] Gain_out1_1;  // sfix16_En23


  assign kconst = 16'b1000000000001111;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  HiR_Even u_HiR_Even (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_HiR_e(In_HiD),  // sfix16_En27
                       .Out_HiR_e(HiR_Even_out1)  // sfix16_En27
                       );
  LoR_Even u_LoR_Even (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_LoR_e(In_LoD),  // sfix16_En23
                       .Out_LoR_e(LoR_Even_out1)  // sfix16_En24
                       );
  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
        delayMatch_reg[2] <= 16'sb0000000000000000;
        delayMatch_reg[3] <= 16'sb0000000000000000;
        delayMatch_reg[4] <= 16'sb0000000000000000;
        delayMatch_reg[5] <= 16'sb0000000000000000;
        delayMatch_reg[6] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
        end
      end
    end

  assign LoR_Even_out1_1 = delayMatch_reg[6];
  assign delayMatch_reg_next[0] = LoR_Even_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];



  assign Add_add_cast = {{3{HiR_Even_out1[15]}}, HiR_Even_out1[15:3]};
  assign Add_out1 = Add_add_cast + LoR_Even_out1_1;


  HiR_Odd u_HiR_Odd (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .In_HiR_o(In_HiD),  // sfix16_En27
                     .Out_HiR_o(HiR_Odd_out1)  // sfix16_En27
                     );
  LoR_Odd u_LoR_Odd (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .In_LoR_o(In_LoD),  // sfix16_En23
                     .Out_LoR_o(LoR_Odd_out1)  // sfix16_En24
                     );
  always @(posedge clk)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 16'sb0000000000000000;
        delayMatch1_reg[1] <= 16'sb0000000000000000;
        delayMatch1_reg[2] <= 16'sb0000000000000000;
        delayMatch1_reg[3] <= 16'sb0000000000000000;
        delayMatch1_reg[4] <= 16'sb0000000000000000;
        delayMatch1_reg[5] <= 16'sb0000000000000000;
        delayMatch1_reg[6] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
          delayMatch1_reg[3] <= delayMatch1_reg_next[3];
          delayMatch1_reg[4] <= delayMatch1_reg_next[4];
          delayMatch1_reg[5] <= delayMatch1_reg_next[5];
          delayMatch1_reg[6] <= delayMatch1_reg_next[6];
        end
      end
    end

  assign LoR_Odd_out1_1 = delayMatch1_reg[6];
  assign delayMatch1_reg_next[0] = LoR_Odd_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];
  assign delayMatch1_reg_next[4] = delayMatch1_reg[3];
  assign delayMatch1_reg_next[5] = delayMatch1_reg[4];
  assign delayMatch1_reg_next[6] = delayMatch1_reg[5];



  assign Add1_add_cast = {{3{HiR_Odd_out1[15]}}, HiR_Odd_out1[15:3]};
  assign Add1_out1 = Add1_add_cast + LoR_Odd_out1_1;


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Add1_out1;
        end
      end
    end


  assign Add2_add_cast = {Add_out1[15], Add_out1[15:1]};
  assign Add2_add_cast_1 = {Delay2_out1[15], Delay2_out1[15:1]};
  assign Add2_out1 = Add2_add_cast + Add2_add_cast_1;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Add2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Add2_out1_1 <= Add2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Add2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end


  assign Out = Gain_out1_1;

endmodule  // alpha1st_Level_Recon

