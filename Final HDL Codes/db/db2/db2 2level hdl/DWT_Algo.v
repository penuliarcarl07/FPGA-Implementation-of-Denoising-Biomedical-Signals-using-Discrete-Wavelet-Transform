// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\db2_level2_final_hdl_2\db2_level2_final_hdl_2.v
// Created: 2024-04-08 15:01:28
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.26757e-05
// Target subsystem base rate: 2.26757e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2.26757e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        2.26757e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: db2_level2_final_hdl_2
// Source Path: db2_level2_final_hdl_2
// Hierarchy Level: 0
// 
// -------------------------------------------------------------
module DWT_Algo
          (clk,
           reset,
           clk_enable,
           In_E,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [15:0] In_E;  // ufix16_En24
  output  ce_out;
  output  signed [15:0] Out1;  // sfix16_En23


  wire enb;
  wire enb_1_30_1;
  wire enb_1_30_0;
  wire enb_1_30_4;
  wire enb_1_1_1;
  wire signed [15:0] alpha1st_Level_Decomp_out1;  // sfix16_En25
  wire signed [15:0] alpha1st_Level_Decomp_out2;  // sfix16_En23
  reg signed [15:0] Delay_reg [0:5];  // sfix16 [6]
  wire signed [15:0] Delay_reg_next [0:5];  // sfix16_En25 [6]
  wire signed [15:0] Delay_out1;  // sfix16_En25
  wire signed [15:0] alpha1st_Level_Decomp1_out1;  // sfix16_En27
  wire [15:0] alpha1st_Level_Decomp1_out2;  // ufix16_En24
  wire [15:0] Threshold_Estimator_out1;  // ufix16_En27
  wire signed [15:0] Soft_Thresholding_out1;  // sfix16_En27
  wire signed [15:0] Soft_Thresholding1_out1;  // sfix16_En28
  wire [15:0] alpha1st_Level_Recon_out1;  // ufix16_En24
  wire signed [15:0] alpha1st_Level_Recon1_out1;  // sfix16_En23


  DWT_Algo_tc u_DWT_Algo_tc (.clk(clk),
                             .reset(reset),
                             .clk_enable(clk_enable),
                             .enb(enb),
                             .enb_1_1_1(enb_1_1_1),
                             .enb_1_30_0(enb_1_30_0),
                             .enb_1_30_1(enb_1_30_1),
                             .enb_1_30_4(enb_1_30_4)
                             );

  alpha1st_Level_Decomp u_1st_Level_Decomp (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .enb_1_30_1(enb_1_30_1),
                                            .enb_1_30_0(enb_1_30_0),
                                            .In_E(In_E),  // ufix16_En24
                                            .Out_HiD(alpha1st_Level_Decomp_out1),  // sfix16_En25
                                            .Out_LoD(alpha1st_Level_Decomp_out2)  // sfix16_En23
                                            );
  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 16'sb0000000000000000;
        Delay_reg[1] <= 16'sb0000000000000000;
        Delay_reg[2] <= 16'sb0000000000000000;
        Delay_reg[3] <= 16'sb0000000000000000;
        Delay_reg[4] <= 16'sb0000000000000000;
        Delay_reg[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
          Delay_reg[2] <= Delay_reg_next[2];
          Delay_reg[3] <= Delay_reg_next[3];
          Delay_reg[4] <= Delay_reg_next[4];
          Delay_reg[5] <= Delay_reg_next[5];
        end
      end
    end

  assign Delay_out1 = Delay_reg[5];
  assign Delay_reg_next[0] = alpha1st_Level_Decomp_out1;
  assign Delay_reg_next[1] = Delay_reg[0];
  assign Delay_reg_next[2] = Delay_reg[1];
  assign Delay_reg_next[3] = Delay_reg[2];
  assign Delay_reg_next[4] = Delay_reg[3];
  assign Delay_reg_next[5] = Delay_reg[4];


  alpha1st_Level_Decomp1 u_1st_Level_Decomp1 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .enb_1_30_1(enb_1_30_1),
                                              .enb_1_30_0(enb_1_30_0),
                                              .enb_1_30_4(enb_1_30_4),
                                              .In_E(alpha1st_Level_Decomp_out2),  // sfix16_En23
                                              .Out_HiD(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                              .Out_LoD(alpha1st_Level_Decomp1_out2)  // ufix16_En24
                                              );
  Threshold_Estimator u_Threshold_Estimator (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .Signal_w(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                             .Threshold(Threshold_Estimator_out1)  // ufix16_En27
                                             );
  Soft_Thresholding u_Soft_Thresholding (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .Signal_w(Delay_out1),  // sfix16_En25
                                         .Threshold1(Threshold_Estimator_out1),  // ufix16_En27
                                         .New_Threshold(Soft_Thresholding_out1)  // sfix16_En27
                                         );
  Soft_Thresholding1 u_Soft_Thresholding1 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .Signal_w(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                           .Threshold1(Threshold_Estimator_out1),  // ufix16_En27
                                           .New_Threshold(Soft_Thresholding1_out1)  // sfix16_En28
                                           );
  alpha1st_Level_Recon u_1st_Level_Recon (.clk(clk),
                                          .reset(reset),
                                          .enb(enb),
                                          .In_HiD(Soft_Thresholding1_out1),  // sfix16_En28
                                          .In_LoD(alpha1st_Level_Decomp1_out2),  // ufix16_En24
                                          .Out(alpha1st_Level_Recon_out1)  // ufix16_En24
                                          );
  alpha1st_Level_Recon1 u_1st_Level_Recon1 (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .In_HiD(Soft_Thresholding_out1),  // sfix16_En27
                                            .In_LoD(alpha1st_Level_Recon_out1),  // ufix16_En24
                                            .Out(alpha1st_Level_Recon1_out1)  // sfix16_En23
                                            );
  assign Out1 = alpha1st_Level_Recon1_out1;

  assign ce_out = enb_1_1_1;

endmodule  // DWT_Algo

`timescale 1 ns / 1 ns

module DWT_Algo_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_1_1,
           enb_1_30_0,
           enb_1_30_1,
           enb_1_30_4);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_1_1;
  output  enb_1_30_0;
  output  enb_1_30_1;
  output  enb_1_30_4;


  reg [4:0] count30;  // ufix5
  wire phase_all;
  reg  phase_0;
  wire phase_0_tmp;
  reg  phase_1;
  wire phase_1_tmp;
  reg  phase_4;
  wire phase_4_tmp;


  always @ (posedge clk)
    begin: Counter30
      if (reset == 1'b1) begin
        count30 <= 5'b00001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count30 >= 5'b11101) begin
            count30 <= 5'b00000;
          end
          else begin
            count30 <= count30 + 5'b00001;
          end
        end
      end
    end // Counter30

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process1
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count30 == 5'b11101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process2
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count30 == 5'b00000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process3
      if (reset == 1'b1) begin
        phase_4 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_4 <= phase_4_tmp;
        end
      end
    end // temp_process3

  assign  phase_4_tmp = (count30 == 5'b00011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb =  phase_all & clk_enable;

  assign enb_1_1_1 =  phase_all & clk_enable;

  assign enb_1_30_0 =  phase_0 & clk_enable;

  assign enb_1_30_1 =  phase_1 & clk_enable;

  assign enb_1_30_4 =  phase_4 & clk_enable;


endmodule  // DWT_Algo_tc

`timescale 1 ns / 1 ns

module db2_level2_final_hdl_2
          (clk,
           reset,
           clk_enable,
           In_E,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [15:0] In_E;  // ufix16_En24
  output  ce_out;
  output  signed [15:0] Out1;  // sfix16_En23


  wire enb;
  wire enb_1_30_1;
  wire enb_1_30_0;
  wire enb_1_30_4;
  wire enb_1_1_1;
  wire signed [15:0] alpha1st_Level_Decomp_out1;  // sfix16_En25
  wire signed [15:0] alpha1st_Level_Decomp_out2;  // sfix16_En23
  reg signed [15:0] Delay_reg [0:5];  // sfix16 [6]
  wire signed [15:0] Delay_reg_next [0:5];  // sfix16_En25 [6]
  wire signed [15:0] Delay_out1;  // sfix16_En25
  wire signed [15:0] alpha1st_Level_Decomp1_out1;  // sfix16_En27
  wire [15:0] alpha1st_Level_Decomp1_out2;  // ufix16_En24
  wire [15:0] Threshold_Estimator_out1;  // ufix16_En27
  wire signed [15:0] Soft_Thresholding_out1;  // sfix16_En27
  wire signed [15:0] Soft_Thresholding1_out1;  // sfix16_En28
  wire [15:0] alpha1st_Level_Recon_out1;  // ufix16_En24
  wire signed [15:0] alpha1st_Level_Recon1_out1;  // sfix16_En23


  db2_level2_final_hdl_2_tc u_db2_level2_final_hdl_2_tc (.clk(clk),
                                                         .reset(reset),
                                                         .clk_enable(clk_enable),
                                                         .enb(enb),
                                                         .enb_1_1_1(enb_1_1_1),
                                                         .enb_1_30_0(enb_1_30_0),
                                                         .enb_1_30_1(enb_1_30_1),
                                                         .enb_1_30_4(enb_1_30_4)
                                                         );

  alpha1st_Level_Decomp u_1st_Level_Decomp (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .enb_1_30_1(enb_1_30_1),
                                            .enb_1_30_0(enb_1_30_0),
                                            .In_E(In_E),  // ufix16_En24
                                            .Out_HiD(alpha1st_Level_Decomp_out1),  // sfix16_En25
                                            .Out_LoD(alpha1st_Level_Decomp_out2)  // sfix16_En23
                                            );
  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 16'sb0000000000000000;
        Delay_reg[1] <= 16'sb0000000000000000;
        Delay_reg[2] <= 16'sb0000000000000000;
        Delay_reg[3] <= 16'sb0000000000000000;
        Delay_reg[4] <= 16'sb0000000000000000;
        Delay_reg[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
          Delay_reg[2] <= Delay_reg_next[2];
          Delay_reg[3] <= Delay_reg_next[3];
          Delay_reg[4] <= Delay_reg_next[4];
          Delay_reg[5] <= Delay_reg_next[5];
        end
      end
    end

  assign Delay_out1 = Delay_reg[5];
  assign Delay_reg_next[0] = alpha1st_Level_Decomp_out1;
  assign Delay_reg_next[1] = Delay_reg[0];
  assign Delay_reg_next[2] = Delay_reg[1];
  assign Delay_reg_next[3] = Delay_reg[2];
  assign Delay_reg_next[4] = Delay_reg[3];
  assign Delay_reg_next[5] = Delay_reg[4];


  alpha1st_Level_Decomp1 u_1st_Level_Decomp1 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .enb_1_30_1(enb_1_30_1),
                                              .enb_1_30_0(enb_1_30_0),
                                              .enb_1_30_4(enb_1_30_4),
                                              .In_E(alpha1st_Level_Decomp_out2),  // sfix16_En23
                                              .Out_HiD(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                              .Out_LoD(alpha1st_Level_Decomp1_out2)  // ufix16_En24
                                              );
  Threshold_Estimator u_Threshold_Estimator (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .Signal_w(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                             .Threshold(Threshold_Estimator_out1)  // ufix16_En27
                                             );
  Soft_Thresholding u_Soft_Thresholding (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .Signal_w(Delay_out1),  // sfix16_En25
                                         .Threshold1(Threshold_Estimator_out1),  // ufix16_En27
                                         .New_Threshold(Soft_Thresholding_out1)  // sfix16_En27
                                         );
  Soft_Thresholding1 u_Soft_Thresholding1 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .Signal_w(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                           .Threshold1(Threshold_Estimator_out1),  // ufix16_En27
                                           .New_Threshold(Soft_Thresholding1_out1)  // sfix16_En28
                                           );
  alpha1st_Level_Recon u_1st_Level_Recon (.clk(clk),
                                          .reset(reset),
                                          .enb(enb),
                                          .In_HiD(Soft_Thresholding1_out1),  // sfix16_En28
                                          .In_LoD(alpha1st_Level_Decomp1_out2),  // ufix16_En24
                                          .Out(alpha1st_Level_Recon_out1)  // ufix16_En24
                                          );
  alpha1st_Level_Recon1 u_1st_Level_Recon1 (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .In_HiD(Soft_Thresholding_out1),  // sfix16_En27
                                            .In_LoD(alpha1st_Level_Recon_out1),  // ufix16_En24
                                            .Out(alpha1st_Level_Recon1_out1)  // sfix16_En23
                                            );
  assign Out1 = alpha1st_Level_Recon1_out1;

  assign ce_out = enb_1_1_1;

endmodule  // db2_level2_final_hdl_2

`timescale 1 ns / 1 ns

module HiD_Even
          (clk,
           reset,
           enb,
           In_HiD_e,
           Out_HiD_e);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_HiD_e;  // ufix16_En24
  output  signed [15:0] Out_HiD_e;  // sfix16_En23


  wire signed [15:0] HiD_0_out1;  // sfix16_En16
  reg signed [15:0] HiD_0_out1_1;  // sfix16_En16
  reg [15:0] In_HiD_e_1;  // ufix16_En24
  wire signed [16:0] Multiply_cast;  // sfix17_En24
  wire signed [32:0] Multiply_mul_temp;  // sfix33_En40
  wire signed [31:0] Multiply_cast_1;  // sfix32_En40
  wire signed [15:0] Multiply_out1;  // sfix16_En15
  reg signed [15:0] Multiply_out1_1;  // sfix16_En15
  wire signed [15:0] HiD_2_out1;  // sfix16_En17
  reg signed [15:0] HiD_2_out1_1;  // sfix16_En17
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire signed [16:0] Multiply1_cast;  // sfix17_En24
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En41
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En15
  wire signed [15:0] Add_add_cast;  // sfix16_En23
  wire signed [15:0] Add_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add_out1;  // sfix16_En23


  assign HiD_0_out1 = 16'sb1000010001011101;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiD_0_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_0_out1_1 <= HiD_0_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiD_e_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiD_e_1 <= In_HiD_e;
        end
      end
    end


  assign Multiply_cast = {1'b0, In_HiD_e_1};
  assign Multiply_mul_temp = HiD_0_out1_1 * Multiply_cast;
  assign Multiply_cast_1 = Multiply_mul_temp[31:0];
  assign Multiply_out1 = {{9{Multiply_cast_1[31]}}, Multiply_cast_1[31:25]};


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign HiD_2_out1 = 16'sb1000110100111101;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiD_2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_2_out1_1 <= HiD_2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiD_e_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, Rate_Transition_out1};
  assign Multiply1_mul_temp = HiD_2_out1_1 * Multiply1_cast;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = {{10{Multiply1_cast_1[31]}}, Multiply1_cast_1[31:26]};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {Multiply_out1_1[7:0], 8'b00000000};
  assign Add_add_cast_1 = {Multiply1_out1_1[7:0], 8'b00000000};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  assign Out_HiD_e = Add_out1;

endmodule  // HiD_Even

`timescale 1 ns / 1 ns

module HiD_Odd
          (clk,
           reset,
           enb,
           In_HiD_o,
           Out_HiD_o);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_HiD_o;  // ufix16_En24
  output  [15:0] Out_HiD_o;  // ufix16_En24


  wire [15:0] HiD_1_out1;  // ufix16_En16
  reg [15:0] HiD_1_out1_1;  // ufix16_En16
  reg [15:0] In_HiD_o_1;  // ufix16_En24
  wire [31:0] Multiply_mul_temp;  // ufix32_En40
  wire [15:0] Multiply_out1;  // ufix16_En24
  reg [15:0] Multiply_out1_1;  // ufix16_En24
  wire signed [15:0] HiD_3_out1;  // sfix16_En17
  reg signed [15:0] HiD_3_out1_1;  // sfix16_En17
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire signed [16:0] Multiply1_cast;  // sfix17_En24
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En41
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En15
  wire signed [15:0] Add_add_cast;  // sfix16_En24
  wire signed [15:0] Add_add_cast_1;  // sfix16_En24
  wire signed [15:0] Add_add_temp;  // sfix16_En24
  wire [15:0] Add_out1;  // ufix16_En24


  assign HiD_1_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiD_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_1_out1_1 <= HiD_1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiD_o_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiD_o_1 <= In_HiD_o;
        end
      end
    end


  assign Multiply_mul_temp = HiD_1_out1_1 * In_HiD_o_1;
  assign Multiply_out1 = Multiply_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign HiD_3_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiD_3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_3_out1_1 <= HiD_3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiD_o_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, Rate_Transition_out1};
  assign Multiply1_mul_temp = HiD_3_out1_1 * Multiply1_cast;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = {{10{Multiply1_cast_1[31]}}, Multiply1_cast_1[31:26]};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = Multiply_out1_1;
  assign Add_add_cast_1 = {Multiply1_out1_1[6:0], 9'b000000000};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp;


  assign Out_HiD_o = Add_out1;

endmodule  // HiD_Odd

`timescale 1 ns / 1 ns

module LoD_Even
          (clk,
           reset,
           enb,
           In_LoD_e,
           Out_LoD_e);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_LoD_e;  // ufix16_En24
  output  signed [15:0] Out_LoD_e;  // sfix16_En23


  wire signed [15:0] LoD_0_out1;  // sfix16_En17
  reg signed [15:0] LoD_0_out1_1;  // sfix16_En17
  reg [15:0] In_LoD_e_1;  // ufix16_En24
  wire signed [16:0] Multiply_cast;  // sfix17_En24
  wire signed [32:0] Multiply_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply_cast_1;  // sfix32_En41
  wire signed [15:0] Multiply_out1;  // sfix16_En15
  reg signed [15:0] Multiply_out1_1;  // sfix16_En15
  wire [15:0] LoD_2_out1;  // ufix16_En16
  reg [15:0] LoD_2_out1_1;  // ufix16_En16
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire [31:0] Multiply1_mul_temp;  // ufix32_En40
  wire [15:0] Multiply1_out1;  // ufix16_En24
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En24 [2]
  wire [15:0] Multiply1_out1_1;  // ufix16_En24
  wire signed [15:0] Add_add_cast;  // sfix16_En23
  wire signed [15:0] Add_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add_out1;  // sfix16_En23


  assign LoD_0_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        LoD_0_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_0_out1_1 <= LoD_0_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoD_e_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoD_e_1 <= In_LoD_e;
        end
      end
    end


  assign Multiply_cast = {1'b0, In_LoD_e_1};
  assign Multiply_mul_temp = LoD_0_out1_1 * Multiply_cast;
  assign Multiply_cast_1 = Multiply_mul_temp[31:0];
  assign Multiply_out1 = {{10{Multiply_cast_1[31]}}, Multiply_cast_1[31:26]};


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign LoD_2_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        LoD_2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_2_out1_1 <= LoD_2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoD_e_1;
        end
      end
    end



  assign Multiply1_mul_temp = LoD_2_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {Multiply_out1_1[7:0], 8'b00000000};
  assign Add_add_cast_1 = {1'b0, Multiply1_out1_1[15:1]};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  assign Out_LoD_e = Add_out1;

endmodule  // LoD_Even

`timescale 1 ns / 1 ns

module LoD_Odd
          (clk,
           reset,
           enb,
           In_LoD_o,
           Out_LoD_o);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_LoD_o;  // ufix16_En24
  output  [15:0] Out_LoD_o;  // ufix16_En24


  wire [15:0] LoD_1_out1;  // ufix16_En18
  reg [15:0] LoD_1_out1_1;  // ufix16_En18
  reg [15:0] In_LoD_o_1;  // ufix16_En24
  wire [31:0] Multiply_mul_temp;  // ufix32_En42
  wire [15:0] Multiply_out1;  // ufix16_En26
  reg [15:0] Multiply_out1_1;  // ufix16_En26
  wire [15:0] LoD_3_out1;  // ufix16_En17
  reg [15:0] LoD_3_out1_1;  // ufix16_En17
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire [31:0] Multiply1_mul_temp;  // ufix32_En41
  wire [15:0] Multiply1_out1;  // ufix16_En25
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En25 [2]
  wire [15:0] Multiply1_out1_1;  // ufix16_En25
  wire [15:0] Add_add_cast;  // ufix16_En24
  wire [15:0] Add_add_cast_1;  // ufix16_En24
  wire [15:0] Add_out1;  // ufix16_En24


  assign LoD_1_out1 = 16'b1110010110000110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        LoD_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_1_out1_1 <= LoD_1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoD_o_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoD_o_1 <= In_LoD_o;
        end
      end
    end


  assign Multiply_mul_temp = LoD_1_out1_1 * In_LoD_o_1;
  assign Multiply_out1 = Multiply_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign LoD_3_out1 = 16'b1111011101000111;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        LoD_3_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_3_out1_1 <= LoD_3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoD_o_1;
        end
      end
    end



  assign Multiply1_mul_temp = LoD_3_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {2'b0, Multiply_out1_1[15:2]};
  assign Add_add_cast_1 = {1'b0, Multiply1_out1_1[15:1]};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  assign Out_LoD_o = Add_out1;

endmodule  // LoD_Odd

`timescale 1 ns / 1 ns

module alpha1st_Level_Decomp
          (clk,
           reset,
           enb,
           enb_1_30_1,
           enb_1_30_0,
           In_E,
           Out_HiD,
           Out_LoD);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_30_1;
  input   enb_1_30_0;
  input   [15:0] In_E;  // ufix16_En24
  output  signed [15:0] Out_HiD;  // sfix16_En25
  output  signed [15:0] Out_LoD;  // sfix16_En23


  wire [15:0] kconst;  // ufix16_En16
  reg [15:0] kconst_1;  // ufix16_En16
  reg [15:0] Downsample4_out1;  // ufix16_En24
  reg [15:0] Downsample4_out1_1;  // ufix16_En24
  reg [15:0] RT_out1;  // ufix16_En24
  wire signed [15:0] HiD_Even_out1;  // sfix16_En23
  reg [15:0] Delay_out1;  // ufix16_En24
  reg [15:0] Downsample2_out1;  // ufix16_En24
  reg [15:0] Downsample2_out1_1;  // ufix16_En24
  reg [15:0] RT1_out1;  // ufix16_En24
  wire [15:0] HiD_Odd_out1;  // ufix16_En24
  wire signed [15:0] Add_add_cast;  // sfix16_En24
  wire signed [15:0] Add_add_cast_1;  // sfix16_En24
  wire signed [15:0] Add_out1;  // sfix16_En24
  reg signed [15:0] Add_out1_1;  // sfix16_En24
  wire signed [16:0] Gain_cast;  // sfix17_En16
  wire signed [32:0] Gain_mul_temp;  // sfix33_En40
  wire signed [31:0] Gain_cast_1;  // sfix32_En40
  wire signed [15:0] Gain_out1;  // sfix16_En25
  reg signed [15:0] Gain_out1_1;  // sfix16_En25
  wire [15:0] kconst_2;  // ufix16_En16
  reg [15:0] kconst_3;  // ufix16_En16
  wire signed [15:0] LoD_Even_out1;  // sfix16_En23
  wire [15:0] LoD_Odd_out1;  // ufix16_En24
  wire signed [15:0] Add1_add_cast;  // sfix16_En22
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En22
  wire signed [15:0] Add1_out1;  // sfix16_En22
  reg signed [15:0] Add1_out1_1;  // sfix16_En22
  wire signed [16:0] Gain1_cast;  // sfix17_En16
  wire signed [32:0] Gain1_mul_temp;  // sfix33_En38
  wire signed [31:0] Gain1_cast_1;  // sfix32_En38
  wire signed [15:0] Gain1_out1;  // sfix16_En23
  reg signed [15:0] Gain1_out1_1;  // sfix16_En23


  assign kconst = 16'b1001100100000100;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample4_output_process
      if (reset == 1'b1) begin
        Downsample4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample4_out1 <= In_E;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Downsample4_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample4_out1_1 <= Downsample4_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT_process
      if (reset == 1'b1) begin
        RT_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT_out1 <= Downsample4_out1_1;
        end
      end
    end


  HiD_Even u_HiD_Even (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_HiD_e(RT_out1),  // ufix16_En24
                       .Out_HiD_e(HiD_Even_out1)  // sfix16_En23
                       );
  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In_E;
        end
      end
    end


  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample2_output_process
      if (reset == 1'b1) begin
        Downsample2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample2_out1 <= Delay_out1;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Downsample2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample2_out1_1 <= Downsample2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT1_process
      if (reset == 1'b1) begin
        RT1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT1_out1 <= Downsample2_out1_1;
        end
      end
    end


  HiD_Odd u_HiD_Odd (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .In_HiD_o(RT1_out1),  // ufix16_En24
                     .Out_HiD_o(HiD_Odd_out1)  // ufix16_En24
                     );
  assign Add_add_cast = {HiD_Even_out1[14:0], 1'b0};
  assign Add_add_cast_1 = HiD_Odd_out1;
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Add_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Add_out1_1 <= Add_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Add_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[30:15];


  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign Out_HiD = Gain_out1_1;

  assign kconst_2 = 16'b1001100100000100;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  LoD_Even u_LoD_Even (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_LoD_e(RT_out1),  // ufix16_En24
                       .Out_LoD_e(LoD_Even_out1)  // sfix16_En23
                       );
  LoD_Odd u_LoD_Odd (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .In_LoD_o(RT1_out1),  // ufix16_En24
                     .Out_LoD_o(LoD_Odd_out1)  // ufix16_En24
                     );
  assign Add1_add_cast = {LoD_Even_out1[15], LoD_Even_out1[15:1]};
  assign Add1_add_cast_1 = {2'b0, LoD_Odd_out1[15:2]};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;


  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Add1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Add1_out1_1 <= Add1_out1;
        end
      end
    end



  assign Gain1_cast = {1'b0, kconst_3};
  assign Gain1_mul_temp = Gain1_cast * Add1_out1_1;
  assign Gain1_cast_1 = Gain1_mul_temp[31:0];
  assign Gain1_out1 = Gain1_cast_1[30:15];


  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Out_LoD = Gain1_out1_1;

endmodule  // alpha1st_Level_Decomp

`timescale 1 ns / 1 ns

module HiD_Even_block
          (clk,
           reset,
           enb,
           In_HiD_e,
           Out_HiD_e);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiD_e;  // sfix16_En23
  output  signed [15:0] Out_HiD_e;  // sfix16_En15


  wire signed [15:0] HiD_0_out1;  // sfix16_En16
  reg signed [15:0] HiD_0_out1_1;  // sfix16_En16
  reg signed [15:0] In_HiD_e_1;  // sfix16_En23
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En39
  wire signed [15:0] Multiply_out1;  // sfix16_En15
  reg signed [15:0] Multiply_out1_1;  // sfix16_En15
  wire signed [15:0] HiD_2_out1;  // sfix16_En17
  reg signed [15:0] HiD_2_out1_1;  // sfix16_En17
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En23
  wire signed [31:0] Multiply1_mul_temp;  // sfix32_En40
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En15
  wire signed [15:0] Add_out1;  // sfix16_En15


  assign HiD_0_out1 = 16'sb1000010001011101;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiD_0_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_0_out1_1 <= HiD_0_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiD_e_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiD_e_1 <= In_HiD_e;
        end
      end
    end


  assign Multiply_mul_temp = HiD_0_out1_1 * In_HiD_e_1;
  assign Multiply_out1 = {{8{Multiply_mul_temp[31]}}, Multiply_mul_temp[31:24]};


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign HiD_2_out1 = 16'sb1000110100111101;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiD_2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_2_out1_1 <= HiD_2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiD_e_1;
        end
      end
    end



  assign Multiply1_mul_temp = HiD_2_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = {{9{Multiply1_mul_temp[31]}}, Multiply1_mul_temp[31:25]};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_out1 = Multiply_out1_1 + Multiply1_out1_1;


  assign Out_HiD_e = Add_out1;

endmodule  // HiD_Even_block

`timescale 1 ns / 1 ns

module HiD_Odd_block
          (clk,
           reset,
           enb,
           In_HiD_o,
           Out_HiD_o);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiD_o;  // sfix16_En23
  output  [15:0] Out_HiD_o;  // ufix16_En25


  wire [15:0] HiD_1_out1;  // ufix16_En16
  reg [15:0] HiD_1_out1_1;  // ufix16_En16
  reg signed [15:0] In_HiD_o_1;  // sfix16_En23
  wire signed [16:0] Multiply_cast;  // sfix17_En16
  wire signed [32:0] Multiply_mul_temp;  // sfix33_En39
  wire signed [31:0] Multiply_cast_1;  // sfix32_En39
  wire [15:0] Multiply_out1;  // ufix16_En24
  reg [15:0] Multiply_out1_1;  // ufix16_En24
  wire signed [15:0] HiD_3_out1;  // sfix16_En17
  reg signed [15:0] HiD_3_out1_1;  // sfix16_En17
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En23
  wire signed [31:0] Multiply1_mul_temp;  // sfix32_En40
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En15
  wire signed [15:0] Add_add_cast;  // sfix16_En25
  wire signed [15:0] Add_add_cast_1;  // sfix16_En25
  wire signed [15:0] Add_add_temp;  // sfix16_En25
  wire [15:0] Add_out1;  // ufix16_En25


  assign HiD_1_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiD_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_1_out1_1 <= HiD_1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiD_o_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiD_o_1 <= In_HiD_o;
        end
      end
    end


  assign Multiply_cast = {1'b0, HiD_1_out1_1};
  assign Multiply_mul_temp = Multiply_cast * In_HiD_o_1;
  assign Multiply_cast_1 = Multiply_mul_temp[31:0];
  assign Multiply_out1 = Multiply_cast_1[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign HiD_3_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiD_3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiD_3_out1_1 <= HiD_3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiD_o_1;
        end
      end
    end



  assign Multiply1_mul_temp = HiD_3_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = {{9{Multiply1_mul_temp[31]}}, Multiply1_mul_temp[31:25]};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = $signed({Multiply_out1_1[14:0], 1'b0});
  assign Add_add_cast_1 = {Multiply1_out1_1[5:0], 10'b0000000000};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp;


  assign Out_HiD_o = Add_out1;

endmodule  // HiD_Odd_block

`timescale 1 ns / 1 ns

module LoD_Even_block
          (clk,
           reset,
           enb,
           In_LoD_e,
           Out_LoD_e);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_LoD_e;  // sfix16_En23
  output  signed [15:0] Out_LoD_e;  // sfix16_En24


  wire signed [15:0] LoD_0_out1;  // sfix16_En17
  reg signed [15:0] LoD_0_out1_1;  // sfix16_En17
  reg signed [15:0] In_LoD_e_1;  // sfix16_En23
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En40
  wire signed [15:0] Multiply_out1;  // sfix16_En15
  reg signed [15:0] Multiply_out1_1;  // sfix16_En15
  wire [15:0] LoD_2_out1;  // ufix16_En16
  reg [15:0] LoD_2_out1_1;  // ufix16_En16
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En23
  wire signed [16:0] Multiply1_cast;  // sfix17_En16
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En39
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En39
  wire [15:0] Multiply1_out1;  // ufix16_En24
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En24 [2]
  wire [15:0] Multiply1_out1_1;  // ufix16_En24
  wire signed [15:0] Add_add_cast;  // sfix16_En24
  wire signed [15:0] Add_add_cast_1;  // sfix16_En24
  wire signed [15:0] Add_out1;  // sfix16_En24


  assign LoD_0_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        LoD_0_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_0_out1_1 <= LoD_0_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoD_e_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoD_e_1 <= In_LoD_e;
        end
      end
    end


  assign Multiply_mul_temp = LoD_0_out1_1 * In_LoD_e_1;
  assign Multiply_out1 = {{9{Multiply_mul_temp[31]}}, Multiply_mul_temp[31:25]};


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign LoD_2_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        LoD_2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_2_out1_1 <= LoD_2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoD_e_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, LoD_2_out1_1};
  assign Multiply1_mul_temp = Multiply1_cast * Rate_Transition_out1;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = Multiply1_cast_1[30:15];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {Multiply_out1_1[6:0], 9'b000000000};
  assign Add_add_cast_1 = Multiply1_out1_1;
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  assign Out_LoD_e = Add_out1;

endmodule  // LoD_Even_block

`timescale 1 ns / 1 ns

module LoD_Odd_block
          (clk,
           reset,
           enb,
           In_LoD_o,
           Out_LoD_o);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_LoD_o;  // sfix16_En23
  output  [15:0] Out_LoD_o;  // ufix16_En25


  wire [15:0] LoD_1_out1;  // ufix16_En18
  reg [15:0] LoD_1_out1_1;  // ufix16_En18
  reg signed [15:0] In_LoD_o_1;  // sfix16_En23
  wire signed [16:0] Multiply_cast;  // sfix17_En18
  wire signed [32:0] Multiply_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply_cast_1;  // sfix32_En41
  wire [15:0] Multiply_out1;  // ufix16_En26
  reg [15:0] Multiply_out1_1;  // ufix16_En26
  wire [15:0] LoD_3_out1;  // ufix16_En17
  reg [15:0] LoD_3_out1_1;  // ufix16_En17
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En23
  wire signed [16:0] Multiply1_cast;  // sfix17_En17
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En40
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En40
  wire [15:0] Multiply1_out1;  // ufix16_En25
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En25 [2]
  wire [15:0] Multiply1_out1_1;  // ufix16_En25
  wire [15:0] Add_add_cast;  // ufix16_En25
  wire [15:0] Add_out1;  // ufix16_En25


  assign LoD_1_out1 = 16'b1110010110000110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        LoD_1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_1_out1_1 <= LoD_1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoD_o_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoD_o_1 <= In_LoD_o;
        end
      end
    end


  assign Multiply_cast = {1'b0, LoD_1_out1_1};
  assign Multiply_mul_temp = Multiply_cast * In_LoD_o_1;
  assign Multiply_cast_1 = Multiply_mul_temp[31:0];
  assign Multiply_out1 = Multiply_cast_1[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign LoD_3_out1 = 16'b1111011101000111;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        LoD_3_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          LoD_3_out1_1 <= LoD_3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoD_o_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, LoD_3_out1_1};
  assign Multiply1_mul_temp = Multiply1_cast * Rate_Transition_out1;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = Multiply1_cast_1[30:15];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {1'b0, Multiply_out1_1[15:1]};
  assign Add_out1 = Add_add_cast + Multiply1_out1_1;


  assign Out_LoD_o = Add_out1;

endmodule  // LoD_Odd_block

`timescale 1 ns / 1 ns

module alpha1st_Level_Decomp1
          (clk,
           reset,
           enb,
           enb_1_30_1,
           enb_1_30_0,
           enb_1_30_4,
           In_E,
           Out_HiD,
           Out_LoD);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_30_1;
  input   enb_1_30_0;
  input   enb_1_30_4;
  input   signed [15:0] In_E;  // sfix16_En23
  output  signed [15:0] Out_HiD;  // sfix16_En27
  output  [15:0] Out_LoD;  // ufix16_En24


  wire [15:0] kconst;  // ufix16_En16
  reg [15:0] kconst_1;  // ufix16_En16
  reg signed [15:0] In_E_1;  // sfix16_En23
  reg signed [15:0] reduced_reg [0:25];  // sfix16 [26]
  wire signed [15:0] reduced_reg_next [0:25];  // sfix16_En23 [26]
  wire signed [15:0] In_E_2;  // sfix16_En23
  reg signed [15:0] Downsample4_out1;  // sfix16_En23
  reg signed [15:0] Downsample4_out1_1;  // sfix16_En23
  reg signed [15:0] RT_out1;  // sfix16_En23
  wire signed [15:0] HiD_Even_out1;  // sfix16_En15
  reg signed [15:0] Downsample2_ds_out;  // sfix16_En23
  reg signed [15:0] Downsample2_out1;  // sfix16_En23
  reg signed [15:0] Downsample2_out1_1;  // sfix16_En23
  reg signed [15:0] RT1_out1;  // sfix16_En23
  wire [15:0] HiD_Odd_out1;  // ufix16_En25
  wire signed [15:0] Add_add_cast;  // sfix16_En26
  wire signed [15:0] Add_add_cast_1;  // sfix16_En26
  wire signed [15:0] Add_out1;  // sfix16_En26
  reg signed [15:0] Add_out1_1;  // sfix16_En26
  wire signed [16:0] Gain_cast;  // sfix17_En16
  wire signed [32:0] Gain_mul_temp;  // sfix33_En42
  wire signed [31:0] Gain_cast_1;  // sfix32_En42
  wire signed [15:0] Gain_out1;  // sfix16_En27
  reg signed [15:0] Gain_out1_1;  // sfix16_En27
  wire [15:0] kconst_2;  // ufix16_En16
  reg [15:0] kconst_3;  // ufix16_En16
  wire signed [15:0] LoD_Even_out1;  // sfix16_En24
  wire [15:0] LoD_Odd_out1;  // ufix16_En25
  wire signed [15:0] Add1_add_cast;  // sfix16_En24
  wire signed [15:0] Add1_add_temp;  // sfix16_En24
  wire [15:0] Add1_out1;  // ufix16_En24
  reg [15:0] Add1_out1_1;  // ufix16_En24
  wire [31:0] Gain1_mul_temp;  // ufix32_En40
  wire [15:0] Gain1_out1;  // ufix16_En24
  reg [15:0] Gain1_out1_1;  // ufix16_En24


  assign kconst = 16'b1001100100000100;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_E_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_E_1 <= In_E;
        end
      end
    end


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'sb0000000000000000;
        reduced_reg[1] <= 16'sb0000000000000000;
        reduced_reg[2] <= 16'sb0000000000000000;
        reduced_reg[3] <= 16'sb0000000000000000;
        reduced_reg[4] <= 16'sb0000000000000000;
        reduced_reg[5] <= 16'sb0000000000000000;
        reduced_reg[6] <= 16'sb0000000000000000;
        reduced_reg[7] <= 16'sb0000000000000000;
        reduced_reg[8] <= 16'sb0000000000000000;
        reduced_reg[9] <= 16'sb0000000000000000;
        reduced_reg[10] <= 16'sb0000000000000000;
        reduced_reg[11] <= 16'sb0000000000000000;
        reduced_reg[12] <= 16'sb0000000000000000;
        reduced_reg[13] <= 16'sb0000000000000000;
        reduced_reg[14] <= 16'sb0000000000000000;
        reduced_reg[15] <= 16'sb0000000000000000;
        reduced_reg[16] <= 16'sb0000000000000000;
        reduced_reg[17] <= 16'sb0000000000000000;
        reduced_reg[18] <= 16'sb0000000000000000;
        reduced_reg[19] <= 16'sb0000000000000000;
        reduced_reg[20] <= 16'sb0000000000000000;
        reduced_reg[21] <= 16'sb0000000000000000;
        reduced_reg[22] <= 16'sb0000000000000000;
        reduced_reg[23] <= 16'sb0000000000000000;
        reduced_reg[24] <= 16'sb0000000000000000;
        reduced_reg[25] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
          reduced_reg[10] <= reduced_reg_next[10];
          reduced_reg[11] <= reduced_reg_next[11];
          reduced_reg[12] <= reduced_reg_next[12];
          reduced_reg[13] <= reduced_reg_next[13];
          reduced_reg[14] <= reduced_reg_next[14];
          reduced_reg[15] <= reduced_reg_next[15];
          reduced_reg[16] <= reduced_reg_next[16];
          reduced_reg[17] <= reduced_reg_next[17];
          reduced_reg[18] <= reduced_reg_next[18];
          reduced_reg[19] <= reduced_reg_next[19];
          reduced_reg[20] <= reduced_reg_next[20];
          reduced_reg[21] <= reduced_reg_next[21];
          reduced_reg[22] <= reduced_reg_next[22];
          reduced_reg[23] <= reduced_reg_next[23];
          reduced_reg[24] <= reduced_reg_next[24];
          reduced_reg[25] <= reduced_reg_next[25];
        end
      end
    end

  assign In_E_2 = reduced_reg[25];
  assign reduced_reg_next[0] = In_E_1;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];
  assign reduced_reg_next[10] = reduced_reg[9];
  assign reduced_reg_next[11] = reduced_reg[10];
  assign reduced_reg_next[12] = reduced_reg[11];
  assign reduced_reg_next[13] = reduced_reg[12];
  assign reduced_reg_next[14] = reduced_reg[13];
  assign reduced_reg_next[15] = reduced_reg[14];
  assign reduced_reg_next[16] = reduced_reg[15];
  assign reduced_reg_next[17] = reduced_reg[16];
  assign reduced_reg_next[18] = reduced_reg[17];
  assign reduced_reg_next[19] = reduced_reg[18];
  assign reduced_reg_next[20] = reduced_reg[19];
  assign reduced_reg_next[21] = reduced_reg[20];
  assign reduced_reg_next[22] = reduced_reg[21];
  assign reduced_reg_next[23] = reduced_reg[22];
  assign reduced_reg_next[24] = reduced_reg[23];
  assign reduced_reg_next[25] = reduced_reg[24];



  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample4_output_process
      if (reset == 1'b1) begin
        Downsample4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample4_out1 <= In_E_2;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Downsample4_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample4_out1_1 <= Downsample4_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT_process
      if (reset == 1'b1) begin
        RT_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT_out1 <= Downsample4_out1_1;
        end
      end
    end


  HiD_Even_block u_HiD_Even (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .In_HiD_e(RT_out1),  // sfix16_En23
                             .Out_HiD_e(HiD_Even_out1)  // sfix16_En15
                             );
  // Downsample register
  always @(posedge clk)
    begin : Downsample2_ds_process
      if (reset == 1'b1) begin
        Downsample2_ds_out <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_4) begin
          Downsample2_ds_out <= In_E_1;
        end
      end
    end



  // Downsample output register
  always @(posedge clk)
    begin : Downsample2_output_process
      if (reset == 1'b1) begin
        Downsample2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample2_out1 <= Downsample2_ds_out;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Downsample2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample2_out1_1 <= Downsample2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT1_process
      if (reset == 1'b1) begin
        RT1_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT1_out1 <= Downsample2_out1_1;
        end
      end
    end


  HiD_Odd_block u_HiD_Odd (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .In_HiD_o(RT1_out1),  // sfix16_En23
                           .Out_HiD_o(HiD_Odd_out1)  // ufix16_En25
                           );
  assign Add_add_cast = {HiD_Even_out1[4:0], 11'b00000000000};
  assign Add_add_cast_1 = $signed({HiD_Odd_out1[14:0], 1'b0});
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Add_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Add_out1_1 <= Add_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Add_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[30:15];


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign Out_HiD = Gain_out1_1;

  assign kconst_2 = 16'b1001100100000100;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  LoD_Even_block u_LoD_Even (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .In_LoD_e(RT_out1),  // sfix16_En23
                             .Out_LoD_e(LoD_Even_out1)  // sfix16_En24
                             );
  LoD_Odd_block u_LoD_Odd (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .In_LoD_o(RT1_out1),  // sfix16_En23
                           .Out_LoD_o(LoD_Odd_out1)  // ufix16_En25
                           );
  assign Add1_add_cast = {1'b0, LoD_Odd_out1[15:1]};
  assign Add1_add_temp = LoD_Even_out1 + Add1_add_cast;
  assign Add1_out1 = Add1_add_temp;


  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Add1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Add1_out1_1 <= Add1_out1;
        end
      end
    end



  assign Gain1_mul_temp = kconst_3 * Add1_out1_1;
  assign Gain1_out1 = Gain1_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Out_LoD = Gain1_out1_1;

endmodule  // alpha1st_Level_Decomp1

`timescale 1 ns / 1 ns

module HiR_Even
          (clk,
           reset,
           enb,
           In_HiR_e,
           Out_HiR_e);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiR_e;  // sfix16_En28
  output  signed [15:0] Out_HiR_e;  // sfix16_En28


  wire signed [15:0] Constant12_out1;  // sfix16_En17
  reg signed [15:0] Constant12_out1_1;  // sfix16_En17
  reg signed [15:0] In_HiR_e_1;  // sfix16_En28
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En45
  wire signed [15:0] Multiply_out1;  // sfix16_En31
  reg signed [15:0] Multiply_out1_1;  // sfix16_En31
  wire [15:0] Constant14_out1;  // ufix16_En16
  reg [15:0] Constant14_out1_1;  // ufix16_En16
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En28
  wire signed [16:0] Multiply1_cast;  // sfix17_En16
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En44
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En44
  wire signed [15:0] Multiply1_out1;  // sfix16_En28
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En28 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En28
  wire signed [15:0] Add_add_cast;  // sfix16_En28
  wire signed [15:0] Add_out1;  // sfix16_En28


  assign Constant12_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant12_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant12_out1_1 <= Constant12_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiR_e_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiR_e_1 <= In_HiR_e;
        end
      end
    end


  assign Multiply_mul_temp = Constant12_out1_1 * In_HiR_e_1;
  assign Multiply_out1 = Multiply_mul_temp[29:14];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant14_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant14_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant14_out1_1 <= Constant14_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiR_e_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, Constant14_out1_1};
  assign Multiply1_mul_temp = Multiply1_cast * Rate_Transition_out1;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = Multiply1_cast_1[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {{3{Multiply_out1_1[15]}}, Multiply_out1_1[15:3]};
  assign Add_out1 = Add_add_cast + Multiply1_out1_1;


  assign Out_HiR_e = Add_out1;

endmodule  // HiR_Even

`timescale 1 ns / 1 ns

module HiR_Odd
          (clk,
           reset,
           enb,
           In_HiR_o,
           Out_HiR_o);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiR_o;  // sfix16_En28
  output  signed [15:0] Out_HiR_o;  // sfix16_En29


  wire signed [15:0] Constant13_out1;  // sfix16_En17
  reg signed [15:0] Constant13_out1_1;  // sfix16_En17
  reg signed [15:0] In_HiR_o_1;  // sfix16_En28
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En45
  wire signed [15:0] Multiply_out1;  // sfix16_En30
  reg signed [15:0] Multiply_out1_1;  // sfix16_En30
  wire signed [15:0] Constant15_out1;  // sfix16_En16
  reg signed [15:0] Constant15_out1_1;  // sfix16_En16
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En28
  wire signed [31:0] Multiply1_mul_temp;  // sfix32_En44
  wire signed [15:0] Multiply1_out1;  // sfix16_En29
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En29 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En29
  wire signed [15:0] Add_add_cast;  // sfix16_En29
  wire signed [15:0] Add_out1;  // sfix16_En29


  assign Constant13_out1 = 16'sb1000110100111101;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant13_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant13_out1_1 <= Constant13_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiR_o_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiR_o_1 <= In_HiR_o;
        end
      end
    end


  assign Multiply_mul_temp = Constant13_out1_1 * In_HiR_o_1;
  assign Multiply_out1 = Multiply_mul_temp[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant15_out1 = 16'sb1000010001011101;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant15_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant15_out1_1 <= Constant15_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiR_o_1;
        end
      end
    end



  assign Multiply1_mul_temp = Constant15_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[30:15];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {Multiply_out1_1[15], Multiply_out1_1[15:1]};
  assign Add_out1 = Add_add_cast + Multiply1_out1_1;


  assign Out_HiR_o = Add_out1;

endmodule  // HiR_Odd

`timescale 1 ns / 1 ns

module LoR_Even
          (clk,
           reset,
           enb,
           In_LoR_e,
           Out_LoR_e);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_LoR_e;  // ufix16_En24
  output  [15:0] Out_LoR_e;  // ufix16_En25


  wire [15:0] Constant8_out1;  // ufix16_En17
  reg [15:0] Constant8_out1_1;  // ufix16_En17
  reg [15:0] In_LoR_e_1;  // ufix16_En24
  wire [31:0] Multiply_mul_temp;  // ufix32_En41
  wire [15:0] Multiply_out1;  // ufix16_En25
  reg [15:0] Multiply_out1_1;  // ufix16_En25
  wire [15:0] Constant10_out1;  // ufix16_En18
  reg [15:0] Constant10_out1_1;  // ufix16_En18
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire [31:0] Multiply1_mul_temp;  // ufix32_En42
  wire [15:0] Multiply1_out1;  // ufix16_En26
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En26 [2]
  wire [15:0] Multiply1_out1_1;  // ufix16_En26
  wire [15:0] Add_add_cast;  // ufix16_En25
  wire [15:0] Add_out1;  // ufix16_En25


  assign Constant8_out1 = 16'b1111011101000111;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant8_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant8_out1_1 <= Constant8_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoR_e_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoR_e_1 <= In_LoR_e;
        end
      end
    end


  assign Multiply_mul_temp = Constant8_out1_1 * In_LoR_e_1;
  assign Multiply_out1 = Multiply_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant10_out1 = 16'b1110010110000110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant10_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant10_out1_1 <= Constant10_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoR_e_1;
        end
      end
    end



  assign Multiply1_mul_temp = Constant10_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {1'b0, Multiply1_out1_1[15:1]};
  assign Add_out1 = Multiply_out1_1 + Add_add_cast;


  assign Out_LoR_e = Add_out1;

endmodule  // LoR_Even

`timescale 1 ns / 1 ns

module LoR_Odd
          (clk,
           reset,
           enb,
           In_LoR_o,
           Out_HiR_o);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_LoR_o;  // ufix16_En24
  output  [15:0] Out_HiR_o;  // ufix16_En25


  wire [15:0] Constant9_out1;  // ufix16_En16
  reg [15:0] Constant9_out1_1;  // ufix16_En16
  reg [15:0] In_LoR_o_1;  // ufix16_En24
  wire [31:0] Multiply_mul_temp;  // ufix32_En40
  wire [15:0] Multiply_out1;  // ufix16_En25
  reg [15:0] Multiply_out1_1;  // ufix16_En25
  wire signed [15:0] Constant11_out1;  // sfix16_En17
  reg signed [15:0] Constant11_out1_1;  // sfix16_En17
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire signed [16:0] Multiply1_cast;  // sfix17_En24
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En41
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En15
  wire signed [15:0] Add_add_cast;  // sfix16_En25
  wire signed [15:0] Add_add_cast_1;  // sfix16_En25
  wire signed [15:0] Add_add_temp;  // sfix16_En25
  wire [15:0] Add_out1;  // ufix16_En25


  assign Constant9_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant9_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant9_out1_1 <= Constant9_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoR_o_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoR_o_1 <= In_LoR_o;
        end
      end
    end


  assign Multiply_mul_temp = Constant9_out1_1 * In_LoR_o_1;
  assign Multiply_out1 = Multiply_mul_temp[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant11_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant11_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant11_out1_1 <= Constant11_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoR_o_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, Rate_Transition_out1};
  assign Multiply1_mul_temp = Constant11_out1_1 * Multiply1_cast;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = {{10{Multiply1_cast_1[31]}}, Multiply1_cast_1[31:26]};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = Multiply_out1_1;
  assign Add_add_cast_1 = {Multiply1_out1_1[5:0], 10'b0000000000};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp;


  assign Out_HiR_o = Add_out1;

endmodule  // LoR_Odd

`timescale 1 ns / 1 ns

module alpha1st_Level_Recon
          (clk,
           reset,
           enb,
           In_HiD,
           In_LoD,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiD;  // sfix16_En28
  input   [15:0] In_LoD;  // ufix16_En24
  output  [15:0] Out;  // ufix16_En24


  wire [15:0] kconst;  // ufix16_En16
  reg [15:0] kconst_1;  // ufix16_En16
  wire signed [15:0] HiR_Even_out1;  // sfix16_En28
  wire [15:0] LoR_Even_out1;  // ufix16_En25
  wire signed [15:0] HiR_Odd_out1;  // sfix16_En29
  wire [15:0] LoR_Odd_out1;  // ufix16_En25
  reg [15:0] delayMatch1_reg [0:6];  // ufix16 [7]
  wire [15:0] delayMatch1_reg_next [0:6];  // ufix16_En25 [7]
  wire [15:0] LoR_Odd_out1_1;  // ufix16_En25
  wire signed [15:0] Add1_add_cast;  // sfix16_En25
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En25
  wire signed [15:0] Add1_add_temp;  // sfix16_En25
  wire [15:0] Add1_out1;  // ufix16_En25
  reg [15:0] delayMatch_reg [0:6];  // ufix16 [7]
  wire [15:0] delayMatch_reg_next [0:6];  // ufix16_En25 [7]
  wire [15:0] LoR_Even_out1_1;  // ufix16_En25
  wire signed [15:0] Add_add_cast;  // sfix16_En25
  wire signed [15:0] Add_add_cast_1;  // sfix16_En25
  wire signed [15:0] Add_add_temp;  // sfix16_En25
  wire [15:0] Add_out1;  // ufix16_En25
  reg [15:0] Recon_Odd;  // ufix16_En25
  wire [15:0] Recon_Odd_1;  // ufix16_En25
  wire [15:0] Add2_add_cast;  // ufix16_En24
  wire [15:0] Add2_add_cast_1;  // ufix16_En24
  wire [15:0] Add2_out1;  // ufix16_En24
  reg [15:0] Add2_out1_1;  // ufix16_En24
  wire [31:0] Gain_mul_temp;  // ufix32_En40
  wire [15:0] Gain_out1;  // ufix16_En24
  reg [15:0] Gain_out1_1;  // ufix16_En24


  assign kconst = 16'b1101011000100110;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  HiR_Even u_HiR_Even (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_HiR_e(In_HiD),  // sfix16_En28
                       .Out_HiR_e(HiR_Even_out1)  // sfix16_En28
                       );
  LoR_Even u_LoR_Even (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_LoR_e(In_LoD),  // ufix16_En24
                       .Out_LoR_e(LoR_Even_out1)  // ufix16_En25
                       );
  HiR_Odd u_HiR_Odd (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .In_HiR_o(In_HiD),  // sfix16_En28
                     .Out_HiR_o(HiR_Odd_out1)  // sfix16_En29
                     );
  LoR_Odd u_LoR_Odd (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .In_LoR_o(In_LoD),  // ufix16_En24
                     .Out_HiR_o(LoR_Odd_out1)  // ufix16_En25
                     );
  always @(posedge clk)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 16'b0000000000000000;
        delayMatch1_reg[1] <= 16'b0000000000000000;
        delayMatch1_reg[2] <= 16'b0000000000000000;
        delayMatch1_reg[3] <= 16'b0000000000000000;
        delayMatch1_reg[4] <= 16'b0000000000000000;
        delayMatch1_reg[5] <= 16'b0000000000000000;
        delayMatch1_reg[6] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
          delayMatch1_reg[3] <= delayMatch1_reg_next[3];
          delayMatch1_reg[4] <= delayMatch1_reg_next[4];
          delayMatch1_reg[5] <= delayMatch1_reg_next[5];
          delayMatch1_reg[6] <= delayMatch1_reg_next[6];
        end
      end
    end

  assign LoR_Odd_out1_1 = delayMatch1_reg[6];
  assign delayMatch1_reg_next[0] = LoR_Odd_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];
  assign delayMatch1_reg_next[4] = delayMatch1_reg[3];
  assign delayMatch1_reg_next[5] = delayMatch1_reg[4];
  assign delayMatch1_reg_next[6] = delayMatch1_reg[5];



  assign Add1_add_cast = {{4{HiR_Odd_out1[15]}}, HiR_Odd_out1[15:4]};
  assign Add1_add_cast_1 = LoR_Odd_out1_1;
  assign Add1_add_temp = Add1_add_cast + Add1_add_cast_1;
  assign Add1_out1 = Add1_add_temp;


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
        delayMatch_reg[2] <= 16'b0000000000000000;
        delayMatch_reg[3] <= 16'b0000000000000000;
        delayMatch_reg[4] <= 16'b0000000000000000;
        delayMatch_reg[5] <= 16'b0000000000000000;
        delayMatch_reg[6] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
        end
      end
    end

  assign LoR_Even_out1_1 = delayMatch_reg[6];
  assign delayMatch_reg_next[0] = LoR_Even_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];



  assign Add_add_cast = {{3{HiR_Even_out1[15]}}, HiR_Even_out1[15:3]};
  assign Add_add_cast_1 = LoR_Even_out1_1;
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Recon_Odd <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Recon_Odd <= Add1_out1;
        end
      end
    end


  assign Recon_Odd_1 = Recon_Odd;
  assign Add2_add_cast = {1'b0, Add_out1[15:1]};
  assign Add2_add_cast_1 = {1'b0, Recon_Odd_1[15:1]};
  assign Add2_out1 = Add2_add_cast + Add2_add_cast_1;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Add2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Add2_out1_1 <= Add2_out1;
        end
      end
    end



  assign Gain_mul_temp = kconst_1 * Add2_out1_1;
  assign Gain_out1 = Gain_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end


  assign Out = Gain_out1_1;

endmodule  // alpha1st_Level_Recon

`timescale 1 ns / 1 ns

module HiR_Even_block
          (clk,
           reset,
           enb,
           In_HiR_e,
           Out_HiR_e);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiR_e;  // sfix16_En27
  output  signed [15:0] Out_HiR_e;  // sfix16_En27


  wire signed [15:0] Constant12_out1;  // sfix16_En17
  reg signed [15:0] Constant12_out1_1;  // sfix16_En17
  reg signed [15:0] In_HiR_e_1;  // sfix16_En27
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En44
  wire signed [15:0] Multiply_out1;  // sfix16_En30
  reg signed [15:0] Multiply_out1_1;  // sfix16_En30
  wire [15:0] Constant14_out1;  // ufix16_En16
  reg [15:0] Constant14_out1_1;  // ufix16_En16
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En27
  wire signed [16:0] Multiply1_cast;  // sfix17_En16
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En43
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En43
  wire signed [15:0] Multiply1_out1;  // sfix16_En27
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En27 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En27
  wire signed [15:0] Add_add_cast;  // sfix16_En27
  wire signed [15:0] Add_out1;  // sfix16_En27


  assign Constant12_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant12_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant12_out1_1 <= Constant12_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiR_e_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiR_e_1 <= In_HiR_e;
        end
      end
    end


  assign Multiply_mul_temp = Constant12_out1_1 * In_HiR_e_1;
  assign Multiply_out1 = Multiply_mul_temp[29:14];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant14_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant14_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant14_out1_1 <= Constant14_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiR_e_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, Constant14_out1_1};
  assign Multiply1_mul_temp = Multiply1_cast * Rate_Transition_out1;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = Multiply1_cast_1[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {{3{Multiply_out1_1[15]}}, Multiply_out1_1[15:3]};
  assign Add_out1 = Add_add_cast + Multiply1_out1_1;


  assign Out_HiR_e = Add_out1;

endmodule  // HiR_Even_block

`timescale 1 ns / 1 ns

module HiR_Odd_block
          (clk,
           reset,
           enb,
           In_HiR_o,
           Out_HiR_o);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiR_o;  // sfix16_En27
  output  signed [15:0] Out_HiR_o;  // sfix16_En28


  wire signed [15:0] Constant13_out1;  // sfix16_En17
  reg signed [15:0] Constant13_out1_1;  // sfix16_En17
  reg signed [15:0] In_HiR_o_1;  // sfix16_En27
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En44
  wire signed [15:0] Multiply_out1;  // sfix16_En29
  reg signed [15:0] Multiply_out1_1;  // sfix16_En29
  wire signed [15:0] Constant15_out1;  // sfix16_En16
  reg signed [15:0] Constant15_out1_1;  // sfix16_En16
  reg signed [15:0] Rate_Transition_out1;  // sfix16_En27
  wire signed [31:0] Multiply1_mul_temp;  // sfix32_En43
  wire signed [15:0] Multiply1_out1;  // sfix16_En28
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En28 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En28
  wire signed [15:0] Add_add_cast;  // sfix16_En28
  wire signed [15:0] Add_out1;  // sfix16_En28


  assign Constant13_out1 = 16'sb1000110100111101;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant13_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant13_out1_1 <= Constant13_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiR_o_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiR_o_1 <= In_HiR_o;
        end
      end
    end


  assign Multiply_mul_temp = Constant13_out1_1 * In_HiR_o_1;
  assign Multiply_out1 = Multiply_mul_temp[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant15_out1 = 16'sb1000010001011101;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant15_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant15_out1_1 <= Constant15_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_HiR_o_1;
        end
      end
    end



  assign Multiply1_mul_temp = Constant15_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[30:15];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {Multiply_out1_1[15], Multiply_out1_1[15:1]};
  assign Add_out1 = Add_add_cast + Multiply1_out1_1;


  assign Out_HiR_o = Add_out1;

endmodule  // HiR_Odd_block

`timescale 1 ns / 1 ns

module LoR_Even_block
          (clk,
           reset,
           enb,
           In_LoR_e,
           Out_LoR_e);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_LoR_e;  // ufix16_En24
  output  [15:0] Out_LoR_e;  // ufix16_En25


  wire [15:0] Constant8_out1;  // ufix16_En17
  reg [15:0] Constant8_out1_1;  // ufix16_En17
  reg [15:0] In_LoR_e_1;  // ufix16_En24
  wire [31:0] Multiply_mul_temp;  // ufix32_En41
  wire [15:0] Multiply_out1;  // ufix16_En25
  reg [15:0] Multiply_out1_1;  // ufix16_En25
  wire [15:0] Constant10_out1;  // ufix16_En18
  reg [15:0] Constant10_out1_1;  // ufix16_En18
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire [31:0] Multiply1_mul_temp;  // ufix32_En42
  wire [15:0] Multiply1_out1;  // ufix16_En26
  reg [15:0] delayMatch_reg [0:1];  // ufix16 [2]
  wire [15:0] delayMatch_reg_next [0:1];  // ufix16_En26 [2]
  wire [15:0] Multiply1_out1_1;  // ufix16_En26
  wire [15:0] Add_add_cast;  // ufix16_En25
  wire [15:0] Add_out1;  // ufix16_En25


  assign Constant8_out1 = 16'b1111011101000111;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant8_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant8_out1_1 <= Constant8_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoR_e_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoR_e_1 <= In_LoR_e;
        end
      end
    end


  assign Multiply_mul_temp = Constant8_out1_1 * In_LoR_e_1;
  assign Multiply_out1 = Multiply_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant10_out1 = 16'b1110010110000110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant10_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant10_out1_1 <= Constant10_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoR_e_1;
        end
      end
    end



  assign Multiply1_mul_temp = Constant10_out1_1 * Rate_Transition_out1;
  assign Multiply1_out1 = Multiply1_mul_temp[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {1'b0, Multiply1_out1_1[15:1]};
  assign Add_out1 = Multiply_out1_1 + Add_add_cast;


  assign Out_LoR_e = Add_out1;

endmodule  // LoR_Even_block

`timescale 1 ns / 1 ns

module LoR_Odd_block
          (clk,
           reset,
           enb,
           In_LoR_o,
           Out_HiR_o);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In_LoR_o;  // ufix16_En24
  output  [15:0] Out_HiR_o;  // ufix16_En25


  wire [15:0] Constant9_out1;  // ufix16_En16
  reg [15:0] Constant9_out1_1;  // ufix16_En16
  reg [15:0] In_LoR_o_1;  // ufix16_En24
  wire [31:0] Multiply_mul_temp;  // ufix32_En40
  wire [15:0] Multiply_out1;  // ufix16_En24
  reg [15:0] Multiply_out1_1;  // ufix16_En24
  wire signed [15:0] Constant11_out1;  // sfix16_En17
  reg signed [15:0] Constant11_out1_1;  // sfix16_En17
  reg [15:0] Rate_Transition_out1;  // ufix16_En24
  wire signed [16:0] Multiply1_cast;  // sfix17_En24
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En41
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En41
  wire signed [15:0] Multiply1_out1;  // sfix16_En15
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En15
  wire signed [15:0] Add_add_cast;  // sfix16_En25
  wire signed [15:0] Add_add_cast_1;  // sfix16_En25
  wire signed [15:0] Add_add_temp;  // sfix16_En25
  wire [15:0] Add_out1;  // ufix16_En25


  assign Constant9_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Constant9_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Constant9_out1_1 <= Constant9_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_LoR_o_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          In_LoR_o_1 <= In_LoR_o;
        end
      end
    end


  assign Multiply_mul_temp = Constant9_out1_1 * In_LoR_o_1;
  assign Multiply_out1 = Multiply_mul_temp[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Constant11_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        Constant11_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Constant11_out1_1 <= Constant11_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition_out1 <= In_LoR_o_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, Rate_Transition_out1};
  assign Multiply1_mul_temp = Constant11_out1_1 * Multiply1_cast;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = {{10{Multiply1_cast_1[31]}}, Multiply1_cast_1[31:26]};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = $signed({Multiply_out1_1[14:0], 1'b0});
  assign Add_add_cast_1 = {Multiply1_out1_1[5:0], 10'b0000000000};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp;


  assign Out_HiR_o = Add_out1;

endmodule  // LoR_Odd_block

`timescale 1 ns / 1 ns

module alpha1st_Level_Recon1
          (clk,
           reset,
           enb,
           In_HiD,
           In_LoD,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiD;  // sfix16_En27
  input   [15:0] In_LoD;  // ufix16_En24
  output  signed [15:0] Out;  // sfix16_En23


  wire [15:0] kconst;  // ufix16_En16
  reg [15:0] kconst_1;  // ufix16_En16
  wire signed [15:0] HiR_Even_out1;  // sfix16_En27
  reg signed [15:0] delayMatch_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch_reg_next [0:2];  // sfix16_En27 [3]
  wire signed [15:0] HiR_Even_out1_1;  // sfix16_En27
  wire signed [15:0] HiR_Odd_out1;  // sfix16_En28
  reg signed [15:0] delayMatch1_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch1_reg_next [0:2];  // sfix16_En28 [3]
  wire signed [15:0] HiR_Odd_out1_1;  // sfix16_En28
  wire [15:0] LoR_Odd_out1;  // ufix16_En25
  wire signed [15:0] Add1_add_cast;  // sfix16_En24
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En24
  wire signed [15:0] Add1_add_temp;  // sfix16_En24
  wire [15:0] Add1_out1;  // ufix16_En25
  wire [15:0] LoR_Even_out1;  // ufix16_En25
  wire signed [15:0] Add_add_cast;  // sfix16_En23
  wire signed [15:0] Add_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add_out1;  // sfix16_En23
  reg [15:0] Recon_Odd;  // ufix16_En25
  wire [15:0] Recon_Odd_1;  // ufix16_En25
  wire signed [15:0] Add2_add_cast;  // sfix16_En23
  wire signed [15:0] Add2_out1;  // sfix16_En23
  reg signed [15:0] Add2_out1_1;  // sfix16_En23
  wire signed [16:0] Gain_cast;  // sfix17_En16
  wire signed [32:0] Gain_mul_temp;  // sfix33_En39
  wire signed [31:0] Gain_cast_1;  // sfix32_En39
  wire signed [15:0] Gain_out1;  // sfix16_En23
  reg signed [15:0] Gain_out1_1;  // sfix16_En23


  assign kconst = 16'b1101011000100110;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  HiR_Even_block u_HiR_Even (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .In_HiR_e(In_HiD),  // sfix16_En27
                             .Out_HiR_e(HiR_Even_out1)  // sfix16_En27
                             );
  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
        delayMatch_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
        end
      end
    end

  assign HiR_Even_out1_1 = delayMatch_reg[2];
  assign delayMatch_reg_next[0] = HiR_Even_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];



  HiR_Odd_block u_HiR_Odd (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .In_HiR_o(In_HiD),  // sfix16_En27
                           .Out_HiR_o(HiR_Odd_out1)  // sfix16_En28
                           );
  always @(posedge clk)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 16'sb0000000000000000;
        delayMatch1_reg[1] <= 16'sb0000000000000000;
        delayMatch1_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
        end
      end
    end

  assign HiR_Odd_out1_1 = delayMatch1_reg[2];
  assign delayMatch1_reg_next[0] = HiR_Odd_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];



  LoR_Odd_block u_LoR_Odd (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .In_LoR_o(In_LoD),  // ufix16_En24
                           .Out_HiR_o(LoR_Odd_out1)  // ufix16_En25
                           );
  assign Add1_add_cast = {{4{HiR_Odd_out1_1[15]}}, HiR_Odd_out1_1[15:4]};
  assign Add1_add_cast_1 = {1'b0, LoR_Odd_out1[15:1]};
  assign Add1_add_temp = Add1_add_cast + Add1_add_cast_1;
  assign Add1_out1 = {Add1_add_temp[14:0], 1'b0};


  LoR_Even_block u_LoR_Even (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .In_LoR_e(In_LoD),  // ufix16_En24
                             .Out_LoR_e(LoR_Even_out1)  // ufix16_En25
                             );
  assign Add_add_cast = {{4{HiR_Even_out1_1[15]}}, HiR_Even_out1_1[15:4]};
  assign Add_add_cast_1 = {2'b0, LoR_Even_out1[15:2]};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Recon_Odd <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Recon_Odd <= Add1_out1;
        end
      end
    end


  assign Recon_Odd_1 = Recon_Odd;
  assign Add2_add_cast = {2'b0, Recon_Odd_1[15:2]};
  assign Add2_out1 = Add_out1 + Add2_add_cast;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Add2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Add2_out1_1 <= Add2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Add2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end


  assign Out = Gain_out1_1;

endmodule  // alpha1st_Level_Recon1

`timescale 1 ns / 1 ns

module Soft_Thresholding
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold1,
           New_Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En25
  input   [15:0] Threshold1;  // ufix16_En27
  output  signed [15:0] New_Threshold;  // sfix16_En27


  wire [15:0] kconst;  // ufix16_En18
  reg [15:0] kconst_1;  // ufix16_En18
  reg signed [15:0] reduced_reg [0:63];  // sfix16 [64]
  wire signed [15:0] reduced_reg_next [0:63];  // sfix16_En25 [64]
  wire signed [15:0] Signal_w_1;  // sfix16_En25
  wire signed [35:0] Relational_Operator7_1_cast;  // sfix36_En27
  wire signed [35:0] Relational_Operator7_1_cast_1;  // sfix36_En27
  wire Relational_Operator7_relop1;
  wire signed [15:0] Relational_Operator7_relop1_dtc;  // int16
  wire signed [35:0] Relational_Operator2_1_cast;  // sfix36_En27
  wire signed [35:0] Relational_Operator2_1_cast_1;  // sfix36_En27
  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  reg signed [15:0] delayMatch6_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch6_reg_next [0:2];  // sfix16 [3]
  wire signed [15:0] Delay2_out1;  // int16
  reg signed [15:0] reduced_reg_1 [0:1];  // sfix16 [2]
  wire signed [15:0] reduced_reg_next_1 [0:1];  // sfix16_En25 [2]
  wire signed [15:0] Signal_w_2;  // sfix16_En25
  wire signed [15:0] kconst_2;  // sfix16_En15
  reg signed [15:0] kconst_3;  // sfix16_En15
  reg [15:0] Threshold1_1;  // ufix16_En27
  wire signed [16:0] Gain1_cast;  // sfix17_En27
  wire signed [32:0] Gain1_mul_temp;  // sfix33_En42
  wire signed [31:0] Gain1_cast_1;  // sfix32_En42
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  reg signed [15:0] Gain1_out1_1;  // sfix16_En15
  wire signed [25:0] Relational_Operator3_1_cast;  // sfix26_En25
  wire signed [25:0] Relational_Operator3_1_cast_1;  // sfix26_En25
  wire Relational_Operator3_relop1;
  wire signed [15:0] Relational_Operator3_relop1_dtc;  // int16
  reg signed [15:0] Delay3_out1;  // int16
  wire Relational_Operator4_relop1;
  wire signed [15:0] Relational_Operator4_relop1_dtc;  // int16
  wire switch_compare_1;
  wire signed [15:0] Add1_add_cast;  // sfix16_En25
  wire signed [15:0] Add1_out1;  // sfix16_En25
  reg signed [15:0] delayMatch9_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch9_reg_next [0:2];  // sfix16_En25 [3]
  wire signed [15:0] Delay4_out1;  // sfix16_En25
  wire signed [15:0] Subtract1_sub_cast;  // sfix16_En25
  wire signed [15:0] Subtract1_out1;  // sfix16_En25
  wire signed [16:0] Abs_y;  // sfix17_En25
  wire signed [16:0] Abs_cast;  // sfix17_En25
  wire [15:0] Abs_out1;  // ufix16_En26
  reg [15:0] delayMatch_reg [0:63];  // ufix16 [64]
  wire [15:0] delayMatch_reg_next [0:63];  // ufix16_En26 [64]
  wire [15:0] Abs_out1_1;  // ufix16_En26
  wire [36:0] Relational_Operator1_1_cast;  // ufix37_En27
  wire [36:0] Relational_Operator1_1_cast_1;  // ufix37_En27
  wire Relational_Operator1_relop1;
  wire signed [15:0] Relational_Operator1_relop1_dtc;  // int16
  reg signed [15:0] Delay5_out1;  // int16
  wire signed [35:0] Relational_Operator5_1_cast;  // sfix36_En27
  wire signed [35:0] Relational_Operator5_1_cast_1;  // sfix36_En27
  wire Relational_Operator5_relop1;
  wire signed [15:0] Relational_Operator5_relop1_dtc;  // int16
  reg signed [15:0] Delay6_out1;  // int16
  wire Relational_Operator6_relop1;
  wire signed [15:0] Relational_Operator6_relop1_dtc;  // int16
  wire switch_compare_1_1;
  wire signed [15:0] Constant_out1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1;  // sfix16_En4
  reg signed [15:0] delayMatch11_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch11_reg_next [0:1];  // sfix16 [2]
  wire signed [15:0] Relational_Operator7_out1;  // int16
  wire switch_compare_1_2;
  reg signed [15:0] delayMatch8_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch8_reg_next [0:2];  // sfix16_En25 [3]
  wire signed [15:0] Delay1_out1;  // sfix16_En25
  wire signed [15:0] Threshold_Switch_out1;  // sfix16_En25
  reg signed [15:0] delayMatch10_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch10_reg_next [0:1];  // sfix16_En4 [2]
  wire signed [15:0] Threshold_Switch1_out1_1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1_dtc;  // sfix16_En25
  wire signed [15:0] Threshold_Switch2_out1;  // sfix16_En25
  reg signed [15:0] Threshold_Switch2_out1_1;  // sfix16_En25
  wire signed [16:0] Gain_cast;  // sfix17_En18
  wire signed [32:0] Gain_mul_temp;  // sfix33_En43
  wire signed [31:0] Gain_cast_1;  // sfix32_En43
  wire signed [15:0] Gain_out1;  // sfix16_En27
  reg signed [15:0] Gain_out1_1;  // sfix16_En27


  assign kconst = 16'b1101111010001001;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'sb0000000000000000;
        reduced_reg[1] <= 16'sb0000000000000000;
        reduced_reg[2] <= 16'sb0000000000000000;
        reduced_reg[3] <= 16'sb0000000000000000;
        reduced_reg[4] <= 16'sb0000000000000000;
        reduced_reg[5] <= 16'sb0000000000000000;
        reduced_reg[6] <= 16'sb0000000000000000;
        reduced_reg[7] <= 16'sb0000000000000000;
        reduced_reg[8] <= 16'sb0000000000000000;
        reduced_reg[9] <= 16'sb0000000000000000;
        reduced_reg[10] <= 16'sb0000000000000000;
        reduced_reg[11] <= 16'sb0000000000000000;
        reduced_reg[12] <= 16'sb0000000000000000;
        reduced_reg[13] <= 16'sb0000000000000000;
        reduced_reg[14] <= 16'sb0000000000000000;
        reduced_reg[15] <= 16'sb0000000000000000;
        reduced_reg[16] <= 16'sb0000000000000000;
        reduced_reg[17] <= 16'sb0000000000000000;
        reduced_reg[18] <= 16'sb0000000000000000;
        reduced_reg[19] <= 16'sb0000000000000000;
        reduced_reg[20] <= 16'sb0000000000000000;
        reduced_reg[21] <= 16'sb0000000000000000;
        reduced_reg[22] <= 16'sb0000000000000000;
        reduced_reg[23] <= 16'sb0000000000000000;
        reduced_reg[24] <= 16'sb0000000000000000;
        reduced_reg[25] <= 16'sb0000000000000000;
        reduced_reg[26] <= 16'sb0000000000000000;
        reduced_reg[27] <= 16'sb0000000000000000;
        reduced_reg[28] <= 16'sb0000000000000000;
        reduced_reg[29] <= 16'sb0000000000000000;
        reduced_reg[30] <= 16'sb0000000000000000;
        reduced_reg[31] <= 16'sb0000000000000000;
        reduced_reg[32] <= 16'sb0000000000000000;
        reduced_reg[33] <= 16'sb0000000000000000;
        reduced_reg[34] <= 16'sb0000000000000000;
        reduced_reg[35] <= 16'sb0000000000000000;
        reduced_reg[36] <= 16'sb0000000000000000;
        reduced_reg[37] <= 16'sb0000000000000000;
        reduced_reg[38] <= 16'sb0000000000000000;
        reduced_reg[39] <= 16'sb0000000000000000;
        reduced_reg[40] <= 16'sb0000000000000000;
        reduced_reg[41] <= 16'sb0000000000000000;
        reduced_reg[42] <= 16'sb0000000000000000;
        reduced_reg[43] <= 16'sb0000000000000000;
        reduced_reg[44] <= 16'sb0000000000000000;
        reduced_reg[45] <= 16'sb0000000000000000;
        reduced_reg[46] <= 16'sb0000000000000000;
        reduced_reg[47] <= 16'sb0000000000000000;
        reduced_reg[48] <= 16'sb0000000000000000;
        reduced_reg[49] <= 16'sb0000000000000000;
        reduced_reg[50] <= 16'sb0000000000000000;
        reduced_reg[51] <= 16'sb0000000000000000;
        reduced_reg[52] <= 16'sb0000000000000000;
        reduced_reg[53] <= 16'sb0000000000000000;
        reduced_reg[54] <= 16'sb0000000000000000;
        reduced_reg[55] <= 16'sb0000000000000000;
        reduced_reg[56] <= 16'sb0000000000000000;
        reduced_reg[57] <= 16'sb0000000000000000;
        reduced_reg[58] <= 16'sb0000000000000000;
        reduced_reg[59] <= 16'sb0000000000000000;
        reduced_reg[60] <= 16'sb0000000000000000;
        reduced_reg[61] <= 16'sb0000000000000000;
        reduced_reg[62] <= 16'sb0000000000000000;
        reduced_reg[63] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
          reduced_reg[10] <= reduced_reg_next[10];
          reduced_reg[11] <= reduced_reg_next[11];
          reduced_reg[12] <= reduced_reg_next[12];
          reduced_reg[13] <= reduced_reg_next[13];
          reduced_reg[14] <= reduced_reg_next[14];
          reduced_reg[15] <= reduced_reg_next[15];
          reduced_reg[16] <= reduced_reg_next[16];
          reduced_reg[17] <= reduced_reg_next[17];
          reduced_reg[18] <= reduced_reg_next[18];
          reduced_reg[19] <= reduced_reg_next[19];
          reduced_reg[20] <= reduced_reg_next[20];
          reduced_reg[21] <= reduced_reg_next[21];
          reduced_reg[22] <= reduced_reg_next[22];
          reduced_reg[23] <= reduced_reg_next[23];
          reduced_reg[24] <= reduced_reg_next[24];
          reduced_reg[25] <= reduced_reg_next[25];
          reduced_reg[26] <= reduced_reg_next[26];
          reduced_reg[27] <= reduced_reg_next[27];
          reduced_reg[28] <= reduced_reg_next[28];
          reduced_reg[29] <= reduced_reg_next[29];
          reduced_reg[30] <= reduced_reg_next[30];
          reduced_reg[31] <= reduced_reg_next[31];
          reduced_reg[32] <= reduced_reg_next[32];
          reduced_reg[33] <= reduced_reg_next[33];
          reduced_reg[34] <= reduced_reg_next[34];
          reduced_reg[35] <= reduced_reg_next[35];
          reduced_reg[36] <= reduced_reg_next[36];
          reduced_reg[37] <= reduced_reg_next[37];
          reduced_reg[38] <= reduced_reg_next[38];
          reduced_reg[39] <= reduced_reg_next[39];
          reduced_reg[40] <= reduced_reg_next[40];
          reduced_reg[41] <= reduced_reg_next[41];
          reduced_reg[42] <= reduced_reg_next[42];
          reduced_reg[43] <= reduced_reg_next[43];
          reduced_reg[44] <= reduced_reg_next[44];
          reduced_reg[45] <= reduced_reg_next[45];
          reduced_reg[46] <= reduced_reg_next[46];
          reduced_reg[47] <= reduced_reg_next[47];
          reduced_reg[48] <= reduced_reg_next[48];
          reduced_reg[49] <= reduced_reg_next[49];
          reduced_reg[50] <= reduced_reg_next[50];
          reduced_reg[51] <= reduced_reg_next[51];
          reduced_reg[52] <= reduced_reg_next[52];
          reduced_reg[53] <= reduced_reg_next[53];
          reduced_reg[54] <= reduced_reg_next[54];
          reduced_reg[55] <= reduced_reg_next[55];
          reduced_reg[56] <= reduced_reg_next[56];
          reduced_reg[57] <= reduced_reg_next[57];
          reduced_reg[58] <= reduced_reg_next[58];
          reduced_reg[59] <= reduced_reg_next[59];
          reduced_reg[60] <= reduced_reg_next[60];
          reduced_reg[61] <= reduced_reg_next[61];
          reduced_reg[62] <= reduced_reg_next[62];
          reduced_reg[63] <= reduced_reg_next[63];
        end
      end
    end

  assign Signal_w_1 = reduced_reg[63];
  assign reduced_reg_next[0] = Signal_w;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];
  assign reduced_reg_next[10] = reduced_reg[9];
  assign reduced_reg_next[11] = reduced_reg[10];
  assign reduced_reg_next[12] = reduced_reg[11];
  assign reduced_reg_next[13] = reduced_reg[12];
  assign reduced_reg_next[14] = reduced_reg[13];
  assign reduced_reg_next[15] = reduced_reg[14];
  assign reduced_reg_next[16] = reduced_reg[15];
  assign reduced_reg_next[17] = reduced_reg[16];
  assign reduced_reg_next[18] = reduced_reg[17];
  assign reduced_reg_next[19] = reduced_reg[18];
  assign reduced_reg_next[20] = reduced_reg[19];
  assign reduced_reg_next[21] = reduced_reg[20];
  assign reduced_reg_next[22] = reduced_reg[21];
  assign reduced_reg_next[23] = reduced_reg[22];
  assign reduced_reg_next[24] = reduced_reg[23];
  assign reduced_reg_next[25] = reduced_reg[24];
  assign reduced_reg_next[26] = reduced_reg[25];
  assign reduced_reg_next[27] = reduced_reg[26];
  assign reduced_reg_next[28] = reduced_reg[27];
  assign reduced_reg_next[29] = reduced_reg[28];
  assign reduced_reg_next[30] = reduced_reg[29];
  assign reduced_reg_next[31] = reduced_reg[30];
  assign reduced_reg_next[32] = reduced_reg[31];
  assign reduced_reg_next[33] = reduced_reg[32];
  assign reduced_reg_next[34] = reduced_reg[33];
  assign reduced_reg_next[35] = reduced_reg[34];
  assign reduced_reg_next[36] = reduced_reg[35];
  assign reduced_reg_next[37] = reduced_reg[36];
  assign reduced_reg_next[38] = reduced_reg[37];
  assign reduced_reg_next[39] = reduced_reg[38];
  assign reduced_reg_next[40] = reduced_reg[39];
  assign reduced_reg_next[41] = reduced_reg[40];
  assign reduced_reg_next[42] = reduced_reg[41];
  assign reduced_reg_next[43] = reduced_reg[42];
  assign reduced_reg_next[44] = reduced_reg[43];
  assign reduced_reg_next[45] = reduced_reg[44];
  assign reduced_reg_next[46] = reduced_reg[45];
  assign reduced_reg_next[47] = reduced_reg[46];
  assign reduced_reg_next[48] = reduced_reg[47];
  assign reduced_reg_next[49] = reduced_reg[48];
  assign reduced_reg_next[50] = reduced_reg[49];
  assign reduced_reg_next[51] = reduced_reg[50];
  assign reduced_reg_next[52] = reduced_reg[51];
  assign reduced_reg_next[53] = reduced_reg[52];
  assign reduced_reg_next[54] = reduced_reg[53];
  assign reduced_reg_next[55] = reduced_reg[54];
  assign reduced_reg_next[56] = reduced_reg[55];
  assign reduced_reg_next[57] = reduced_reg[56];
  assign reduced_reg_next[58] = reduced_reg[57];
  assign reduced_reg_next[59] = reduced_reg[58];
  assign reduced_reg_next[60] = reduced_reg[59];
  assign reduced_reg_next[61] = reduced_reg[60];
  assign reduced_reg_next[62] = reduced_reg[61];
  assign reduced_reg_next[63] = reduced_reg[62];



  assign Relational_Operator7_1_cast = {{18{Signal_w_1[15]}}, {Signal_w_1, 2'b00}};
  assign Relational_Operator7_1_cast_1 = {20'b0, Threshold1};
  assign Relational_Operator7_relop1 = Relational_Operator7_1_cast == Relational_Operator7_1_cast_1;


  assign Relational_Operator7_relop1_dtc = {15'b0, Relational_Operator7_relop1};



  assign Relational_Operator2_1_cast = {{18{Signal_w_1[15]}}, {Signal_w_1, 2'b00}};
  assign Relational_Operator2_1_cast_1 = {20'b0, Threshold1};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast > Relational_Operator2_1_cast_1;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  always @(posedge clk)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        delayMatch6_reg[0] <= 16'sb0000000000000000;
        delayMatch6_reg[1] <= 16'sb0000000000000000;
        delayMatch6_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
          delayMatch6_reg[2] <= delayMatch6_reg_next[2];
        end
      end
    end

  assign Delay2_out1 = delayMatch6_reg[2];
  assign delayMatch6_reg_next[0] = Relational_Operator2_relop1_dtc;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];
  assign delayMatch6_reg_next[2] = delayMatch6_reg[1];


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 16'sb0000000000000000;
        reduced_reg_1[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
        end
      end
    end

  assign Signal_w_2 = reduced_reg_1[1];
  assign reduced_reg_next_1[0] = Signal_w_1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];



  assign kconst_2 = 16'sb1000000000000000;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Threshold1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold1_1 <= Threshold1;
        end
      end
    end



  assign Gain1_cast = {1'b0, Threshold1_1};
  assign Gain1_mul_temp = kconst_3 * Gain1_cast;
  assign Gain1_cast_1 = Gain1_mul_temp[31:0];
  assign Gain1_out1 = {{11{Gain1_cast_1[31]}}, Gain1_cast_1[31:27]};


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Relational_Operator3_1_cast = {{10{Signal_w_2[15]}}, Signal_w_2};
  assign Relational_Operator3_1_cast_1 = {Gain1_out1_1, 10'b0000000000};
  assign Relational_Operator3_relop1 = Relational_Operator3_1_cast < Relational_Operator3_1_cast_1;


  assign Relational_Operator3_relop1_dtc = {15'b0, Relational_Operator3_relop1};



  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator3_relop1_dtc;
        end
      end
    end


  assign Relational_Operator4_relop1 = Delay2_out1 > Delay3_out1;


  assign Relational_Operator4_relop1_dtc = {15'b0, Relational_Operator4_relop1};



  assign switch_compare_1 = Relational_Operator4_relop1_dtc >= 16'sb0000000000000001;



  assign Add1_add_cast = {2'b0, Threshold1[15:2]};
  assign Add1_out1 = Signal_w_1 + Add1_add_cast;


  always @(posedge clk)
    begin : delayMatch9_process
      if (reset == 1'b1) begin
        delayMatch9_reg[0] <= 16'sb0000000000000000;
        delayMatch9_reg[1] <= 16'sb0000000000000000;
        delayMatch9_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch9_reg[0] <= delayMatch9_reg_next[0];
          delayMatch9_reg[1] <= delayMatch9_reg_next[1];
          delayMatch9_reg[2] <= delayMatch9_reg_next[2];
        end
      end
    end

  assign Delay4_out1 = delayMatch9_reg[2];
  assign delayMatch9_reg_next[0] = Add1_out1;
  assign delayMatch9_reg_next[1] = delayMatch9_reg[0];
  assign delayMatch9_reg_next[2] = delayMatch9_reg[1];


  assign Subtract1_sub_cast = {2'b0, Threshold1[15:2]};
  assign Subtract1_out1 = Signal_w_1 - Subtract1_sub_cast;


  assign Abs_cast = {Signal_w[15], Signal_w};
  assign Abs_y = (Signal_w < 16'sb0000000000000000 ?  - (Abs_cast) :
              {Signal_w[15], Signal_w});
  assign Abs_out1 = {Abs_y[14:0], 1'b0};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
        delayMatch_reg[2] <= 16'b0000000000000000;
        delayMatch_reg[3] <= 16'b0000000000000000;
        delayMatch_reg[4] <= 16'b0000000000000000;
        delayMatch_reg[5] <= 16'b0000000000000000;
        delayMatch_reg[6] <= 16'b0000000000000000;
        delayMatch_reg[7] <= 16'b0000000000000000;
        delayMatch_reg[8] <= 16'b0000000000000000;
        delayMatch_reg[9] <= 16'b0000000000000000;
        delayMatch_reg[10] <= 16'b0000000000000000;
        delayMatch_reg[11] <= 16'b0000000000000000;
        delayMatch_reg[12] <= 16'b0000000000000000;
        delayMatch_reg[13] <= 16'b0000000000000000;
        delayMatch_reg[14] <= 16'b0000000000000000;
        delayMatch_reg[15] <= 16'b0000000000000000;
        delayMatch_reg[16] <= 16'b0000000000000000;
        delayMatch_reg[17] <= 16'b0000000000000000;
        delayMatch_reg[18] <= 16'b0000000000000000;
        delayMatch_reg[19] <= 16'b0000000000000000;
        delayMatch_reg[20] <= 16'b0000000000000000;
        delayMatch_reg[21] <= 16'b0000000000000000;
        delayMatch_reg[22] <= 16'b0000000000000000;
        delayMatch_reg[23] <= 16'b0000000000000000;
        delayMatch_reg[24] <= 16'b0000000000000000;
        delayMatch_reg[25] <= 16'b0000000000000000;
        delayMatch_reg[26] <= 16'b0000000000000000;
        delayMatch_reg[27] <= 16'b0000000000000000;
        delayMatch_reg[28] <= 16'b0000000000000000;
        delayMatch_reg[29] <= 16'b0000000000000000;
        delayMatch_reg[30] <= 16'b0000000000000000;
        delayMatch_reg[31] <= 16'b0000000000000000;
        delayMatch_reg[32] <= 16'b0000000000000000;
        delayMatch_reg[33] <= 16'b0000000000000000;
        delayMatch_reg[34] <= 16'b0000000000000000;
        delayMatch_reg[35] <= 16'b0000000000000000;
        delayMatch_reg[36] <= 16'b0000000000000000;
        delayMatch_reg[37] <= 16'b0000000000000000;
        delayMatch_reg[38] <= 16'b0000000000000000;
        delayMatch_reg[39] <= 16'b0000000000000000;
        delayMatch_reg[40] <= 16'b0000000000000000;
        delayMatch_reg[41] <= 16'b0000000000000000;
        delayMatch_reg[42] <= 16'b0000000000000000;
        delayMatch_reg[43] <= 16'b0000000000000000;
        delayMatch_reg[44] <= 16'b0000000000000000;
        delayMatch_reg[45] <= 16'b0000000000000000;
        delayMatch_reg[46] <= 16'b0000000000000000;
        delayMatch_reg[47] <= 16'b0000000000000000;
        delayMatch_reg[48] <= 16'b0000000000000000;
        delayMatch_reg[49] <= 16'b0000000000000000;
        delayMatch_reg[50] <= 16'b0000000000000000;
        delayMatch_reg[51] <= 16'b0000000000000000;
        delayMatch_reg[52] <= 16'b0000000000000000;
        delayMatch_reg[53] <= 16'b0000000000000000;
        delayMatch_reg[54] <= 16'b0000000000000000;
        delayMatch_reg[55] <= 16'b0000000000000000;
        delayMatch_reg[56] <= 16'b0000000000000000;
        delayMatch_reg[57] <= 16'b0000000000000000;
        delayMatch_reg[58] <= 16'b0000000000000000;
        delayMatch_reg[59] <= 16'b0000000000000000;
        delayMatch_reg[60] <= 16'b0000000000000000;
        delayMatch_reg[61] <= 16'b0000000000000000;
        delayMatch_reg[62] <= 16'b0000000000000000;
        delayMatch_reg[63] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
          delayMatch_reg[8] <= delayMatch_reg_next[8];
          delayMatch_reg[9] <= delayMatch_reg_next[9];
          delayMatch_reg[10] <= delayMatch_reg_next[10];
          delayMatch_reg[11] <= delayMatch_reg_next[11];
          delayMatch_reg[12] <= delayMatch_reg_next[12];
          delayMatch_reg[13] <= delayMatch_reg_next[13];
          delayMatch_reg[14] <= delayMatch_reg_next[14];
          delayMatch_reg[15] <= delayMatch_reg_next[15];
          delayMatch_reg[16] <= delayMatch_reg_next[16];
          delayMatch_reg[17] <= delayMatch_reg_next[17];
          delayMatch_reg[18] <= delayMatch_reg_next[18];
          delayMatch_reg[19] <= delayMatch_reg_next[19];
          delayMatch_reg[20] <= delayMatch_reg_next[20];
          delayMatch_reg[21] <= delayMatch_reg_next[21];
          delayMatch_reg[22] <= delayMatch_reg_next[22];
          delayMatch_reg[23] <= delayMatch_reg_next[23];
          delayMatch_reg[24] <= delayMatch_reg_next[24];
          delayMatch_reg[25] <= delayMatch_reg_next[25];
          delayMatch_reg[26] <= delayMatch_reg_next[26];
          delayMatch_reg[27] <= delayMatch_reg_next[27];
          delayMatch_reg[28] <= delayMatch_reg_next[28];
          delayMatch_reg[29] <= delayMatch_reg_next[29];
          delayMatch_reg[30] <= delayMatch_reg_next[30];
          delayMatch_reg[31] <= delayMatch_reg_next[31];
          delayMatch_reg[32] <= delayMatch_reg_next[32];
          delayMatch_reg[33] <= delayMatch_reg_next[33];
          delayMatch_reg[34] <= delayMatch_reg_next[34];
          delayMatch_reg[35] <= delayMatch_reg_next[35];
          delayMatch_reg[36] <= delayMatch_reg_next[36];
          delayMatch_reg[37] <= delayMatch_reg_next[37];
          delayMatch_reg[38] <= delayMatch_reg_next[38];
          delayMatch_reg[39] <= delayMatch_reg_next[39];
          delayMatch_reg[40] <= delayMatch_reg_next[40];
          delayMatch_reg[41] <= delayMatch_reg_next[41];
          delayMatch_reg[42] <= delayMatch_reg_next[42];
          delayMatch_reg[43] <= delayMatch_reg_next[43];
          delayMatch_reg[44] <= delayMatch_reg_next[44];
          delayMatch_reg[45] <= delayMatch_reg_next[45];
          delayMatch_reg[46] <= delayMatch_reg_next[46];
          delayMatch_reg[47] <= delayMatch_reg_next[47];
          delayMatch_reg[48] <= delayMatch_reg_next[48];
          delayMatch_reg[49] <= delayMatch_reg_next[49];
          delayMatch_reg[50] <= delayMatch_reg_next[50];
          delayMatch_reg[51] <= delayMatch_reg_next[51];
          delayMatch_reg[52] <= delayMatch_reg_next[52];
          delayMatch_reg[53] <= delayMatch_reg_next[53];
          delayMatch_reg[54] <= delayMatch_reg_next[54];
          delayMatch_reg[55] <= delayMatch_reg_next[55];
          delayMatch_reg[56] <= delayMatch_reg_next[56];
          delayMatch_reg[57] <= delayMatch_reg_next[57];
          delayMatch_reg[58] <= delayMatch_reg_next[58];
          delayMatch_reg[59] <= delayMatch_reg_next[59];
          delayMatch_reg[60] <= delayMatch_reg_next[60];
          delayMatch_reg[61] <= delayMatch_reg_next[61];
          delayMatch_reg[62] <= delayMatch_reg_next[62];
          delayMatch_reg[63] <= delayMatch_reg_next[63];
        end
      end
    end

  assign Abs_out1_1 = delayMatch_reg[63];
  assign delayMatch_reg_next[0] = Abs_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];
  assign delayMatch_reg_next[8] = delayMatch_reg[7];
  assign delayMatch_reg_next[9] = delayMatch_reg[8];
  assign delayMatch_reg_next[10] = delayMatch_reg[9];
  assign delayMatch_reg_next[11] = delayMatch_reg[10];
  assign delayMatch_reg_next[12] = delayMatch_reg[11];
  assign delayMatch_reg_next[13] = delayMatch_reg[12];
  assign delayMatch_reg_next[14] = delayMatch_reg[13];
  assign delayMatch_reg_next[15] = delayMatch_reg[14];
  assign delayMatch_reg_next[16] = delayMatch_reg[15];
  assign delayMatch_reg_next[17] = delayMatch_reg[16];
  assign delayMatch_reg_next[18] = delayMatch_reg[17];
  assign delayMatch_reg_next[19] = delayMatch_reg[18];
  assign delayMatch_reg_next[20] = delayMatch_reg[19];
  assign delayMatch_reg_next[21] = delayMatch_reg[20];
  assign delayMatch_reg_next[22] = delayMatch_reg[21];
  assign delayMatch_reg_next[23] = delayMatch_reg[22];
  assign delayMatch_reg_next[24] = delayMatch_reg[23];
  assign delayMatch_reg_next[25] = delayMatch_reg[24];
  assign delayMatch_reg_next[26] = delayMatch_reg[25];
  assign delayMatch_reg_next[27] = delayMatch_reg[26];
  assign delayMatch_reg_next[28] = delayMatch_reg[27];
  assign delayMatch_reg_next[29] = delayMatch_reg[28];
  assign delayMatch_reg_next[30] = delayMatch_reg[29];
  assign delayMatch_reg_next[31] = delayMatch_reg[30];
  assign delayMatch_reg_next[32] = delayMatch_reg[31];
  assign delayMatch_reg_next[33] = delayMatch_reg[32];
  assign delayMatch_reg_next[34] = delayMatch_reg[33];
  assign delayMatch_reg_next[35] = delayMatch_reg[34];
  assign delayMatch_reg_next[36] = delayMatch_reg[35];
  assign delayMatch_reg_next[37] = delayMatch_reg[36];
  assign delayMatch_reg_next[38] = delayMatch_reg[37];
  assign delayMatch_reg_next[39] = delayMatch_reg[38];
  assign delayMatch_reg_next[40] = delayMatch_reg[39];
  assign delayMatch_reg_next[41] = delayMatch_reg[40];
  assign delayMatch_reg_next[42] = delayMatch_reg[41];
  assign delayMatch_reg_next[43] = delayMatch_reg[42];
  assign delayMatch_reg_next[44] = delayMatch_reg[43];
  assign delayMatch_reg_next[45] = delayMatch_reg[44];
  assign delayMatch_reg_next[46] = delayMatch_reg[45];
  assign delayMatch_reg_next[47] = delayMatch_reg[46];
  assign delayMatch_reg_next[48] = delayMatch_reg[47];
  assign delayMatch_reg_next[49] = delayMatch_reg[48];
  assign delayMatch_reg_next[50] = delayMatch_reg[49];
  assign delayMatch_reg_next[51] = delayMatch_reg[50];
  assign delayMatch_reg_next[52] = delayMatch_reg[51];
  assign delayMatch_reg_next[53] = delayMatch_reg[52];
  assign delayMatch_reg_next[54] = delayMatch_reg[53];
  assign delayMatch_reg_next[55] = delayMatch_reg[54];
  assign delayMatch_reg_next[56] = delayMatch_reg[55];
  assign delayMatch_reg_next[57] = delayMatch_reg[56];
  assign delayMatch_reg_next[58] = delayMatch_reg[57];
  assign delayMatch_reg_next[59] = delayMatch_reg[58];
  assign delayMatch_reg_next[60] = delayMatch_reg[59];
  assign delayMatch_reg_next[61] = delayMatch_reg[60];
  assign delayMatch_reg_next[62] = delayMatch_reg[61];
  assign delayMatch_reg_next[63] = delayMatch_reg[62];



  assign Relational_Operator1_1_cast = {20'b0, {Abs_out1_1, 1'b0}};
  assign Relational_Operator1_1_cast_1 = {21'b0, Threshold1};
  assign Relational_Operator1_relop1 = Relational_Operator1_1_cast == Relational_Operator1_1_cast_1;


  assign Relational_Operator1_relop1_dtc = {15'b0, Relational_Operator1_relop1};



  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Relational_Operator1_relop1_dtc;
        end
      end
    end


  assign Relational_Operator5_1_cast = {{18{Signal_w_1[15]}}, {Signal_w_1, 2'b00}};
  assign Relational_Operator5_1_cast_1 = {20'b0, Threshold1};
  assign Relational_Operator5_relop1 = Relational_Operator5_1_cast < Relational_Operator5_1_cast_1;


  assign Relational_Operator5_relop1_dtc = {15'b0, Relational_Operator5_relop1};



  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Relational_Operator5_relop1_dtc;
        end
      end
    end


  assign Relational_Operator6_relop1 = Delay5_out1 > Delay6_out1;


  assign Relational_Operator6_relop1_dtc = {15'b0, Relational_Operator6_relop1};



  assign switch_compare_1_1 = Relational_Operator6_relop1_dtc >= 16'sb0000000000000001;



  assign Constant_out1 = 16'sb0000000000000000;


  assign Threshold_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant_out1 :
              Constant_out1);


  always @(posedge clk)
    begin : delayMatch11_process
      if (reset == 1'b1) begin
        delayMatch11_reg[0] <= 16'sb0000000000000000;
        delayMatch11_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch11_reg[0] <= delayMatch11_reg_next[0];
          delayMatch11_reg[1] <= delayMatch11_reg_next[1];
        end
      end
    end

  assign Relational_Operator7_out1 = delayMatch11_reg[1];
  assign delayMatch11_reg_next[0] = Relational_Operator7_relop1_dtc;
  assign delayMatch11_reg_next[1] = delayMatch11_reg[0];



  assign switch_compare_1_2 = Relational_Operator7_out1 >= 16'sb0000000000000001;



  always @(posedge clk)
    begin : delayMatch8_process
      if (reset == 1'b1) begin
        delayMatch8_reg[0] <= 16'sb0000000000000000;
        delayMatch8_reg[1] <= 16'sb0000000000000000;
        delayMatch8_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch8_reg[0] <= delayMatch8_reg_next[0];
          delayMatch8_reg[1] <= delayMatch8_reg_next[1];
          delayMatch8_reg[2] <= delayMatch8_reg_next[2];
        end
      end
    end

  assign Delay1_out1 = delayMatch8_reg[2];
  assign delayMatch8_reg_next[0] = Subtract1_out1;
  assign delayMatch8_reg_next[1] = delayMatch8_reg[0];
  assign delayMatch8_reg_next[2] = delayMatch8_reg[1];


  assign Threshold_Switch_out1 = (switch_compare_1 == 1'b0 ? Delay4_out1 :
              Delay1_out1);


  always @(posedge clk)
    begin : delayMatch10_process
      if (reset == 1'b1) begin
        delayMatch10_reg[0] <= 16'sb0000000000000000;
        delayMatch10_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch10_reg[0] <= delayMatch10_reg_next[0];
          delayMatch10_reg[1] <= delayMatch10_reg_next[1];
        end
      end
    end

  assign Threshold_Switch1_out1_1 = delayMatch10_reg[1];
  assign delayMatch10_reg_next[0] = Threshold_Switch1_out1;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];



  assign Threshold_Switch1_out1_dtc = 16'sb0000000000000000;



  assign Threshold_Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Threshold_Switch_out1 :
              Threshold_Switch1_out1_dtc);


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Threshold_Switch2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold_Switch2_out1_1 <= Threshold_Switch2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Threshold_Switch2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign New_Threshold = Gain_out1_1;

endmodule  // Soft_Thresholding

`timescale 1 ns / 1 ns

module Soft_Thresholding1
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold1,
           New_Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En27
  input   [15:0] Threshold1;  // ufix16_En27
  output  signed [15:0] New_Threshold;  // sfix16_En28


  wire [15:0] kconst;  // ufix16_En18
  reg [15:0] kconst_1;  // ufix16_En18
  reg signed [15:0] reduced_reg [0:3];  // sfix16 [4]
  wire signed [15:0] reduced_reg_next [0:3];  // sfix16_En27 [4]
  wire signed [15:0] Signal_w_1;  // sfix16_En27
  wire signed [38:0] Relational_Operator7_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator7_1_cast_1;  // sfix39_En27
  wire Relational_Operator7_relop1;
  wire signed [15:0] Relational_Operator7_relop1_dtc;  // int16
  wire signed [38:0] Relational_Operator2_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator2_1_cast_1;  // sfix39_En27
  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  reg signed [15:0] delayMatch6_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch6_reg_next [0:2];  // sfix16 [3]
  wire signed [15:0] Delay2_out1;  // int16
  reg signed [15:0] reduced_reg_1 [0:1];  // sfix16 [2]
  wire signed [15:0] reduced_reg_next_1 [0:1];  // sfix16_En27 [2]
  wire signed [15:0] Signal_w_2;  // sfix16_En27
  wire signed [15:0] kconst_2;  // sfix16_En15
  reg signed [15:0] kconst_3;  // sfix16_En15
  reg [15:0] Threshold1_1;  // ufix16_En27
  wire signed [16:0] Gain1_cast;  // sfix17_En27
  wire signed [32:0] Gain1_mul_temp;  // sfix33_En42
  wire signed [31:0] Gain1_cast_1;  // sfix32_En42
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  reg signed [15:0] Gain1_out1_1;  // sfix16_En15
  wire signed [27:0] Relational_Operator3_1_cast;  // sfix28_En27
  wire signed [27:0] Relational_Operator3_1_cast_1;  // sfix28_En27
  wire Relational_Operator3_relop1;
  wire signed [15:0] Relational_Operator3_relop1_dtc;  // int16
  reg signed [15:0] Delay3_out1;  // int16
  wire Relational_Operator4_relop1;
  wire signed [15:0] Relational_Operator4_relop1_dtc;  // int16
  wire switch_compare_1;
  wire signed [15:0] Add1_add_cast;  // sfix16_En26
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En26
  wire signed [15:0] Add1_out1;  // sfix16_En26
  reg signed [15:0] delayMatch9_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch9_reg_next [0:2];  // sfix16_En26 [3]
  wire signed [15:0] Delay4_out1;  // sfix16_En26
  wire signed [15:0] Subtract1_sub_cast;  // sfix16_En26
  wire signed [15:0] Subtract1_sub_cast_1;  // sfix16_En26
  wire signed [15:0] Subtract1_out1;  // sfix16_En26
  wire signed [16:0] Abs_y;  // sfix17_En27
  wire signed [16:0] Abs_cast;  // sfix17_En27
  wire [15:0] Abs_out1;  // ufix16_En28
  reg [15:0] delayMatch_reg [0:3];  // ufix16 [4]
  wire [15:0] delayMatch_reg_next [0:3];  // ufix16_En28 [4]
  wire [15:0] Abs_out1_1;  // ufix16_En28
  wire [38:0] Relational_Operator1_1_cast;  // ufix39_En28
  wire [38:0] Relational_Operator1_1_cast_1;  // ufix39_En28
  wire Relational_Operator1_relop1;
  wire signed [15:0] Relational_Operator1_relop1_dtc;  // int16
  reg signed [15:0] Delay5_out1;  // int16
  wire signed [38:0] Relational_Operator5_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator5_1_cast_1;  // sfix39_En27
  wire Relational_Operator5_relop1;
  wire signed [15:0] Relational_Operator5_relop1_dtc;  // int16
  reg signed [15:0] Delay6_out1;  // int16
  wire Relational_Operator6_relop1;
  wire signed [15:0] Relational_Operator6_relop1_dtc;  // int16
  wire switch_compare_1_1;
  wire signed [15:0] Constant_out1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1;  // sfix16_En4
  reg signed [15:0] delayMatch11_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch11_reg_next [0:1];  // sfix16 [2]
  wire signed [15:0] Relational_Operator7_out1;  // int16
  wire switch_compare_1_2;
  reg signed [15:0] delayMatch8_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch8_reg_next [0:2];  // sfix16_En26 [3]
  wire signed [15:0] Delay1_out1;  // sfix16_En26
  wire signed [15:0] Threshold_Switch_out1;  // sfix16_En26
  reg signed [15:0] delayMatch10_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch10_reg_next [0:1];  // sfix16_En4 [2]
  wire signed [15:0] Threshold_Switch1_out1_1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1_dtc;  // sfix16_En26
  wire signed [15:0] Threshold_Switch2_out1;  // sfix16_En26
  reg signed [15:0] Threshold_Switch2_out1_1;  // sfix16_En26
  wire signed [16:0] Gain_cast;  // sfix17_En18
  wire signed [32:0] Gain_mul_temp;  // sfix33_En44
  wire signed [31:0] Gain_cast_1;  // sfix32_En44
  wire signed [15:0] Gain_out1;  // sfix16_En28
  reg signed [15:0] Gain_out1_1;  // sfix16_En28


  assign kconst = 16'b1101111010001001;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'sb0000000000000000;
        reduced_reg[1] <= 16'sb0000000000000000;
        reduced_reg[2] <= 16'sb0000000000000000;
        reduced_reg[3] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
        end
      end
    end

  assign Signal_w_1 = reduced_reg[3];
  assign reduced_reg_next[0] = Signal_w;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];



  assign Relational_Operator7_1_cast = {{23{Signal_w_1[15]}}, Signal_w_1};
  assign Relational_Operator7_1_cast_1 = {23'b0, Threshold1};
  assign Relational_Operator7_relop1 = Relational_Operator7_1_cast == Relational_Operator7_1_cast_1;


  assign Relational_Operator7_relop1_dtc = {15'b0, Relational_Operator7_relop1};



  assign Relational_Operator2_1_cast = {{23{Signal_w_1[15]}}, Signal_w_1};
  assign Relational_Operator2_1_cast_1 = {23'b0, Threshold1};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast > Relational_Operator2_1_cast_1;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  always @(posedge clk)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        delayMatch6_reg[0] <= 16'sb0000000000000000;
        delayMatch6_reg[1] <= 16'sb0000000000000000;
        delayMatch6_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
          delayMatch6_reg[2] <= delayMatch6_reg_next[2];
        end
      end
    end

  assign Delay2_out1 = delayMatch6_reg[2];
  assign delayMatch6_reg_next[0] = Relational_Operator2_relop1_dtc;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];
  assign delayMatch6_reg_next[2] = delayMatch6_reg[1];


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 16'sb0000000000000000;
        reduced_reg_1[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
        end
      end
    end

  assign Signal_w_2 = reduced_reg_1[1];
  assign reduced_reg_next_1[0] = Signal_w_1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];



  assign kconst_2 = 16'sb1000000000000000;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Threshold1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold1_1 <= Threshold1;
        end
      end
    end



  assign Gain1_cast = {1'b0, Threshold1_1};
  assign Gain1_mul_temp = kconst_3 * Gain1_cast;
  assign Gain1_cast_1 = Gain1_mul_temp[31:0];
  assign Gain1_out1 = {{11{Gain1_cast_1[31]}}, Gain1_cast_1[31:27]};


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Relational_Operator3_1_cast = {{12{Signal_w_2[15]}}, Signal_w_2};
  assign Relational_Operator3_1_cast_1 = {Gain1_out1_1, 12'b000000000000};
  assign Relational_Operator3_relop1 = Relational_Operator3_1_cast < Relational_Operator3_1_cast_1;


  assign Relational_Operator3_relop1_dtc = {15'b0, Relational_Operator3_relop1};



  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator3_relop1_dtc;
        end
      end
    end


  assign Relational_Operator4_relop1 = Delay2_out1 > Delay3_out1;


  assign Relational_Operator4_relop1_dtc = {15'b0, Relational_Operator4_relop1};



  assign switch_compare_1 = Relational_Operator4_relop1_dtc >= 16'sb0000000000000001;



  assign Add1_add_cast = {Signal_w_1[15], Signal_w_1[15:1]};
  assign Add1_add_cast_1 = {1'b0, Threshold1[15:1]};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;


  always @(posedge clk)
    begin : delayMatch9_process
      if (reset == 1'b1) begin
        delayMatch9_reg[0] <= 16'sb0000000000000000;
        delayMatch9_reg[1] <= 16'sb0000000000000000;
        delayMatch9_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch9_reg[0] <= delayMatch9_reg_next[0];
          delayMatch9_reg[1] <= delayMatch9_reg_next[1];
          delayMatch9_reg[2] <= delayMatch9_reg_next[2];
        end
      end
    end

  assign Delay4_out1 = delayMatch9_reg[2];
  assign delayMatch9_reg_next[0] = Add1_out1;
  assign delayMatch9_reg_next[1] = delayMatch9_reg[0];
  assign delayMatch9_reg_next[2] = delayMatch9_reg[1];


  assign Subtract1_sub_cast = {Signal_w_1[15], Signal_w_1[15:1]};
  assign Subtract1_sub_cast_1 = {1'b0, Threshold1[15:1]};
  assign Subtract1_out1 = Subtract1_sub_cast - Subtract1_sub_cast_1;


  assign Abs_cast = {Signal_w[15], Signal_w};
  assign Abs_y = (Signal_w < 16'sb0000000000000000 ?  - (Abs_cast) :
              {Signal_w[15], Signal_w});
  assign Abs_out1 = {Abs_y[14:0], 1'b0};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
        delayMatch_reg[2] <= 16'b0000000000000000;
        delayMatch_reg[3] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
        end
      end
    end

  assign Abs_out1_1 = delayMatch_reg[3];
  assign delayMatch_reg_next[0] = Abs_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];



  assign Relational_Operator1_1_cast = {23'b0, Abs_out1_1};
  assign Relational_Operator1_1_cast_1 = {22'b0, {Threshold1, 1'b0}};
  assign Relational_Operator1_relop1 = Relational_Operator1_1_cast == Relational_Operator1_1_cast_1;


  assign Relational_Operator1_relop1_dtc = {15'b0, Relational_Operator1_relop1};



  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Relational_Operator1_relop1_dtc;
        end
      end
    end


  assign Relational_Operator5_1_cast = {{23{Signal_w_1[15]}}, Signal_w_1};
  assign Relational_Operator5_1_cast_1 = {23'b0, Threshold1};
  assign Relational_Operator5_relop1 = Relational_Operator5_1_cast < Relational_Operator5_1_cast_1;


  assign Relational_Operator5_relop1_dtc = {15'b0, Relational_Operator5_relop1};



  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Relational_Operator5_relop1_dtc;
        end
      end
    end


  assign Relational_Operator6_relop1 = Delay5_out1 > Delay6_out1;


  assign Relational_Operator6_relop1_dtc = {15'b0, Relational_Operator6_relop1};



  assign switch_compare_1_1 = Relational_Operator6_relop1_dtc >= 16'sb0000000000000001;



  assign Constant_out1 = 16'sb0000000000000000;


  assign Threshold_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant_out1 :
              Constant_out1);


  always @(posedge clk)
    begin : delayMatch11_process
      if (reset == 1'b1) begin
        delayMatch11_reg[0] <= 16'sb0000000000000000;
        delayMatch11_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch11_reg[0] <= delayMatch11_reg_next[0];
          delayMatch11_reg[1] <= delayMatch11_reg_next[1];
        end
      end
    end

  assign Relational_Operator7_out1 = delayMatch11_reg[1];
  assign delayMatch11_reg_next[0] = Relational_Operator7_relop1_dtc;
  assign delayMatch11_reg_next[1] = delayMatch11_reg[0];



  assign switch_compare_1_2 = Relational_Operator7_out1 >= 16'sb0000000000000001;



  always @(posedge clk)
    begin : delayMatch8_process
      if (reset == 1'b1) begin
        delayMatch8_reg[0] <= 16'sb0000000000000000;
        delayMatch8_reg[1] <= 16'sb0000000000000000;
        delayMatch8_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch8_reg[0] <= delayMatch8_reg_next[0];
          delayMatch8_reg[1] <= delayMatch8_reg_next[1];
          delayMatch8_reg[2] <= delayMatch8_reg_next[2];
        end
      end
    end

  assign Delay1_out1 = delayMatch8_reg[2];
  assign delayMatch8_reg_next[0] = Subtract1_out1;
  assign delayMatch8_reg_next[1] = delayMatch8_reg[0];
  assign delayMatch8_reg_next[2] = delayMatch8_reg[1];


  assign Threshold_Switch_out1 = (switch_compare_1 == 1'b0 ? Delay4_out1 :
              Delay1_out1);


  always @(posedge clk)
    begin : delayMatch10_process
      if (reset == 1'b1) begin
        delayMatch10_reg[0] <= 16'sb0000000000000000;
        delayMatch10_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch10_reg[0] <= delayMatch10_reg_next[0];
          delayMatch10_reg[1] <= delayMatch10_reg_next[1];
        end
      end
    end

  assign Threshold_Switch1_out1_1 = delayMatch10_reg[1];
  assign delayMatch10_reg_next[0] = Threshold_Switch1_out1;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];



  assign Threshold_Switch1_out1_dtc = 16'sb0000000000000000;



  assign Threshold_Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Threshold_Switch_out1 :
              Threshold_Switch1_out1_dtc);


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Threshold_Switch2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold_Switch2_out1_1 <= Threshold_Switch2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Threshold_Switch2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign New_Threshold = Gain_out1_1;

endmodule  // Soft_Thresholding1

`timescale 1 ns / 1 ns

module Absolute_Value1
          (clk,
           reset,
           enb,
           Signal_w4,
           Out_Abs);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w4;  // sfix16_En27
  output  [15:0] Out_Abs;  // ufix16_En28


  wire signed [15:0] Constant295_out1;  // sfix16_En4
  wire signed [38:0] Relational_Operator2_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator2_1_cast_1;  // sfix39_En27
  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  reg signed [15:0] Signal_w4_1;  // sfix16_En27
  wire signed [15:0] kconst;  // sfix16_En15
  reg signed [15:0] kconst_1;  // sfix16_En15
  wire signed [31:0] Gain2_mul_temp;  // sfix32_En42
  wire [15:0] Gain2_out1;  // ufix16_En29
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16 [2]
  wire signed [15:0] Relational_Operator2_out1;  // int16
  wire switch_compare_1;
  reg signed [15:0] Signal_w4_2;  // sfix16_En27
  wire [15:0] Signal_w4_dtc;  // ufix16_En28
  reg [15:0] Gain2_out1_1;  // ufix16_En29
  wire [15:0] Gain2_out1_dtc;  // ufix16_En28
  wire [15:0] Absolute_Switch_out1;  // ufix16_En28


  assign Constant295_out1 = 16'sb0000000000000000;


  assign Relational_Operator2_1_cast = {{23{Signal_w4[15]}}, Signal_w4};
  assign Relational_Operator2_1_cast_1 = {Constant295_out1, 23'b00000000000000000000000};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast < Relational_Operator2_1_cast_1;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        Signal_w4_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Signal_w4_1 <= Signal_w4;
        end
      end
    end



  assign kconst = 16'sb1000000000000000;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  assign Gain2_mul_temp = kconst_1 * Signal_w4_1;
  assign Gain2_out1 = Gain2_mul_temp[28:13];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Relational_Operator2_out1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Relational_Operator2_relop1_dtc;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign switch_compare_1 = Relational_Operator2_out1 >= 16'sb0000000000000001;



  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Signal_w4_2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Signal_w4_2 <= Signal_w4_1;
        end
      end
    end



  assign Signal_w4_dtc = {Signal_w4_2[14:0], 1'b0};



  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Gain2_out1_1 <= Gain2_out1;
        end
      end
    end



  assign Gain2_out1_dtc = {1'b0, Gain2_out1_1[15:1]};



  assign Absolute_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal_w4_dtc :
              Gain2_out1_dtc);


  assign Out_Abs = Absolute_Switch_out1;

endmodule  // Absolute_Value1

`timescale 1 ns / 1 ns

module Data_Sorter1
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter1

`timescale 1 ns / 1 ns

module Data_Sorter2
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter2

`timescale 1 ns / 1 ns

module Data_Sorter3
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter3

`timescale 1 ns / 1 ns

module Data_Sorter4
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter4

`timescale 1 ns / 1 ns

module Data_Sorter5
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter5

`timescale 1 ns / 1 ns

module Data_Sorter6
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter6

`timescale 1 ns / 1 ns

module Data_Sorter7
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter7


`timescale 1 ns / 1 ns

module Data_Sorter8
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter8

`timescale 1 ns / 1 ns

module Data_Sorter9
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter9

`timescale 1 ns / 1 ns

module Data_Sorter10
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter10

`timescale 1 ns / 1 ns

module Data_Sorter11
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter11

`timescale 1 ns / 1 ns

module Data_Sorter12
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter12

`timescale 1 ns / 1 ns

module Data_Sorter13
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter13

`timescale 1 ns / 1 ns

module Data_Sorter14
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter14

`timescale 1 ns / 1 ns

module Data_Sorter15
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter15

`timescale 1 ns / 1 ns

module Data_Sorter16
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter16

`timescale 1 ns / 1 ns

module Data_Sorter17
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter17

`timescale 1 ns / 1 ns

module Data_Sorter18
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

endmodule  // Data_Sorter18

`timescale 1 ns / 1 ns

module Data_Sorter19
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter19

`timescale 1 ns / 1 ns

module Data_Sorter20
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter20

`timescale 1 ns / 1 ns

module Data_Sorter21
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

endmodule  // Data_Sorter21

`timescale 1 ns / 1 ns

module Data_Sorter22
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter22

`timescale 1 ns / 1 ns

module Data_Sorter23
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

endmodule  // Data_Sorter23

`timescale 1 ns / 1 ns

module Data_Sorter24
          (clk,
           reset,
           enb,
           Signal1,
           Signal2,
           High_Data,
           Low_Data);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal1;  // ufix16_En28
  input   [15:0] Signal2;  // ufix16_En28
  output  [15:0] High_Data;  // ufix16_En28
  output  [15:0] Low_Data;  // ufix16_En28


  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  wire switch_compare_1;
  wire [15:0] Data_Sorter_Switch_out1;  // ufix16_En28
  reg [15:0] Delay1_out1;  // ufix16_En28
  wire switch_compare_1_1;
  wire [15:0] Data_Sorter_Switch1_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28


  assign Relational_Operator2_relop1 = Signal1 < Signal2;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  assign switch_compare_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000000;



  assign Data_Sorter_Switch_out1 = (switch_compare_1 == 1'b0 ? Signal1 :
              Signal1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Data_Sorter_Switch_out1;
        end
      end
    end


  assign High_Data = Delay1_out1;

  assign switch_compare_1_1 = Relational_Operator2_relop1_dtc >= 16'sb0000000000000001;



  assign Data_Sorter_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Signal2 :
              Signal2);


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Data_Sorter_Switch1_out1;
        end
      end
    end


  assign Low_Data = Delay2_out1;

endmodule  // Data_Sorter24

`timescale 1 ns / 1 ns

module Median2
          (clk,
           reset,
           enb,
           Signal_w3,
           Median);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] Signal_w3;  // ufix16_En28
  output  [15:0] Median;  // ufix16_En28


  reg [15:0] Delay8_out1;  // ufix16_En28
  wire [15:0] Data_Sorter1_out1;  // ufix16_En28
  wire [15:0] Data_Sorter1_out2;  // ufix16_En28
  reg [15:0] Delay6_out1;  // ufix16_En28
  reg [15:0] Delay5_out1;  // ufix16_En28
  wire [15:0] Data_Sorter2_out1;  // ufix16_En28
  wire [15:0] Data_Sorter2_out2;  // ufix16_En28
  wire [15:0] Data_Sorter5_out1;  // ufix16_En28
  wire [15:0] Data_Sorter5_out2;  // ufix16_En28
  wire [15:0] Data_Sorter8_out1;  // ufix16_En28
  wire [15:0] Data_Sorter8_out2;  // ufix16_En28
  reg [15:0] Delay4_out1;  // ufix16_En28
  reg [15:0] Delay3_out1;  // ufix16_En28
  wire [15:0] Data_Sorter3_out1;  // ufix16_En28
  wire [15:0] Data_Sorter3_out2;  // ufix16_En28
  wire [15:0] Data_Sorter6_out1;  // ufix16_En28
  wire [15:0] Data_Sorter6_out2;  // ufix16_En28
  wire [15:0] Data_Sorter9_out1;  // ufix16_En28
  wire [15:0] Data_Sorter9_out2;  // ufix16_En28
  wire [15:0] Data_Sorter12_out1;  // ufix16_En28
  wire [15:0] Data_Sorter12_out2;  // ufix16_En28
  wire [15:0] Data_Sorter15_out1;  // ufix16_En28
  reg [15:0] Delay7_out1;  // ufix16_En28
  reg [15:0] Delay2_out1;  // ufix16_En28
  wire [15:0] Data_Sorter4_out1;  // ufix16_En28
  wire [15:0] Data_Sorter4_out2;  // ufix16_En28
  wire [15:0] Data_Sorter7_out1;  // ufix16_En28
  wire [15:0] Data_Sorter7_out2;  // ufix16_En28
  wire [15:0] Data_Sorter10_out1;  // ufix16_En28
  wire [15:0] Data_Sorter10_out2;  // ufix16_En28
  wire [15:0] Data_Sorter13_out1;  // ufix16_En28
  wire [15:0] Data_Sorter13_out2;  // ufix16_En28
  wire [15:0] Data_Sorter16_out1;  // ufix16_En28
  wire [15:0] Data_Sorter16_out2;  // ufix16_En28
  wire [15:0] Data_Sorter19_out1;  // ufix16_En28
  wire [15:0] Data_Sorter11_out1;  // ufix16_En28
  wire [15:0] Data_Sorter11_out2;  // ufix16_En28
  wire [15:0] Data_Sorter14_out1;  // ufix16_En28
  wire [15:0] Data_Sorter14_out2;  // ufix16_En28
  wire [15:0] Data_Sorter17_out1;  // ufix16_En28
  wire [15:0] Data_Sorter17_out2;  // ufix16_En28
  wire [15:0] Data_Sorter20_out1;  // ufix16_En28
  wire [15:0] Data_Sorter20_out2;  // ufix16_En28
  wire [15:0] Data_Sorter22_out1;  // ufix16_En28
  wire [15:0] Data_Sorter18_out1;  // ufix16_En28
  wire [15:0] Data_Sorter21_out1;  // ufix16_En28
  wire [15:0] Data_Sorter23_out1;  // ufix16_En28
  wire [15:0] Data_Sorter24_out1;  // ufix16_En28
  wire [15:0] Data_Sorter24_out2;  // ufix16_En28
  wire [15:0] Add_add_cast;  // ufix16_En27
  wire [15:0] Add_add_cast_1;  // ufix16_En27
  wire [15:0] Add_out1;  // ufix16_En27
  reg [15:0] Delay1_out1;  // ufix16_En27
  wire [31:0] Gain_cast;  // ufix32_En43
  wire [15:0] Gain_out1;  // ufix16_En28
  reg [15:0] Delay_out1;  // ufix16_En28


  always @(posedge clk)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Signal_w3;
        end
      end
    end


  Data_Sorter1 u_Data_Sorter1 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Signal_w3),  // ufix16_En28
                               .Signal2(Delay8_out1),  // ufix16_En28
                               .High_Data(Data_Sorter1_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter1_out2)  // ufix16_En28
                               );
  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Delay8_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Delay6_out1;
        end
      end
    end


  Data_Sorter2 u_Data_Sorter2 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Delay6_out1),  // ufix16_En28
                               .Signal2(Delay5_out1),  // ufix16_En28
                               .High_Data(Data_Sorter2_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter2_out2)  // ufix16_En28
                               );
  Data_Sorter5 u_Data_Sorter5 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter1_out2),  // ufix16_En28
                               .Signal2(Data_Sorter2_out1),  // ufix16_En28
                               .High_Data(Data_Sorter5_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter5_out2)  // ufix16_En28
                               );
  Data_Sorter8 u_Data_Sorter8 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter1_out1),  // ufix16_En28
                               .Signal2(Data_Sorter5_out1),  // ufix16_En28
                               .High_Data(Data_Sorter8_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter8_out2)  // ufix16_En28
                               );
  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Delay5_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Delay4_out1;
        end
      end
    end


  Data_Sorter3 u_Data_Sorter3 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Delay4_out1),  // ufix16_En28
                               .Signal2(Delay3_out1),  // ufix16_En28
                               .High_Data(Data_Sorter3_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter3_out2)  // ufix16_En28
                               );
  Data_Sorter6 u_Data_Sorter6 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter2_out2),  // ufix16_En28
                               .Signal2(Data_Sorter3_out1),  // ufix16_En28
                               .High_Data(Data_Sorter6_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter6_out2)  // ufix16_En28
                               );
  Data_Sorter9 u_Data_Sorter9 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter5_out2),  // ufix16_En28
                               .Signal2(Data_Sorter6_out1),  // ufix16_En28
                               .High_Data(Data_Sorter9_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter9_out2)  // ufix16_En28
                               );
  Data_Sorter12 u_Data_Sorter12 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter8_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter9_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter12_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter12_out2)  // ufix16_En28
                                 );
  Data_Sorter15 u_Data_Sorter15 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter8_out1),  // ufix16_En28
                                 .Signal2(Data_Sorter12_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter15_out1)  // ufix16_En28
                                 );
  always @(posedge clk)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= Delay3_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Delay7_out1;
        end
      end
    end


  Data_Sorter4 u_Data_Sorter4 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Delay7_out1),  // ufix16_En28
                               .Signal2(Delay2_out1),  // ufix16_En28
                               .High_Data(Data_Sorter4_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter4_out2)  // ufix16_En28
                               );
  Data_Sorter7 u_Data_Sorter7 (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .Signal1(Data_Sorter3_out2),  // ufix16_En28
                               .Signal2(Data_Sorter4_out1),  // ufix16_En28
                               .High_Data(Data_Sorter7_out1),  // ufix16_En28
                               .Low_Data(Data_Sorter7_out2)  // ufix16_En28
                               );
  Data_Sorter10 u_Data_Sorter10 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter6_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter7_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter10_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter10_out2)  // ufix16_En28
                                 );
  Data_Sorter13 u_Data_Sorter13 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter9_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter10_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter13_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter13_out2)  // ufix16_En28
                                 );
  Data_Sorter16 u_Data_Sorter16 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter12_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter13_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter16_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter16_out2)  // ufix16_En28
                                 );
  Data_Sorter19 u_Data_Sorter19 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter15_out1),  // ufix16_En28
                                 .Signal2(Data_Sorter16_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter19_out1)  // ufix16_En28
                                 );
  Data_Sorter11 u_Data_Sorter11 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter7_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter4_out2),  // ufix16_En28
                                 .High_Data(Data_Sorter11_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter11_out2)  // ufix16_En28
                                 );
  Data_Sorter14 u_Data_Sorter14 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter10_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter11_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter14_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter14_out2)  // ufix16_En28
                                 );
  Data_Sorter17 u_Data_Sorter17 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter13_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter14_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter17_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter17_out2)  // ufix16_En28
                                 );
  Data_Sorter20 u_Data_Sorter20 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter16_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter17_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter20_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter20_out2)  // ufix16_En28
                                 );
  Data_Sorter22 u_Data_Sorter22 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter19_out1),  // ufix16_En28
                                 .Signal2(Data_Sorter20_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter22_out1)  // ufix16_En28
                                 );
  Data_Sorter18 u_Data_Sorter18 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter14_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter11_out2),  // ufix16_En28
                                 .High_Data(Data_Sorter18_out1)  // ufix16_En28
                                 );
  Data_Sorter21 u_Data_Sorter21 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter17_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter18_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter21_out1)  // ufix16_En28
                                 );
  Data_Sorter23 u_Data_Sorter23 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter20_out2),  // ufix16_En28
                                 .Signal2(Data_Sorter21_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter23_out1)  // ufix16_En28
                                 );
  Data_Sorter24 u_Data_Sorter24 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .Signal1(Data_Sorter22_out1),  // ufix16_En28
                                 .Signal2(Data_Sorter23_out1),  // ufix16_En28
                                 .High_Data(Data_Sorter24_out1),  // ufix16_En28
                                 .Low_Data(Data_Sorter24_out2)  // ufix16_En28
                                 );
  assign Add_add_cast = {1'b0, Data_Sorter24_out1[15:1]};
  assign Add_add_cast_1 = {1'b0, Data_Sorter24_out2[15:1]};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Add_out1;
        end
      end
    end


  assign Gain_cast = {1'b0, {Delay1_out1, 15'b000000000000000}};
  assign Gain_out1 = Gain_cast[30:15];


  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Gain_out1;
        end
      end
    end


  assign Median = Delay_out1;

endmodule  // Median2

`timescale 1 ns / 1 ns

module Threshold_Estimator
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En27
  output  [15:0] Threshold;  // ufix16_En27


  wire [15:0] Absolute_Value1_out1;  // ufix16_En28
  wire [15:0] Median2_out1;  // ufix16_En28
  reg [15:0] Median2_out1_1;  // ufix16_En28
  wire [15:0] Length_out1;  // ufix16_En14
  reg [15:0] Length_out1_1;  // ufix16_En14
  wire [31:0] Multiply_mul_temp;  // ufix32_En42
  wire [15:0] Multiply_out1;  // ufix16_En27
  reg [15:0] Multiply_out1_1;  // ufix16_En27


  Absolute_Value1 u_Absolute_Value1 (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .Signal_w4(Signal_w),  // sfix16_En27
                                     .Out_Abs(Absolute_Value1_out1)  // ufix16_En28
                                     );
  Median2 u_Median2 (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .Signal_w3(Absolute_Value1_out1),  // ufix16_En28
                     .Median(Median2_out1)  // ufix16_En28
                     );
  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Median2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Median2_out1_1 <= Median2_out1;
        end
      end
    end



  assign Length_out1 = 16'b1001001100111111;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Length_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Length_out1_1 <= Length_out1;
        end
      end
    end



  assign Multiply_mul_temp = Median2_out1_1 * Length_out1_1;
  assign Multiply_out1 = Multiply_mul_temp[30:15];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign Threshold = Multiply_out1_1;

endmodule  // Threshold_Estimator

`timescale 1 ns / 1 ns

module db2_level2_final_hdl_2_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_1_1,
           enb_1_30_0,
           enb_1_30_1,
           enb_1_30_4);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_1_1;
  output  enb_1_30_0;
  output  enb_1_30_1;
  output  enb_1_30_4;


  reg [4:0] count30;  // ufix5
  wire phase_all;
  reg  phase_0;
  wire phase_0_tmp;
  reg  phase_1;
  wire phase_1_tmp;
  reg  phase_4;
  wire phase_4_tmp;


  always @ (posedge clk)
    begin: Counter30
      if (reset == 1'b1) begin
        count30 <= 5'b00001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count30 >= 5'b11101) begin
            count30 <= 5'b00000;
          end
          else begin
            count30 <= count30 + 5'b00001;
          end
        end
      end
    end // Counter30

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process1
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count30 == 5'b11101 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process2
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count30 == 5'b00000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ ( posedge clk)
    begin: temp_process3
      if (reset == 1'b1) begin
        phase_4 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_4 <= phase_4_tmp;
        end
      end
    end // temp_process3

  assign  phase_4_tmp = (count30 == 5'b00011 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb =  phase_all & clk_enable;

  assign enb_1_1_1 =  phase_all & clk_enable;

  assign enb_1_30_0 =  phase_0 & clk_enable;

  assign enb_1_30_1 =  phase_1 & clk_enable;

  assign enb_1_30_4 =  phase_4 & clk_enable;


endmodule  // db2_level2_final_hdl_2_tc

`timescale 1 ns / 1 ns

`timescale 1 ns / 1 ns

module DWT_Algo_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out1_done;  // ufix1
  wire ce_out;
  wire Out1_done_enb;  // ufix1
  reg [18:0] Out1_addr;  // ufix19
  wire Out1_active;  // ufix1
  reg [18:0] Data_Type_Conversion_out1_addr;  // ufix19
  wire Data_Type_Conversion_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Data_Type_Conversion_out1_enb;  // ufix1
  wire [18:0] Data_Type_Conversion_out1_addr_delay_1;  // ufix19
  reg signed [31:0] fp_In_E;  // sfix32
  reg [15:0] rawData_In_E;  // ufix16_En24
  reg signed [31:0] status_In_E;  // sfix32
  reg [15:0] holdData_In_E;  // ufix16_En24
  reg [15:0] In_E_offset;  // ufix16_En24
  wire [15:0] In_E;  // ufix16_En24
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire notDone;
  wire signed [15:0] Out1;  // sfix16_En23
  wire Out1_enb;  // ufix1
  wire Out1_lastAddr;  // ufix1
  wire [18:0] Out1_addr_delay_1;  // ufix19
  reg signed [31:0] fp_Out1_expected;  // sfix32
  reg signed [15:0] Out1_expected;  // sfix16_En23
  reg signed [31:0] status_Out1_expected;  // sfix32
  reg signed [15:0] Out1_ref_hold;  // sfix16_En23
  wire signed [15:0] Out1_refTmp;  // sfix16_En23
  wire signed [15:0] Out1_ref;  // sfix16_En23
  reg  Out1_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out1_done_enb = Out1_done & ce_out;



  assign Out1_active = Out1_addr != 19'b1010110001000100000;



  assign Data_Type_Conversion_out1_active = Data_Type_Conversion_out1_addr != 19'b1010110001000100000;



  assign Data_Type_Conversion_out1_enb = Data_Type_Conversion_out1_active & (tb_enb_delay & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 352800
  always @(posedge clk)
    begin : DataTypeConversion_process
      if (reset == 1'b1) begin
        Data_Type_Conversion_out1_addr <= 19'b0000000000000000000;
      end
      else begin
        if (Data_Type_Conversion_out1_enb) begin
          if (Data_Type_Conversion_out1_addr >= 19'b1010110001000100000) begin
            Data_Type_Conversion_out1_addr <= 19'b0000000000000000000;
          end
          else begin
            Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + 19'b0000000000000000001;
          end
        end
      end
    end



  assign #1 Data_Type_Conversion_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for In_E
  initial
    begin : In_E_fileread
      fp_In_E = $fopen("In_E.dat", "r");
      status_In_E = $rewind(fp_In_E);
    end

  always @(Data_Type_Conversion_out1_addr_delay_1, tb_enb_delay, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In_E <= 16'bx;
      end
      else if (tb_enb_delay == 1) begin
        status_In_E = $fscanf(fp_In_E, "%h", rawData_In_E);
      end
    end

  // holdData reg for Data_Type_Conversion_out1
  always @(posedge clk)
    begin : stimuli_Data_Type_Conversion_out1
      if (reset) begin
        holdData_In_E <= 16'bx;
      end
      else begin
        holdData_In_E <= rawData_In_E;
      end
    end

  always @(rawData_In_E or tb_enb_delay)
    begin : stimuli_Data_Type_Conversion_out1_1
      if (tb_enb_delay == 1'b0) begin
        In_E_offset <= holdData_In_E;
      end
      else begin
        In_E_offset <= rawData_In_E;
      end
    end

  assign #2 In_E = In_E_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign notDone = tb_enb_delay & snkDonen;



  assign #2 clk_enable = notDone;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  DWT_Algo u_DWT_Algo (.clk(clk),
                       .reset(reset),
                       .clk_enable(clk_enable),
                       .In_E(In_E),  // ufix16_En24
                       .ce_out(ce_out),
                       .Out1(Out1)  // sfix16_En23
                       );

  assign Out1_enb = ce_out & Out1_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 352800
  always @(posedge clk)
    begin : c_2_process
      if (reset == 1'b1) begin
        Out1_addr <= 19'b0000000000000000000;
      end
      else begin
        if (Out1_enb) begin
          if (Out1_addr >= 19'b1010110001000100000) begin
            Out1_addr <= 19'b0000000000000000000;
          end
          else begin
            Out1_addr <= Out1_addr + 19'b0000000000000000001;
          end
        end
      end
    end



  assign Out1_lastAddr = Out1_addr >= 19'b1010110001000100000;



  assign Out1_done = Out1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out1_done_enb) begin
          check1_done <= Out1_done;
        end
      end
    end

  assign #1 Out1_addr_delay_1 = Out1_addr;

  // Data source for Out1_expected
  initial
    begin : Out1_expected_fileread
      fp_Out1_expected = $fopen("Out1_expected.dat", "r");
      status_Out1_expected = $rewind(fp_Out1_expected);
    end

  always @(Out1_addr_delay_1,  tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out1_expected <= 16'bx;
      end
      else  begin
        status_Out1_expected = $fscanf(fp_Out1_expected, "%h", Out1_expected);
      end
    end

  // Bypass register to hold Out1_ref
  always @(posedge clk)
    begin : DataHold_Out1_ref
      if (reset) begin
        Out1_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          Out1_ref_hold <= Out1_expected;
        end
      end
    end

  assign Out1_refTmp = Out1_expected;

  assign Out1_ref = (ce_out == 1'b0 ? Out1_ref_hold :
              Out1_refTmp);



  always @(posedge clk)
    begin : Out1_checker
      if (reset == 1'b1) begin
        Out1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out1 !== Out1_ref) begin
          Out1_testFailure <= 1'b1;
          $display("ERROR in Out1 at time %t : Expected '%h' Actual '%h'", $time, Out1_ref, Out1);
        end
      end
    end

  assign testFailure = Out1_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // DWT_Algo_tb