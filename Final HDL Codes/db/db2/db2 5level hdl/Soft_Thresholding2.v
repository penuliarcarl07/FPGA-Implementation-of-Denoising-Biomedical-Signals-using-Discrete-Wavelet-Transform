// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\db2_level5_final_hdlsss\Soft_Thresholding2.v
// Created: 2024-04-18 06:57:11
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Soft_Thresholding2
// Source Path: db2_level5_final_hdlsss/DWT_db2_5_level/Soft_Thresholding2
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Soft_Thresholding2
          (clk,
           reset,
           enb,
           Signal_w,
           Threshold1,
           New_Threshold);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Signal_w;  // sfix16_En27
  input   [15:0] Threshold1;  // ufix16_En27
  output  signed [15:0] New_Threshold;  // sfix16_En28


  wire [15:0] kconst;  // ufix16_En18
  reg [15:0] kconst_1;  // ufix16_En18
  reg signed [15:0] reduced_reg [0:3];  // sfix16 [4]
  wire signed [15:0] reduced_reg_next [0:3];  // sfix16_En27 [4]
  wire signed [15:0] Signal_w_1;  // sfix16_En27
  wire signed [38:0] Relational_Operator7_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator7_1_cast_1;  // sfix39_En27
  wire Relational_Operator7_relop1;
  wire signed [15:0] Relational_Operator7_relop1_dtc;  // int16
  wire signed [38:0] Relational_Operator2_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator2_1_cast_1;  // sfix39_En27
  wire Relational_Operator2_relop1;
  wire signed [15:0] Relational_Operator2_relop1_dtc;  // int16
  reg signed [15:0] delayMatch6_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch6_reg_next [0:2];  // sfix16 [3]
  wire signed [15:0] Delay2_out1;  // int16
  reg signed [15:0] reduced_reg_1 [0:1];  // sfix16 [2]
  wire signed [15:0] reduced_reg_next_1 [0:1];  // sfix16_En27 [2]
  wire signed [15:0] Signal_w_2;  // sfix16_En27
  wire signed [15:0] kconst_2;  // sfix16_En15
  reg signed [15:0] kconst_3;  // sfix16_En15
  reg [15:0] Threshold1_1;  // ufix16_En27
  wire signed [16:0] Gain1_cast;  // sfix17_En27
  wire signed [32:0] Gain1_mul_temp;  // sfix33_En42
  wire signed [31:0] Gain1_cast_1;  // sfix32_En42
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  reg signed [15:0] Gain1_out1_1;  // sfix16_En15
  wire signed [27:0] Relational_Operator3_1_cast;  // sfix28_En27
  wire signed [27:0] Relational_Operator3_1_cast_1;  // sfix28_En27
  wire Relational_Operator3_relop1;
  wire signed [15:0] Relational_Operator3_relop1_dtc;  // int16
  reg signed [15:0] Delay3_out1;  // int16
  wire Relational_Operator4_relop1;
  wire signed [15:0] Relational_Operator4_relop1_dtc;  // int16
  wire switch_compare_1;
  wire signed [15:0] Add1_add_cast;  // sfix16_En26
  wire signed [15:0] Add1_add_cast_1;  // sfix16_En26
  wire signed [15:0] Add1_out1;  // sfix16_En26
  wire signed [15:0] Subtract1_sub_cast;  // sfix16_En25
  wire signed [15:0] Subtract1_sub_cast_1;  // sfix16_En25
  wire signed [15:0] Subtract1_out1;  // sfix16_En25
  wire signed [16:0] Abs_y;  // sfix17_En27
  wire signed [16:0] Abs_cast;  // sfix17_En27
  wire [15:0] Abs_out1;  // ufix16_En28
  reg [15:0] delayMatch_reg [0:3];  // ufix16 [4]
  wire [15:0] delayMatch_reg_next [0:3];  // ufix16_En28 [4]
  wire [15:0] Abs_out1_1;  // ufix16_En28
  wire [38:0] Relational_Operator1_1_cast;  // ufix39_En28
  wire [38:0] Relational_Operator1_1_cast_1;  // ufix39_En28
  wire Relational_Operator1_relop1;
  wire signed [15:0] Relational_Operator1_relop1_dtc;  // int16
  reg signed [15:0] Delay5_out1;  // int16
  wire signed [38:0] Relational_Operator5_1_cast;  // sfix39_En27
  wire signed [38:0] Relational_Operator5_1_cast_1;  // sfix39_En27
  wire Relational_Operator5_relop1;
  wire signed [15:0] Relational_Operator5_relop1_dtc;  // int16
  reg signed [15:0] Delay6_out1;  // int16
  wire Relational_Operator6_relop1;
  wire signed [15:0] Relational_Operator6_relop1_dtc;  // int16
  wire switch_compare_1_1;
  wire signed [15:0] Constant_out1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1;  // sfix16_En4
  reg signed [15:0] delayMatch11_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch11_reg_next [0:1];  // sfix16 [2]
  wire signed [15:0] Relational_Operator7_out1;  // int16
  wire switch_compare_1_2;
  reg signed [15:0] delayMatch9_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch9_reg_next [0:2];  // sfix16_En26 [3]
  wire signed [15:0] Delay4_out1;  // sfix16_En26
  reg signed [15:0] delayMatch8_reg [0:2];  // sfix16 [3]
  wire signed [15:0] delayMatch8_reg_next [0:2];  // sfix16_En25 [3]
  wire signed [15:0] Delay1_out1;  // sfix16_En25
  wire signed [15:0] Delay1_out1_dtc;  // sfix16_En26
  wire signed [15:0] Threshold_Switch_out1;  // sfix16_En26
  reg signed [15:0] delayMatch10_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch10_reg_next [0:1];  // sfix16_En4 [2]
  wire signed [15:0] Threshold_Switch1_out1_1;  // sfix16_En4
  wire signed [15:0] Threshold_Switch1_out1_dtc;  // sfix16_En26
  wire signed [15:0] Threshold_Switch2_out1;  // sfix16_En26
  reg signed [15:0] Threshold_Switch2_out1_1;  // sfix16_En26
  wire signed [16:0] Gain_cast;  // sfix17_En18
  wire signed [32:0] Gain_mul_temp;  // sfix33_En44
  wire signed [31:0] Gain_cast_1;  // sfix32_En44
  wire signed [15:0] Gain_out1;  // sfix16_En28
  reg signed [15:0] Gain_out1_1;  // sfix16_En28


  assign kconst = 16'b1101111010001001;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'sb0000000000000000;
        reduced_reg[1] <= 16'sb0000000000000000;
        reduced_reg[2] <= 16'sb0000000000000000;
        reduced_reg[3] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
        end
      end
    end

  assign Signal_w_1 = reduced_reg[3];
  assign reduced_reg_next[0] = Signal_w;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];



  assign Relational_Operator7_1_cast = {{23{Signal_w_1[15]}}, Signal_w_1};
  assign Relational_Operator7_1_cast_1 = {23'b0, Threshold1};
  assign Relational_Operator7_relop1 = Relational_Operator7_1_cast == Relational_Operator7_1_cast_1;


  assign Relational_Operator7_relop1_dtc = {15'b0, Relational_Operator7_relop1};



  assign Relational_Operator2_1_cast = {{23{Signal_w_1[15]}}, Signal_w_1};
  assign Relational_Operator2_1_cast_1 = {23'b0, Threshold1};
  assign Relational_Operator2_relop1 = Relational_Operator2_1_cast > Relational_Operator2_1_cast_1;


  assign Relational_Operator2_relop1_dtc = {15'b0, Relational_Operator2_relop1};



  always @(posedge clk)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        delayMatch6_reg[0] <= 16'sb0000000000000000;
        delayMatch6_reg[1] <= 16'sb0000000000000000;
        delayMatch6_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
          delayMatch6_reg[2] <= delayMatch6_reg_next[2];
        end
      end
    end

  assign Delay2_out1 = delayMatch6_reg[2];
  assign delayMatch6_reg_next[0] = Relational_Operator2_relop1_dtc;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];
  assign delayMatch6_reg_next[2] = delayMatch6_reg[1];


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 16'sb0000000000000000;
        reduced_reg_1[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
        end
      end
    end

  assign Signal_w_2 = reduced_reg_1[1];
  assign reduced_reg_next_1[0] = Signal_w_1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];



  assign kconst_2 = 16'sb1000000000000000;



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Threshold1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold1_1 <= Threshold1;
        end
      end
    end



  assign Gain1_cast = {1'b0, Threshold1_1};
  assign Gain1_mul_temp = kconst_3 * Gain1_cast;
  assign Gain1_cast_1 = Gain1_mul_temp[31:0];
  assign Gain1_out1 = {{11{Gain1_cast_1[31]}}, Gain1_cast_1[31:27]};


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end



  assign Relational_Operator3_1_cast = {{12{Signal_w_2[15]}}, Signal_w_2};
  assign Relational_Operator3_1_cast_1 = {Gain1_out1_1, 12'b000000000000};
  assign Relational_Operator3_relop1 = Relational_Operator3_1_cast < Relational_Operator3_1_cast_1;


  assign Relational_Operator3_relop1_dtc = {15'b0, Relational_Operator3_relop1};



  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator3_relop1_dtc;
        end
      end
    end


  assign Relational_Operator4_relop1 = Delay2_out1 > Delay3_out1;


  assign Relational_Operator4_relop1_dtc = {15'b0, Relational_Operator4_relop1};



  assign switch_compare_1 = Relational_Operator4_relop1_dtc >= 16'sb0000000000000001;



  assign Add1_add_cast = {Signal_w_1[15], Signal_w_1[15:1]};
  assign Add1_add_cast_1 = {1'b0, Threshold1[15:1]};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;


  assign Subtract1_sub_cast = {{2{Signal_w_1[15]}}, Signal_w_1[15:2]};
  assign Subtract1_sub_cast_1 = {2'b0, Threshold1[15:2]};
  assign Subtract1_out1 = Subtract1_sub_cast - Subtract1_sub_cast_1;


  assign Abs_cast = {Signal_w[15], Signal_w};
  assign Abs_y = (Signal_w < 16'sb0000000000000000 ?  - (Abs_cast) :
              {Signal_w[15], Signal_w});
  assign Abs_out1 = {Abs_y[14:0], 1'b0};


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'b0000000000000000;
        delayMatch_reg[1] <= 16'b0000000000000000;
        delayMatch_reg[2] <= 16'b0000000000000000;
        delayMatch_reg[3] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
        end
      end
    end

  assign Abs_out1_1 = delayMatch_reg[3];
  assign delayMatch_reg_next[0] = Abs_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];



  assign Relational_Operator1_1_cast = {23'b0, Abs_out1_1};
  assign Relational_Operator1_1_cast_1 = {22'b0, {Threshold1, 1'b0}};
  assign Relational_Operator1_relop1 = Relational_Operator1_1_cast == Relational_Operator1_1_cast_1;


  assign Relational_Operator1_relop1_dtc = {15'b0, Relational_Operator1_relop1};



  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Relational_Operator1_relop1_dtc;
        end
      end
    end


  assign Relational_Operator5_1_cast = {{23{Signal_w_1[15]}}, Signal_w_1};
  assign Relational_Operator5_1_cast_1 = {23'b0, Threshold1};
  assign Relational_Operator5_relop1 = Relational_Operator5_1_cast < Relational_Operator5_1_cast_1;


  assign Relational_Operator5_relop1_dtc = {15'b0, Relational_Operator5_relop1};



  always @(posedge clk)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Relational_Operator5_relop1_dtc;
        end
      end
    end


  assign Relational_Operator6_relop1 = Delay5_out1 > Delay6_out1;


  assign Relational_Operator6_relop1_dtc = {15'b0, Relational_Operator6_relop1};



  assign switch_compare_1_1 = Relational_Operator6_relop1_dtc >= 16'sb0000000000000001;



  assign Constant_out1 = 16'sb0000000000000000;


  assign Threshold_Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant_out1 :
              Constant_out1);


  always @(posedge clk)
    begin : delayMatch11_process
      if (reset == 1'b1) begin
        delayMatch11_reg[0] <= 16'sb0000000000000000;
        delayMatch11_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch11_reg[0] <= delayMatch11_reg_next[0];
          delayMatch11_reg[1] <= delayMatch11_reg_next[1];
        end
      end
    end

  assign Relational_Operator7_out1 = delayMatch11_reg[1];
  assign delayMatch11_reg_next[0] = Relational_Operator7_relop1_dtc;
  assign delayMatch11_reg_next[1] = delayMatch11_reg[0];



  assign switch_compare_1_2 = Relational_Operator7_out1 >= 16'sb0000000000000001;



  always @(posedge clk)
    begin : delayMatch9_process
      if (reset == 1'b1) begin
        delayMatch9_reg[0] <= 16'sb0000000000000000;
        delayMatch9_reg[1] <= 16'sb0000000000000000;
        delayMatch9_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch9_reg[0] <= delayMatch9_reg_next[0];
          delayMatch9_reg[1] <= delayMatch9_reg_next[1];
          delayMatch9_reg[2] <= delayMatch9_reg_next[2];
        end
      end
    end

  assign Delay4_out1 = delayMatch9_reg[2];
  assign delayMatch9_reg_next[0] = Add1_out1;
  assign delayMatch9_reg_next[1] = delayMatch9_reg[0];
  assign delayMatch9_reg_next[2] = delayMatch9_reg[1];


  always @(posedge clk)
    begin : delayMatch8_process
      if (reset == 1'b1) begin
        delayMatch8_reg[0] <= 16'sb0000000000000000;
        delayMatch8_reg[1] <= 16'sb0000000000000000;
        delayMatch8_reg[2] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch8_reg[0] <= delayMatch8_reg_next[0];
          delayMatch8_reg[1] <= delayMatch8_reg_next[1];
          delayMatch8_reg[2] <= delayMatch8_reg_next[2];
        end
      end
    end

  assign Delay1_out1 = delayMatch8_reg[2];
  assign delayMatch8_reg_next[0] = Subtract1_out1;
  assign delayMatch8_reg_next[1] = delayMatch8_reg[0];
  assign delayMatch8_reg_next[2] = delayMatch8_reg[1];


  assign Delay1_out1_dtc = {Delay1_out1[14:0], 1'b0};



  assign Threshold_Switch_out1 = (switch_compare_1 == 1'b0 ? Delay4_out1 :
              Delay1_out1_dtc);


  always @(posedge clk)
    begin : delayMatch10_process
      if (reset == 1'b1) begin
        delayMatch10_reg[0] <= 16'sb0000000000000000;
        delayMatch10_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch10_reg[0] <= delayMatch10_reg_next[0];
          delayMatch10_reg[1] <= delayMatch10_reg_next[1];
        end
      end
    end

  assign Threshold_Switch1_out1_1 = delayMatch10_reg[1];
  assign delayMatch10_reg_next[0] = Threshold_Switch1_out1;
  assign delayMatch10_reg_next[1] = delayMatch10_reg[0];



  assign Threshold_Switch1_out1_dtc = 16'sb0000000000000000;



  assign Threshold_Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Threshold_Switch_out1 :
              Threshold_Switch1_out1_dtc);


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Threshold_Switch2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Threshold_Switch2_out1_1 <= Threshold_Switch2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Threshold_Switch2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end



  assign New_Threshold = Gain_out1_1;

endmodule  // Soft_Thresholding2

