// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\db2_level5_final_hdlsss\HiR_Even_block3.v
// Created: 2024-04-18 06:57:10
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HiR_Even_block3
// Source Path: db2_level5_final_hdlsss/DWT_db2_5_level/1st_Level_Recon4/HiR_Even
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HiR_Even_block3
          (clk,
           reset,
           enb,
           In_HiR_e,
           Out_HiR_e);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiR_e;  // sfix16_En27
  output  signed [15:0] Out_HiR_e;  // sfix16_En27


  wire signed [15:0] HiR_0_out1;  // sfix16_En17
  reg signed [15:0] HiR_0_out1_1;  // sfix16_En17
  reg signed [15:0] In_HiR_e_1;  // sfix16_En27
  wire signed [31:0] Multiply_mul_temp;  // sfix32_En44
  wire signed [15:0] Multiply_out1;  // sfix16_En30
  reg signed [15:0] Multiply_out1_1;  // sfix16_En30
  wire [15:0] HiR_2_out1;  // ufix16_En16
  reg [15:0] HiR_2_out1_1;  // ufix16_En16
  reg signed [15:0] RT_out1;  // sfix16_En27
  wire signed [16:0] Multiply1_cast;  // sfix17_En16
  wire signed [32:0] Multiply1_mul_temp;  // sfix33_En43
  wire signed [31:0] Multiply1_cast_1;  // sfix32_En43
  wire signed [15:0] Multiply1_out1;  // sfix16_En27
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En27 [2]
  wire signed [15:0] Multiply1_out1_1;  // sfix16_En27
  wire signed [15:0] Add_add_cast;  // sfix16_En27
  wire signed [15:0] Add_out1;  // sfix16_En27


  assign HiR_0_out1 = 16'sb1011110110111110;


  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        HiR_0_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          HiR_0_out1_1 <= HiR_0_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_HiR_e_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          In_HiR_e_1 <= In_HiR_e;
        end
      end
    end


  assign Multiply_mul_temp = HiR_0_out1_1 * In_HiR_e_1;
  assign Multiply_out1 = Multiply_mul_temp[29:14];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Multiply_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_out1_1 <= Multiply_out1;
        end
      end
    end



  assign HiR_2_out1 = 16'b1101011000100110;


  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        HiR_2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HiR_2_out1_1 <= HiR_2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        RT_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          RT_out1 <= In_HiR_e_1;
        end
      end
    end



  assign Multiply1_cast = {1'b0, HiR_2_out1_1};
  assign Multiply1_mul_temp = Multiply1_cast * RT_out1;
  assign Multiply1_cast_1 = Multiply1_mul_temp[31:0];
  assign Multiply1_out1 = Multiply1_cast_1[31:16];


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Multiply1_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Multiply1_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add_add_cast = {{3{Multiply_out1_1[15]}}, Multiply_out1_1[15:3]};
  assign Add_out1 = Add_add_cast + Multiply1_out1_1;


  assign Out_HiR_e = Add_out1;

endmodule  // HiR_Even_block3

