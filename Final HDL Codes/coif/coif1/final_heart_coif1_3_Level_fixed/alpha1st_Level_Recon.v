// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\final_heart_coif1_3_Level_fixed\alpha1st_Level_Recon.v
// Created: 2024-04-18 12:08:53
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: alpha1st_Level_Recon
// Source Path: final_heart_coif1_3_Level_fixed/DWT_coif1_3_Level/1st_Level_Recon
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module alpha1st_Level_Recon
          (clk,
           reset,
           enb,
           In_HiD,
           In_LoD,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In_HiD;  // sfix16_En28
  input   signed [15:0] In_LoD;  // sfix16_En24
  output  signed [15:0] Out;  // sfix16_En23


  wire [15:0] kconst;  // ufix16_En16
  reg [15:0] kconst_1;  // ufix16_En16
  wire signed [15:0] HiR_Even1_out1;  // sfix16_En29
  wire signed [15:0] LoR_Even1_out1;  // sfix16_En24
  wire signed [15:0] HiR_Odd1_out1;  // sfix16_En28
  wire signed [15:0] LoR_Odd1_out1;  // sfix16_En24
  reg signed [15:0] LoR_Odd1_out1_1;  // sfix16_En24
  wire signed [15:0] Add1_add_cast;  // sfix16_En24
  wire signed [15:0] Add1_out1;  // sfix16_En24
  reg signed [15:0] LoR_Even1_out1_1;  // sfix16_En24
  wire signed [15:0] Add_add_cast;  // sfix16_En24
  wire signed [15:0] Recon_Even;  // sfix16_En24
  reg signed [15:0] Recon_Odd;  // sfix16_En24
  wire signed [15:0] Recon_Odd_1;  // sfix16_En24
  wire signed [15:0] Add2_add_cast;  // sfix16_En23
  wire signed [15:0] Add2_add_cast_1;  // sfix16_En23
  wire signed [15:0] Add2_out1;  // sfix16_En23
  reg signed [15:0] Add2_out1_1;  // sfix16_En23
  wire signed [16:0] Gain_cast;  // sfix17_En16
  wire signed [32:0] Gain_mul_temp;  // sfix33_En39
  wire signed [31:0] Gain_cast_1;  // sfix32_En39
  wire signed [15:0] Gain_out1;  // sfix16_En23
  reg signed [15:0] Gain_out1_1;  // sfix16_En23


  assign kconst = 16'b1101111001000100;



  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  HiR_Even1 u_HiR_Even1 (.clk(clk),
                         .reset(reset),
                         .enb(enb),
                         .In_HiR_e(In_HiD),  // sfix16_En28
                         .Out_HiR_e(HiR_Even1_out1)  // sfix16_En29
                         );
  LoR_Even1 u_LoR_Even1 (.clk(clk),
                         .reset(reset),
                         .enb(enb),
                         .In_LoR_e(In_LoD),  // sfix16_En24
                         .Out_LoR_e(LoR_Even1_out1)  // sfix16_En24
                         );
  HiR_Odd1 u_HiR_Odd1 (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_HiR_o(In_HiD),  // sfix16_En28
                       .Out_HiR_o(HiR_Odd1_out1)  // sfix16_En28
                       );
  LoR_Odd1 u_LoR_Odd1 (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In_LoR_o(In_LoD),  // sfix16_En24
                       .Out_HiR_o(LoR_Odd1_out1)  // sfix16_En24
                       );
  always @(posedge clk)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        LoR_Odd1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          LoR_Odd1_out1_1 <= LoR_Odd1_out1;
        end
      end
    end



  assign Add1_add_cast = {{4{HiR_Odd1_out1[15]}}, HiR_Odd1_out1[15:4]};
  assign Add1_out1 = Add1_add_cast + LoR_Odd1_out1_1;


  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        LoR_Even1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          LoR_Even1_out1_1 <= LoR_Even1_out1;
        end
      end
    end



  assign Add_add_cast = {{5{HiR_Even1_out1[15]}}, HiR_Even1_out1[15:5]};
  assign Recon_Even = Add_add_cast + LoR_Even1_out1_1;


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Recon_Odd <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Recon_Odd <= Add1_out1;
        end
      end
    end


  assign Recon_Odd_1 = Recon_Odd;
  assign Add2_add_cast = {Recon_Even[15], Recon_Even[15:1]};
  assign Add2_add_cast_1 = {Recon_Odd_1[15], Recon_Odd_1[15:1]};
  assign Add2_out1 = Add2_add_cast + Add2_add_cast_1;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Add2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Add2_out1_1 <= Add2_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, kconst_1};
  assign Gain_mul_temp = Gain_cast * Add2_out1_1;
  assign Gain_cast_1 = Gain_mul_temp[31:0];
  assign Gain_out1 = Gain_cast_1[31:16];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end


  assign Out = Gain_out1_1;

endmodule  // alpha1st_Level_Recon

