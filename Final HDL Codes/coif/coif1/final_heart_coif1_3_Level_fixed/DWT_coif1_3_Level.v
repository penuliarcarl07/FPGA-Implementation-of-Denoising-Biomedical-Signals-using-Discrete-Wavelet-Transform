// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\final_heart_coif1_3_Level_fixed\DWT_coif1_3_Level.v
// Created: 2024-04-18 12:08:54
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.26757e-05
// Target subsystem base rate: 2.26757e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2.26757e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        2.26757e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DWT_coif1_3_Level
// Source Path: final_heart_coif1_3_Level_fixed/DWT_coif1_3_Level
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DWT_coif1_3_Level
          (clk,
           reset,
           clk_enable,
           In1,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [15:0] In1;  // ufix16_En24
  output  ce_out;
  output  signed [15:0] Out1;  // sfix16_En23


  wire enb;
  wire enb_1_30_1;
  wire enb_1_30_0;
  wire enb_1_30_4;
  wire enb_1_1_1;
  reg [15:0] Downsample1_out1;  // ufix16_En24
  reg [15:0] Downsample1_out1_1;  // ufix16_En24
  reg [15:0] RT_out1;  // ufix16_En24
  reg [15:0] Delay_out1;  // ufix16_En24
  reg [15:0] Downsample2_out1;  // ufix16_En24
  reg [15:0] Downsample2_out1_1;  // ufix16_En24
  reg [15:0] RT1_out1;  // ufix16_En24
  wire signed [15:0] alpha1st_Level_Decomp_out1;  // sfix16_En24
  wire signed [15:0] alpha1st_Level_Decomp_out2;  // sfix16_En23
  reg signed [15:0] alpha1st_Level_Decomp_out2_1;  // sfix16_En23
  reg signed [15:0] reduced_reg [0:25];  // sfix16 [26]
  wire signed [15:0] reduced_reg_next [0:25];  // sfix16_En23 [26]
  wire signed [15:0] alpha1st_Level_Decomp_out2_2;  // sfix16_En23
  reg signed [15:0] Downsample3_out1;  // sfix16_En23
  reg signed [15:0] Downsample3_out1_1;  // sfix16_En23
  reg signed [15:0] RT2_out1;  // sfix16_En23
  reg signed [15:0] Downsample4_ds_out;  // sfix16_En23
  reg signed [15:0] Downsample4_out1;  // sfix16_En23
  reg signed [15:0] Downsample4_out1_1;  // sfix16_En23
  reg signed [15:0] RT3_out1;  // sfix16_En23
  wire signed [15:0] alpha1st_Level_Decomp1_out1;  // sfix16_En27
  wire signed [15:0] alpha1st_Level_Decomp1_out2;  // sfix16_En24
  wire [15:0] Threshold_Estimator_out1;  // ufix16_En25
  wire signed [15:0] Soft_Thresholding_out1;  // sfix16_En28
  wire signed [15:0] Soft_Thresholding1_out1;  // sfix16_En28
  reg signed [15:0] alpha1st_Level_Decomp1_out2_1;  // sfix16_En24
  reg signed [15:0] reduced_reg_1 [0:25];  // sfix16 [26]
  wire signed [15:0] reduced_reg_next_1 [0:25];  // sfix16_En24 [26]
  wire signed [15:0] alpha1st_Level_Decomp1_out2_2;  // sfix16_En24
  reg signed [15:0] Downsample5_out1;  // sfix16_En24
  reg signed [15:0] Downsample5_out1_1;  // sfix16_En24
  reg signed [15:0] RT4_out1;  // sfix16_En24
  reg signed [15:0] Downsample6_ds_out;  // sfix16_En24
  reg signed [15:0] Downsample6_out1;  // sfix16_En24
  reg signed [15:0] Downsample6_out1_1;  // sfix16_En24
  reg signed [15:0] RT5_out1;  // sfix16_En24
  wire signed [15:0] alpha1st_Level_Decomp2_out1;  // sfix16_En27
  wire signed [15:0] alpha1st_Level_Decomp2_out2;  // sfix16_En24
  wire signed [15:0] Soft_Thresholding2_out1;  // sfix16_En28
  wire signed [15:0] alpha1st_Level_Recon_out1;  // sfix16_En23
  wire signed [15:0] alpha1st_Level_Recon1_out1;  // sfix16_En23
  wire signed [15:0] alpha1st_Level_Recon4_out1;  // sfix16_En23


  DWT_coif1_3_Level_tc u_DWT_coif1_3_Level_tc (.clk(clk),
                                               .reset(reset),
                                               .clk_enable(clk_enable),
                                               .enb(enb),
                                               .enb_1_1_1(enb_1_1_1),
                                               .enb_1_30_0(enb_1_30_0),
                                               .enb_1_30_1(enb_1_30_1),
                                               .enb_1_30_4(enb_1_30_4)
                                               );

  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample1_output_process
      if (reset == 1'b1) begin
        Downsample1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample1_out1 <= In1;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Downsample1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample1_out1_1 <= Downsample1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT_process
      if (reset == 1'b1) begin
        RT_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT_out1 <= Downsample1_out1_1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In1;
        end
      end
    end


  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample2_output_process
      if (reset == 1'b1) begin
        Downsample2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample2_out1 <= Delay_out1;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Downsample2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample2_out1_1 <= Downsample2_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT1_process
      if (reset == 1'b1) begin
        RT1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT1_out1 <= Downsample2_out1_1;
        end
      end
    end


  alpha1st_Level_Decomp u_1st_Level_Decomp (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .In_E(RT_out1),  // ufix16_En24
                                            .In_O(RT1_out1),  // ufix16_En24
                                            .Out_HiD(alpha1st_Level_Decomp_out1),  // sfix16_En24
                                            .Out_LoD(alpha1st_Level_Decomp_out2)  // sfix16_En23
                                            );
  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        alpha1st_Level_Decomp_out2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          alpha1st_Level_Decomp_out2_1 <= alpha1st_Level_Decomp_out2;
        end
      end
    end


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 16'sb0000000000000000;
        reduced_reg[1] <= 16'sb0000000000000000;
        reduced_reg[2] <= 16'sb0000000000000000;
        reduced_reg[3] <= 16'sb0000000000000000;
        reduced_reg[4] <= 16'sb0000000000000000;
        reduced_reg[5] <= 16'sb0000000000000000;
        reduced_reg[6] <= 16'sb0000000000000000;
        reduced_reg[7] <= 16'sb0000000000000000;
        reduced_reg[8] <= 16'sb0000000000000000;
        reduced_reg[9] <= 16'sb0000000000000000;
        reduced_reg[10] <= 16'sb0000000000000000;
        reduced_reg[11] <= 16'sb0000000000000000;
        reduced_reg[12] <= 16'sb0000000000000000;
        reduced_reg[13] <= 16'sb0000000000000000;
        reduced_reg[14] <= 16'sb0000000000000000;
        reduced_reg[15] <= 16'sb0000000000000000;
        reduced_reg[16] <= 16'sb0000000000000000;
        reduced_reg[17] <= 16'sb0000000000000000;
        reduced_reg[18] <= 16'sb0000000000000000;
        reduced_reg[19] <= 16'sb0000000000000000;
        reduced_reg[20] <= 16'sb0000000000000000;
        reduced_reg[21] <= 16'sb0000000000000000;
        reduced_reg[22] <= 16'sb0000000000000000;
        reduced_reg[23] <= 16'sb0000000000000000;
        reduced_reg[24] <= 16'sb0000000000000000;
        reduced_reg[25] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
          reduced_reg[2] <= reduced_reg_next[2];
          reduced_reg[3] <= reduced_reg_next[3];
          reduced_reg[4] <= reduced_reg_next[4];
          reduced_reg[5] <= reduced_reg_next[5];
          reduced_reg[6] <= reduced_reg_next[6];
          reduced_reg[7] <= reduced_reg_next[7];
          reduced_reg[8] <= reduced_reg_next[8];
          reduced_reg[9] <= reduced_reg_next[9];
          reduced_reg[10] <= reduced_reg_next[10];
          reduced_reg[11] <= reduced_reg_next[11];
          reduced_reg[12] <= reduced_reg_next[12];
          reduced_reg[13] <= reduced_reg_next[13];
          reduced_reg[14] <= reduced_reg_next[14];
          reduced_reg[15] <= reduced_reg_next[15];
          reduced_reg[16] <= reduced_reg_next[16];
          reduced_reg[17] <= reduced_reg_next[17];
          reduced_reg[18] <= reduced_reg_next[18];
          reduced_reg[19] <= reduced_reg_next[19];
          reduced_reg[20] <= reduced_reg_next[20];
          reduced_reg[21] <= reduced_reg_next[21];
          reduced_reg[22] <= reduced_reg_next[22];
          reduced_reg[23] <= reduced_reg_next[23];
          reduced_reg[24] <= reduced_reg_next[24];
          reduced_reg[25] <= reduced_reg_next[25];
        end
      end
    end

  assign alpha1st_Level_Decomp_out2_2 = reduced_reg[25];
  assign reduced_reg_next[0] = alpha1st_Level_Decomp_out2_1;
  assign reduced_reg_next[1] = reduced_reg[0];
  assign reduced_reg_next[2] = reduced_reg[1];
  assign reduced_reg_next[3] = reduced_reg[2];
  assign reduced_reg_next[4] = reduced_reg[3];
  assign reduced_reg_next[5] = reduced_reg[4];
  assign reduced_reg_next[6] = reduced_reg[5];
  assign reduced_reg_next[7] = reduced_reg[6];
  assign reduced_reg_next[8] = reduced_reg[7];
  assign reduced_reg_next[9] = reduced_reg[8];
  assign reduced_reg_next[10] = reduced_reg[9];
  assign reduced_reg_next[11] = reduced_reg[10];
  assign reduced_reg_next[12] = reduced_reg[11];
  assign reduced_reg_next[13] = reduced_reg[12];
  assign reduced_reg_next[14] = reduced_reg[13];
  assign reduced_reg_next[15] = reduced_reg[14];
  assign reduced_reg_next[16] = reduced_reg[15];
  assign reduced_reg_next[17] = reduced_reg[16];
  assign reduced_reg_next[18] = reduced_reg[17];
  assign reduced_reg_next[19] = reduced_reg[18];
  assign reduced_reg_next[20] = reduced_reg[19];
  assign reduced_reg_next[21] = reduced_reg[20];
  assign reduced_reg_next[22] = reduced_reg[21];
  assign reduced_reg_next[23] = reduced_reg[22];
  assign reduced_reg_next[24] = reduced_reg[23];
  assign reduced_reg_next[25] = reduced_reg[24];



  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample3_output_process
      if (reset == 1'b1) begin
        Downsample3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample3_out1 <= alpha1st_Level_Decomp_out2_2;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Downsample3_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample3_out1_1 <= Downsample3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT2_process
      if (reset == 1'b1) begin
        RT2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT2_out1 <= Downsample3_out1_1;
        end
      end
    end


  // Downsample register
  always @(posedge clk)
    begin : Downsample4_ds_process
      if (reset == 1'b1) begin
        Downsample4_ds_out <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_4) begin
          Downsample4_ds_out <= alpha1st_Level_Decomp_out2_1;
        end
      end
    end



  // Downsample output register
  always @(posedge clk)
    begin : Downsample4_output_process
      if (reset == 1'b1) begin
        Downsample4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample4_out1 <= Downsample4_ds_out;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister4_process
      if (reset == 1'b1) begin
        Downsample4_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample4_out1_1 <= Downsample4_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT3_process
      if (reset == 1'b1) begin
        RT3_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT3_out1 <= Downsample4_out1_1;
        end
      end
    end


  alpha1st_Level_Decomp1 u_1st_Level_Decomp1 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .In_E(RT2_out1),  // sfix16_En23
                                              .In_O(RT3_out1),  // sfix16_En23
                                              .Out_HiD(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                              .Out_LoD(alpha1st_Level_Decomp1_out2)  // sfix16_En24
                                              );
  Threshold_Estimator u_Threshold_Estimator (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .Signal_w(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                             .Threshold(Threshold_Estimator_out1)  // ufix16_En25
                                             );
  Soft_Thresholding u_Soft_Thresholding (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .Signal_w(alpha1st_Level_Decomp_out1),  // sfix16_En24
                                         .Threshold1(Threshold_Estimator_out1),  // ufix16_En25
                                         .New_Threshold(Soft_Thresholding_out1)  // sfix16_En28
                                         );
  Soft_Thresholding1 u_Soft_Thresholding1 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .Signal_w(alpha1st_Level_Decomp1_out1),  // sfix16_En27
                                           .Threshold1(Threshold_Estimator_out1),  // ufix16_En25
                                           .New_Threshold(Soft_Thresholding1_out1)  // sfix16_En28
                                           );
  always @(posedge clk)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        alpha1st_Level_Decomp1_out2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          alpha1st_Level_Decomp1_out2_1 <= alpha1st_Level_Decomp1_out2;
        end
      end
    end


  always @(posedge clk)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 16'sb0000000000000000;
        reduced_reg_1[1] <= 16'sb0000000000000000;
        reduced_reg_1[2] <= 16'sb0000000000000000;
        reduced_reg_1[3] <= 16'sb0000000000000000;
        reduced_reg_1[4] <= 16'sb0000000000000000;
        reduced_reg_1[5] <= 16'sb0000000000000000;
        reduced_reg_1[6] <= 16'sb0000000000000000;
        reduced_reg_1[7] <= 16'sb0000000000000000;
        reduced_reg_1[8] <= 16'sb0000000000000000;
        reduced_reg_1[9] <= 16'sb0000000000000000;
        reduced_reg_1[10] <= 16'sb0000000000000000;
        reduced_reg_1[11] <= 16'sb0000000000000000;
        reduced_reg_1[12] <= 16'sb0000000000000000;
        reduced_reg_1[13] <= 16'sb0000000000000000;
        reduced_reg_1[14] <= 16'sb0000000000000000;
        reduced_reg_1[15] <= 16'sb0000000000000000;
        reduced_reg_1[16] <= 16'sb0000000000000000;
        reduced_reg_1[17] <= 16'sb0000000000000000;
        reduced_reg_1[18] <= 16'sb0000000000000000;
        reduced_reg_1[19] <= 16'sb0000000000000000;
        reduced_reg_1[20] <= 16'sb0000000000000000;
        reduced_reg_1[21] <= 16'sb0000000000000000;
        reduced_reg_1[22] <= 16'sb0000000000000000;
        reduced_reg_1[23] <= 16'sb0000000000000000;
        reduced_reg_1[24] <= 16'sb0000000000000000;
        reduced_reg_1[25] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
          reduced_reg_1[2] <= reduced_reg_next_1[2];
          reduced_reg_1[3] <= reduced_reg_next_1[3];
          reduced_reg_1[4] <= reduced_reg_next_1[4];
          reduced_reg_1[5] <= reduced_reg_next_1[5];
          reduced_reg_1[6] <= reduced_reg_next_1[6];
          reduced_reg_1[7] <= reduced_reg_next_1[7];
          reduced_reg_1[8] <= reduced_reg_next_1[8];
          reduced_reg_1[9] <= reduced_reg_next_1[9];
          reduced_reg_1[10] <= reduced_reg_next_1[10];
          reduced_reg_1[11] <= reduced_reg_next_1[11];
          reduced_reg_1[12] <= reduced_reg_next_1[12];
          reduced_reg_1[13] <= reduced_reg_next_1[13];
          reduced_reg_1[14] <= reduced_reg_next_1[14];
          reduced_reg_1[15] <= reduced_reg_next_1[15];
          reduced_reg_1[16] <= reduced_reg_next_1[16];
          reduced_reg_1[17] <= reduced_reg_next_1[17];
          reduced_reg_1[18] <= reduced_reg_next_1[18];
          reduced_reg_1[19] <= reduced_reg_next_1[19];
          reduced_reg_1[20] <= reduced_reg_next_1[20];
          reduced_reg_1[21] <= reduced_reg_next_1[21];
          reduced_reg_1[22] <= reduced_reg_next_1[22];
          reduced_reg_1[23] <= reduced_reg_next_1[23];
          reduced_reg_1[24] <= reduced_reg_next_1[24];
          reduced_reg_1[25] <= reduced_reg_next_1[25];
        end
      end
    end

  assign alpha1st_Level_Decomp1_out2_2 = reduced_reg_1[25];
  assign reduced_reg_next_1[0] = alpha1st_Level_Decomp1_out2_1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];
  assign reduced_reg_next_1[2] = reduced_reg_1[1];
  assign reduced_reg_next_1[3] = reduced_reg_1[2];
  assign reduced_reg_next_1[4] = reduced_reg_1[3];
  assign reduced_reg_next_1[5] = reduced_reg_1[4];
  assign reduced_reg_next_1[6] = reduced_reg_1[5];
  assign reduced_reg_next_1[7] = reduced_reg_1[6];
  assign reduced_reg_next_1[8] = reduced_reg_1[7];
  assign reduced_reg_next_1[9] = reduced_reg_1[8];
  assign reduced_reg_next_1[10] = reduced_reg_1[9];
  assign reduced_reg_next_1[11] = reduced_reg_1[10];
  assign reduced_reg_next_1[12] = reduced_reg_1[11];
  assign reduced_reg_next_1[13] = reduced_reg_1[12];
  assign reduced_reg_next_1[14] = reduced_reg_1[13];
  assign reduced_reg_next_1[15] = reduced_reg_1[14];
  assign reduced_reg_next_1[16] = reduced_reg_1[15];
  assign reduced_reg_next_1[17] = reduced_reg_1[16];
  assign reduced_reg_next_1[18] = reduced_reg_1[17];
  assign reduced_reg_next_1[19] = reduced_reg_1[18];
  assign reduced_reg_next_1[20] = reduced_reg_1[19];
  assign reduced_reg_next_1[21] = reduced_reg_1[20];
  assign reduced_reg_next_1[22] = reduced_reg_1[21];
  assign reduced_reg_next_1[23] = reduced_reg_1[22];
  assign reduced_reg_next_1[24] = reduced_reg_1[23];
  assign reduced_reg_next_1[25] = reduced_reg_1[24];



  // Downsample by 30 register (Sample offset 0)
  always @(posedge clk)
    begin : Downsample5_output_process
      if (reset == 1'b1) begin
        Downsample5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_1) begin
          Downsample5_out1 <= alpha1st_Level_Decomp1_out2_2;
        end
      end
    end


  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Downsample5_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample5_out1_1 <= Downsample5_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT4_process
      if (reset == 1'b1) begin
        RT4_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT4_out1 <= Downsample5_out1_1;
        end
      end
    end


  // Downsample register
  always @(posedge clk)
    begin : Downsample6_ds_process
      if (reset == 1'b1) begin
        Downsample6_ds_out <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_4) begin
          Downsample6_ds_out <= alpha1st_Level_Decomp1_out2_1;
        end
      end
    end



  // Downsample output register
  always @(posedge clk)
    begin : Downsample6_output_process
      if (reset == 1'b1) begin
        Downsample6_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample6_out1 <= Downsample6_ds_out;
        end
      end
    end



  always @(posedge clk)
    begin : PipelineRegister5_process
      if (reset == 1'b1) begin
        Downsample6_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          Downsample6_out1_1 <= Downsample6_out1;
        end
      end
    end



  always @(posedge clk)
    begin : RT5_process
      if (reset == 1'b1) begin
        RT5_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_30_0) begin
          RT5_out1 <= Downsample6_out1_1;
        end
      end
    end


  alpha1st_Level_Decomp2 u_1st_Level_Decomp2 (.clk(clk),
                                              .reset(reset),
                                              .enb(enb),
                                              .In_E(RT4_out1),  // sfix16_En24
                                              .In_O(RT5_out1),  // sfix16_En24
                                              .Out_HiD(alpha1st_Level_Decomp2_out1),  // sfix16_En27
                                              .Out_LoD(alpha1st_Level_Decomp2_out2)  // sfix16_En24
                                              );
  Soft_Thresholding2 u_Soft_Thresholding2 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .Signal_w(alpha1st_Level_Decomp2_out1),  // sfix16_En27
                                           .Threshold1(Threshold_Estimator_out1),  // ufix16_En25
                                           .New_Threshold(Soft_Thresholding2_out1)  // sfix16_En28
                                           );
  alpha1st_Level_Recon u_1st_Level_Recon (.clk(clk),
                                          .reset(reset),
                                          .enb(enb),
                                          .In_HiD(Soft_Thresholding2_out1),  // sfix16_En28
                                          .In_LoD(alpha1st_Level_Decomp2_out2),  // sfix16_En24
                                          .Out(alpha1st_Level_Recon_out1)  // sfix16_En23
                                          );
  alpha1st_Level_Recon1 u_1st_Level_Recon1 (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .In_HiD(Soft_Thresholding1_out1),  // sfix16_En28
                                            .In_LoD(alpha1st_Level_Recon_out1),  // sfix16_En23
                                            .Out(alpha1st_Level_Recon1_out1)  // sfix16_En23
                                            );
  alpha1st_Level_Recon4 u_1st_Level_Recon4 (.clk(clk),
                                            .reset(reset),
                                            .enb(enb),
                                            .In_HiD(Soft_Thresholding_out1),  // sfix16_En28
                                            .In_LoD(alpha1st_Level_Recon1_out1),  // sfix16_En23
                                            .Out(alpha1st_Level_Recon4_out1)  // sfix16_En23
                                            );
  assign Out1 = alpha1st_Level_Recon4_out1;

  assign ce_out = enb_1_1_1;

endmodule  // DWT_coif1_3_Level

